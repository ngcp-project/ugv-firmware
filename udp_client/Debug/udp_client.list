
udp_client.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000feac  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bdc  080100ac  080100ac  000200ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012c88  08012c88  000301c8  2**0
                  CONTENTS
  4 .ARM          00000008  08012c88  08012c88  00022c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012c90  08012c90  000301c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012c90  08012c90  00022c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012c94  08012c94  00022c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08012c98  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000088  08012d20  00030088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000128  08012dc0  00030128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000a594  200001c8  08012e60  000301c8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000a75c  08012e60  0003a75c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000301c8  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000301f6  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001ec36  00000000  00000000  00030239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00005352  00000000  00000000  0004ee6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000017c0  00000000  00000000  000541c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000012f5  00000000  00000000  00055988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00033e76  00000000  00000000  00056c7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002545a  00000000  00000000  0008aaf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0010ec15  00000000  00000000  000aff4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00006be8  00000000  00000000  001beb64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000062  00000000  00000000  001c574c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001c8 	.word	0x200001c8
 800021c:	00000000 	.word	0x00000000
 8000220:	08010094 	.word	0x08010094

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001cc 	.word	0x200001cc
 800023c:	08010094 	.word	0x08010094

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e0:	f3bf 8f4f 	dsb	sy
}
 80005e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005e6:	f3bf 8f6f 	isb	sy
}
 80005ea:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005ec:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <SCB_EnableICache+0x48>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005f4:	f3bf 8f4f 	dsb	sy
}
 80005f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005fa:	f3bf 8f6f 	isb	sy
}
 80005fe:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000600:	4b08      	ldr	r3, [pc, #32]	; (8000624 <SCB_EnableICache+0x48>)
 8000602:	695b      	ldr	r3, [r3, #20]
 8000604:	4a07      	ldr	r2, [pc, #28]	; (8000624 <SCB_EnableICache+0x48>)
 8000606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800060a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800060c:	f3bf 8f4f 	dsb	sy
}
 8000610:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000612:	f3bf 8f6f 	isb	sy
}
 8000616:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	e000ed00 	.word	0xe000ed00

08000628 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800062e:	4b1f      	ldr	r3, [pc, #124]	; (80006ac <SCB_EnableDCache+0x84>)
 8000630:	2200      	movs	r2, #0
 8000632:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000636:	f3bf 8f4f 	dsb	sy
}
 800063a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800063c:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <SCB_EnableDCache+0x84>)
 800063e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000642:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	0b5b      	lsrs	r3, r3, #13
 8000648:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800064c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	08db      	lsrs	r3, r3, #3
 8000652:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000656:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	015a      	lsls	r2, r3, #5
 800065c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000660:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000662:	68ba      	ldr	r2, [r7, #8]
 8000664:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000666:	4911      	ldr	r1, [pc, #68]	; (80006ac <SCB_EnableDCache+0x84>)
 8000668:	4313      	orrs	r3, r2
 800066a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	1e5a      	subs	r2, r3, #1
 8000672:	60ba      	str	r2, [r7, #8]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d1ef      	bne.n	8000658 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	1e5a      	subs	r2, r3, #1
 800067c:	60fa      	str	r2, [r7, #12]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d1e5      	bne.n	800064e <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000682:	f3bf 8f4f 	dsb	sy
}
 8000686:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000688:	4b08      	ldr	r3, [pc, #32]	; (80006ac <SCB_EnableDCache+0x84>)
 800068a:	695b      	ldr	r3, [r3, #20]
 800068c:	4a07      	ldr	r2, [pc, #28]	; (80006ac <SCB_EnableDCache+0x84>)
 800068e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000692:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000694:	f3bf 8f4f 	dsb	sy
}
 8000698:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800069a:	f3bf 8f6f 	isb	sy
}
 800069e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80006a0:	bf00      	nop
 80006a2:	3714      	adds	r7, #20
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	e000ed00 	.word	0xe000ed00

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006b4:	f000 fa58 	bl	8000b68 <MPU_Config>
/* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80006b8:	f7ff ff90 	bl	80005dc <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80006bc:	f7ff ffb4 	bl	8000628 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c0:	f000 fd2c 	bl	800111c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c4:	f000 f818 	bl	80006f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c8:	f000 f8d8 	bl	800087c <MX_GPIO_Init>
  MX_LWIP_Init();
 80006cc:	f003 fce6 	bl	800409c <MX_LWIP_Init>
  MX_TIM1_Init();
 80006d0:	f000 f880 	bl	80007d4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  //Start HAL timer interrupt

  udp_client_connect();
 80006d4:	f000 f9b8 	bl	8000a48 <udp_client_connect>
  HAL_TIM_Base_Start_IT(&htim1);
 80006d8:	4805      	ldr	r0, [pc, #20]	; (80006f0 <main+0x40>)
 80006da:	f003 f87b 	bl	80037d4 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  ethernetif_input(&gnetif);
 80006de:	4805      	ldr	r0, [pc, #20]	; (80006f4 <main+0x44>)
 80006e0:	f003 ff6c 	bl	80045bc <ethernetif_input>
	  ethernet_link_check_state(&gnetif);
 80006e4:	4803      	ldr	r0, [pc, #12]	; (80006f4 <main+0x44>)
 80006e6:	f004 f8e7 	bl	80048b8 <ethernet_link_check_state>
	  //udpClient
//	  gnetif.input()
	  //ethernet_input(p, netif)
	  sys_check_timeouts();
 80006ea:	f00b fad5 	bl	800bc98 <sys_check_timeouts>
	  ethernetif_input(&gnetif);
 80006ee:	e7f6      	b.n	80006de <main+0x2e>
 80006f0:	200001e4 	.word	0x200001e4
 80006f4:	200002a4 	.word	0x200002a4

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b094      	sub	sp, #80	; 0x50
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	f107 031c 	add.w	r3, r7, #28
 8000702:	2234      	movs	r2, #52	; 0x34
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f00e fc77 	bl	800effa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800071c:	4b2b      	ldr	r3, [pc, #172]	; (80007cc <SystemClock_Config+0xd4>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000720:	4a2a      	ldr	r2, [pc, #168]	; (80007cc <SystemClock_Config+0xd4>)
 8000722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000726:	6413      	str	r3, [r2, #64]	; 0x40
 8000728:	4b28      	ldr	r3, [pc, #160]	; (80007cc <SystemClock_Config+0xd4>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000734:	4b26      	ldr	r3, [pc, #152]	; (80007d0 <SystemClock_Config+0xd8>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a25      	ldr	r2, [pc, #148]	; (80007d0 <SystemClock_Config+0xd8>)
 800073a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800073e:	6013      	str	r3, [r2, #0]
 8000740:	4b23      	ldr	r3, [pc, #140]	; (80007d0 <SystemClock_Config+0xd8>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000748:	603b      	str	r3, [r7, #0]
 800074a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800074c:	2301      	movs	r3, #1
 800074e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000750:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000754:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000756:	2302      	movs	r3, #2
 8000758:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800075a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800075e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000760:	2308      	movs	r3, #8
 8000762:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000764:	23d8      	movs	r3, #216	; 0xd8
 8000766:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000768:	2302      	movs	r3, #2
 800076a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800076c:	2302      	movs	r3, #2
 800076e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000770:	2302      	movs	r3, #2
 8000772:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000774:	f107 031c 	add.w	r3, r7, #28
 8000778:	4618      	mov	r0, r3
 800077a:	f002 fb29 	bl	8002dd0 <HAL_RCC_OscConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000784:	f000 fa1e 	bl	8000bc4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000788:	f002 fad2 	bl	8002d30 <HAL_PWREx_EnableOverDrive>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000792:	f000 fa17 	bl	8000bc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000796:	230f      	movs	r3, #15
 8000798:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079a:	2302      	movs	r3, #2
 800079c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ac:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007ae:	f107 0308 	add.w	r3, r7, #8
 80007b2:	2107      	movs	r1, #7
 80007b4:	4618      	mov	r0, r3
 80007b6:	f002 fdb9 	bl	800332c <HAL_RCC_ClockConfig>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80007c0:	f000 fa00 	bl	8000bc4 <Error_Handler>
  }
}
 80007c4:	bf00      	nop
 80007c6:	3750      	adds	r7, #80	; 0x50
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40007000 	.word	0x40007000

080007d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b088      	sub	sp, #32
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007da:	f107 0310 	add.w	r3, r7, #16
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e8:	1d3b      	adds	r3, r7, #4
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007f2:	4b20      	ldr	r3, [pc, #128]	; (8000874 <MX_TIM1_Init+0xa0>)
 80007f4:	4a20      	ldr	r2, [pc, #128]	; (8000878 <MX_TIM1_Init+0xa4>)
 80007f6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10800;
 80007f8:	4b1e      	ldr	r3, [pc, #120]	; (8000874 <MX_TIM1_Init+0xa0>)
 80007fa:	f642 2230 	movw	r2, #10800	; 0x2a30
 80007fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000800:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <MX_TIM1_Init+0xa0>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8000806:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <MX_TIM1_Init+0xa0>)
 8000808:	f242 7210 	movw	r2, #10000	; 0x2710
 800080c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800080e:	4b19      	ldr	r3, [pc, #100]	; (8000874 <MX_TIM1_Init+0xa0>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000814:	4b17      	ldr	r3, [pc, #92]	; (8000874 <MX_TIM1_Init+0xa0>)
 8000816:	2200      	movs	r2, #0
 8000818:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081a:	4b16      	ldr	r3, [pc, #88]	; (8000874 <MX_TIM1_Init+0xa0>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000820:	4814      	ldr	r0, [pc, #80]	; (8000874 <MX_TIM1_Init+0xa0>)
 8000822:	f002 ff7f 	bl	8003724 <HAL_TIM_Base_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 800082c:	f000 f9ca 	bl	8000bc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000830:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000834:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000836:	f107 0310 	add.w	r3, r7, #16
 800083a:	4619      	mov	r1, r3
 800083c:	480d      	ldr	r0, [pc, #52]	; (8000874 <MX_TIM1_Init+0xa0>)
 800083e:	f003 f949 	bl	8003ad4 <HAL_TIM_ConfigClockSource>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000848:	f000 f9bc 	bl	8000bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800084c:	2300      	movs	r3, #0
 800084e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000850:	2300      	movs	r3, #0
 8000852:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000854:	2300      	movs	r3, #0
 8000856:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	4619      	mov	r1, r3
 800085c:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_TIM1_Init+0xa0>)
 800085e:	f003 fb71 	bl	8003f44 <HAL_TIMEx_MasterConfigSynchronization>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000868:	f000 f9ac 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	3720      	adds	r7, #32
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	200001e4 	.word	0x200001e4
 8000878:	40010000 	.word	0x40010000

0800087c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08c      	sub	sp, #48	; 0x30
 8000880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000892:	4b5e      	ldr	r3, [pc, #376]	; (8000a0c <MX_GPIO_Init+0x190>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a5d      	ldr	r2, [pc, #372]	; (8000a0c <MX_GPIO_Init+0x190>)
 8000898:	f043 0304 	orr.w	r3, r3, #4
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b5b      	ldr	r3, [pc, #364]	; (8000a0c <MX_GPIO_Init+0x190>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0304 	and.w	r3, r3, #4
 80008a6:	61bb      	str	r3, [r7, #24]
 80008a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008aa:	4b58      	ldr	r3, [pc, #352]	; (8000a0c <MX_GPIO_Init+0x190>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a57      	ldr	r2, [pc, #348]	; (8000a0c <MX_GPIO_Init+0x190>)
 80008b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b55      	ldr	r3, [pc, #340]	; (8000a0c <MX_GPIO_Init+0x190>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008be:	617b      	str	r3, [r7, #20]
 80008c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c2:	4b52      	ldr	r3, [pc, #328]	; (8000a0c <MX_GPIO_Init+0x190>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a51      	ldr	r2, [pc, #324]	; (8000a0c <MX_GPIO_Init+0x190>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b4f      	ldr	r3, [pc, #316]	; (8000a0c <MX_GPIO_Init+0x190>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008da:	4b4c      	ldr	r3, [pc, #304]	; (8000a0c <MX_GPIO_Init+0x190>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a4b      	ldr	r2, [pc, #300]	; (8000a0c <MX_GPIO_Init+0x190>)
 80008e0:	f043 0302 	orr.w	r3, r3, #2
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b49      	ldr	r3, [pc, #292]	; (8000a0c <MX_GPIO_Init+0x190>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0302 	and.w	r3, r3, #2
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008f2:	4b46      	ldr	r3, [pc, #280]	; (8000a0c <MX_GPIO_Init+0x190>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a45      	ldr	r2, [pc, #276]	; (8000a0c <MX_GPIO_Init+0x190>)
 80008f8:	f043 0308 	orr.w	r3, r3, #8
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b43      	ldr	r3, [pc, #268]	; (8000a0c <MX_GPIO_Init+0x190>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0308 	and.w	r3, r3, #8
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800090a:	4b40      	ldr	r3, [pc, #256]	; (8000a0c <MX_GPIO_Init+0x190>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a3f      	ldr	r2, [pc, #252]	; (8000a0c <MX_GPIO_Init+0x190>)
 8000910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b3d      	ldr	r3, [pc, #244]	; (8000a0c <MX_GPIO_Init+0x190>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	f244 0181 	movw	r1, #16513	; 0x4081
 8000928:	4839      	ldr	r0, [pc, #228]	; (8000a10 <MX_GPIO_Init+0x194>)
 800092a:	f002 f9cd 	bl	8002cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	2140      	movs	r1, #64	; 0x40
 8000932:	4838      	ldr	r0, [pc, #224]	; (8000a14 <MX_GPIO_Init+0x198>)
 8000934:	f002 f9c8 	bl	8002cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000938:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800093e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	4832      	ldr	r0, [pc, #200]	; (8000a18 <MX_GPIO_Init+0x19c>)
 8000950:	f002 f80e 	bl	8002970 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000954:	f244 0381 	movw	r3, #16513	; 0x4081
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095a:	2301      	movs	r3, #1
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	4828      	ldr	r0, [pc, #160]	; (8000a10 <MX_GPIO_Init+0x194>)
 800096e:	f001 ffff 	bl	8002970 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000972:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000978:	2302      	movs	r3, #2
 800097a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000980:	2303      	movs	r3, #3
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000984:	2307      	movs	r3, #7
 8000986:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	4619      	mov	r1, r3
 800098e:	4823      	ldr	r0, [pc, #140]	; (8000a1c <MX_GPIO_Init+0x1a0>)
 8000990:	f001 ffee 	bl	8002970 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000994:	2340      	movs	r3, #64	; 0x40
 8000996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000998:	2301      	movs	r3, #1
 800099a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	4619      	mov	r1, r3
 80009aa:	481a      	ldr	r0, [pc, #104]	; (8000a14 <MX_GPIO_Init+0x198>)
 80009ac:	f001 ffe0 	bl	8002970 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009b0:	2380      	movs	r3, #128	; 0x80
 80009b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b4:	2300      	movs	r3, #0
 80009b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	4814      	ldr	r0, [pc, #80]	; (8000a14 <MX_GPIO_Init+0x198>)
 80009c4:	f001 ffd4 	bl	8002970 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80009c8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ce:	2302      	movs	r3, #2
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d6:	2303      	movs	r3, #3
 80009d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009da:	230a      	movs	r3, #10
 80009dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	480e      	ldr	r0, [pc, #56]	; (8000a20 <MX_GPIO_Init+0x1a4>)
 80009e6:	f001 ffc3 	bl	8002970 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80009ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f0:	2300      	movs	r3, #0
 80009f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4619      	mov	r1, r3
 80009fe:	4808      	ldr	r0, [pc, #32]	; (8000a20 <MX_GPIO_Init+0x1a4>)
 8000a00:	f001 ffb6 	bl	8002970 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a04:	bf00      	nop
 8000a06:	3730      	adds	r7, #48	; 0x30
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40020400 	.word	0x40020400
 8000a14:	40021800 	.word	0x40021800
 8000a18:	40020800 	.word	0x40020800
 8000a1c:	40020c00 	.word	0x40020c00
 8000a20:	40020000 	.word	0x40020000

08000a24 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000a2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a30:	4804      	ldr	r0, [pc, #16]	; (8000a44 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a32:	f002 f962 	bl	8002cfa <HAL_GPIO_TogglePin>

	udp_client_send();
 8000a36:	f000 f845 	bl	8000ac4 <udp_client_send>
}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40020400 	.word	0x40020400

08000a48 <udp_client_connect>:

void udp_client_connect()
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
	err_t err;

	// Create a new UDP control block
	upcb = udp_new();
 8000a4e:	f00b fe27 	bl	800c6a0 <udp_new>
 8000a52:	4603      	mov	r3, r0
 8000a54:	4a16      	ldr	r2, [pc, #88]	; (8000ab0 <udp_client_connect+0x68>)
 8000a56:	6013      	str	r3, [r2, #0]

	// Bind control block to module's IP address and port
	// Static IP address: 192.168.2.150
	// Arbitrary port # selection: 8
	ip_addr_t my_ip;
	IP_ADDR4(&my_ip, 192, 168, 2, 150);
 8000a58:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <udp_client_connect+0x6c>)
 8000a5a:	60bb      	str	r3, [r7, #8]

	// Binds udp client to local IP addres
	udp_bind(upcb, &my_ip, 42179);
 8000a5c:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <udp_client_connect+0x68>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f107 0108 	add.w	r1, r7, #8
 8000a64:	f24a 42c3 	movw	r2, #42179	; 0xa4c3
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f00b fd03 	bl	800c474 <udp_bind>

	// Configure destination IP address
	// Host ip address: 192.168.2.5
	// Arbitrary port # selection: 12345
	ip_addr_t DestIPaddr;
	IP_ADDR4(&DestIPaddr, 192, 168, 2, 5);
 8000a6e:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <udp_client_connect+0x70>)
 8000a70:	607b      	str	r3, [r7, #4]
	err = udp_connect(upcb, &DestIPaddr, 12345);
 8000a72:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <udp_client_connect+0x68>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	1d39      	adds	r1, r7, #4
 8000a78:	f243 0239 	movw	r2, #12345	; 0x3039
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f00b fd81 	bl	800c584 <udp_connect>
 8000a82:	4603      	mov	r3, r0
 8000a84:	73fb      	strb	r3, [r7, #15]

	if (err == HAL_OK)
 8000a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d10c      	bne.n	8000aa8 <udp_client_connect+0x60>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000a8e:	2180      	movs	r1, #128	; 0x80
 8000a90:	480a      	ldr	r0, [pc, #40]	; (8000abc <udp_client_connect+0x74>)
 8000a92:	f002 f932 	bl	8002cfa <HAL_GPIO_TogglePin>
		// Send message to server
		// Add function here
		udp_client_send();
 8000a96:	f000 f815 	bl	8000ac4 <udp_client_send>
		// Set a receive callback for the upcb when server sends data to client
		udp_recv(upcb, udp_receive_callback, NULL);
 8000a9a:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <udp_client_connect+0x68>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	4907      	ldr	r1, [pc, #28]	; (8000ac0 <udp_client_connect+0x78>)
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f00b fddc 	bl	800c660 <udp_recv>

	}
}
 8000aa8:	bf00      	nop
 8000aaa:	3710      	adds	r7, #16
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000230 	.word	0x20000230
 8000ab4:	9602a8c0 	.word	0x9602a8c0
 8000ab8:	0502a8c0 	.word	0x0502a8c0
 8000abc:	40020400 	.word	0x40020400
 8000ac0:	08000b29 	.word	0x08000b29

08000ac4 <udp_client_send>:

static void udp_client_send()
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b09c      	sub	sp, #112	; 0x70
 8000ac8:	af00      	add	r7, sp, #0

	struct pbuf *tx_buff;
	char data[100];

	int len = sprintf(data, "Sending UDP client message %d: ", counter);
 8000aca:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <udp_client_send+0x58>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	4913      	ldr	r1, [pc, #76]	; (8000b20 <udp_client_send+0x5c>)
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f00e fa04 	bl	800eee0 <siprintf>
 8000ad8:	66f8      	str	r0, [r7, #108]	; 0x6c

	// Allocate pbuf from pool
	tx_buff = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 8000ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	2036      	movs	r0, #54	; 0x36
 8000ae6:	f005 f85f 	bl	8005ba8 <pbuf_alloc>
 8000aea:	66b8      	str	r0, [r7, #104]	; 0x68

	if (tx_buff != NULL)
 8000aec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d00f      	beq.n	8000b12 <udp_client_send+0x4e>
	{
		// Copy data into pbuf
		pbuf_take(tx_buff, data, len);
 8000af2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000af4:	b29a      	uxth	r2, r3
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	4619      	mov	r1, r3
 8000afa:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8000afc:	f005 fda4 	bl	8006648 <pbuf_take>

		// Send udp data
		udp_send(upcb, tx_buff);
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <udp_client_send+0x60>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000b06:	4618      	mov	r0, r3
 8000b08:	f00b faca 	bl	800c0a0 <udp_send>

		// Free pbuf
		pbuf_free(tx_buff);
 8000b0c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8000b0e:	f005 fb2f 	bl	8006170 <pbuf_free>
	}
}
 8000b12:	bf00      	nop
 8000b14:	3770      	adds	r7, #112	; 0x70
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000298 	.word	0x20000298
 8000b20:	080100ac 	.word	0x080100ac
 8000b24:	20000230 	.word	0x20000230

08000b28 <udp_receive_callback>:

void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p,
		const ip_addr_t *addr, u16_t port)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
 8000b34:	603b      	str	r3, [r7, #0]
	// Copy data from the pbuf
	strncpy(buffer, (char *)p->payload, p->len);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6859      	ldr	r1, [r3, #4]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	895b      	ldrh	r3, [r3, #10]
 8000b3e:	461a      	mov	r2, r3
 8000b40:	4807      	ldr	r0, [pc, #28]	; (8000b60 <udp_receive_callback+0x38>)
 8000b42:	f00e fa62 	bl	800f00a <strncpy>


	// Increment message count
	++counter;
 8000b46:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <udp_receive_callback+0x3c>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	4a05      	ldr	r2, [pc, #20]	; (8000b64 <udp_receive_callback+0x3c>)
 8000b4e:	6013      	str	r3, [r2, #0]

	// Free recieve pbuf
	pbuf_free(p);
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f005 fb0d 	bl	8006170 <pbuf_free>
}
 8000b56:	bf00      	nop
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000234 	.word	0x20000234
 8000b64:	20000298 	.word	0x20000298

08000b68 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b6e:	463b      	mov	r3, r7
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b7a:	f000 fc6b 	bl	8001454 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x2007c000;
 8000b86:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <MPU_Config+0x58>)
 8000b88:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000b8a:	230d      	movs	r3, #13
 8000b8c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000b92:	2301      	movs	r3, #1
 8000b94:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000b96:	2303      	movs	r3, #3
 8000b98:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000baa:	463b      	mov	r3, r7
 8000bac:	4618      	mov	r0, r3
 8000bae:	f000 fc89 	bl	80014c4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000bb2:	2004      	movs	r0, #4
 8000bb4:	f000 fc66 	bl	8001484 <HAL_MPU_Enable>

}
 8000bb8:	bf00      	nop
 8000bba:	3710      	adds	r7, #16
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	2007c000 	.word	0x2007c000

08000bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc8:	b672      	cpsid	i
}
 8000bca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <Error_Handler+0x8>
	...

08000bd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd6:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <HAL_MspInit+0x44>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	4a0e      	ldr	r2, [pc, #56]	; (8000c14 <HAL_MspInit+0x44>)
 8000bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be0:	6413      	str	r3, [r2, #64]	; 0x40
 8000be2:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <HAL_MspInit+0x44>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bee:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <HAL_MspInit+0x44>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf2:	4a08      	ldr	r2, [pc, #32]	; (8000c14 <HAL_MspInit+0x44>)
 8000bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_MspInit+0x44>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c02:	603b      	str	r3, [r7, #0]
 8000c04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	40023800 	.word	0x40023800

08000c18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a11      	ldr	r2, [pc, #68]	; (8000c6c <HAL_TIM_Base_MspInit+0x54>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d11b      	bne.n	8000c62 <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c2a:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <HAL_TIM_Base_MspInit+0x58>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2e:	4a10      	ldr	r2, [pc, #64]	; (8000c70 <HAL_TIM_Base_MspInit+0x58>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6453      	str	r3, [r2, #68]	; 0x44
 8000c36:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <HAL_TIM_Base_MspInit+0x58>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2100      	movs	r1, #0
 8000c46:	2018      	movs	r0, #24
 8000c48:	f000 fbcd 	bl	80013e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000c4c:	2018      	movs	r0, #24
 8000c4e:	f000 fbe6 	bl	800141e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2100      	movs	r1, #0
 8000c56:	2019      	movs	r0, #25
 8000c58:	f000 fbc5 	bl	80013e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c5c:	2019      	movs	r0, #25
 8000c5e:	f000 fbde 	bl	800141e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000c62:	bf00      	nop
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40010000 	.word	0x40010000
 8000c70:	40023800 	.word	0x40023800

08000c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c78:	e7fe      	b.n	8000c78 <NMI_Handler+0x4>

08000c7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c7e:	e7fe      	b.n	8000c7e <HardFault_Handler+0x4>

08000c80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <MemManage_Handler+0x4>

08000c86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c8a:	e7fe      	b.n	8000c8a <BusFault_Handler+0x4>

08000c8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <UsageFault_Handler+0x4>

08000c92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc0:	f000 fa72 	bl	80011a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000cce:	f002 fdf9 	bl	80038c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	200001e4 	.word	0x200001e4

08000cdc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ce0:	4802      	ldr	r0, [pc, #8]	; (8000cec <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000ce2:	f002 fdef 	bl	80038c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	200001e4 	.word	0x200001e4

08000cf0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000cf4:	4802      	ldr	r0, [pc, #8]	; (8000d00 <ETH_IRQHandler+0x10>)
 8000cf6:	f000 ff4f 	bl	8001b98 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20004c7c 	.word	0x20004c7c

08000d04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return 1;
 8000d08:	2301      	movs	r3, #1
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <_kill>:

int _kill(int pid, int sig)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d1e:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <_kill+0x20>)
 8000d20:	2216      	movs	r2, #22
 8000d22:	601a      	str	r2, [r3, #0]
  return -1;
 8000d24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	2000a74c 	.word	0x2000a74c

08000d38 <_exit>:

void _exit (int status)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000d40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f7ff ffe5 	bl	8000d14 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000d4a:	e7fe      	b.n	8000d4a <_exit+0x12>

08000d4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]
 8000d5c:	e00a      	b.n	8000d74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d5e:	f3af 8000 	nop.w
 8000d62:	4601      	mov	r1, r0
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	1c5a      	adds	r2, r3, #1
 8000d68:	60ba      	str	r2, [r7, #8]
 8000d6a:	b2ca      	uxtb	r2, r1
 8000d6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	3301      	adds	r3, #1
 8000d72:	617b      	str	r3, [r7, #20]
 8000d74:	697a      	ldr	r2, [r7, #20]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	dbf0      	blt.n	8000d5e <_read+0x12>
  }

  return len;
 8000d7c:	687b      	ldr	r3, [r7, #4]
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3718      	adds	r7, #24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b086      	sub	sp, #24
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	60f8      	str	r0, [r7, #12]
 8000d8e:	60b9      	str	r1, [r7, #8]
 8000d90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
 8000d96:	e009      	b.n	8000dac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	1c5a      	adds	r2, r3, #1
 8000d9c:	60ba      	str	r2, [r7, #8]
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	3301      	adds	r3, #1
 8000daa:	617b      	str	r3, [r7, #20]
 8000dac:	697a      	ldr	r2, [r7, #20]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	dbf1      	blt.n	8000d98 <_write+0x12>
  }
  return len;
 8000db4:	687b      	ldr	r3, [r7, #4]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <_close>:

int _close(int file)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	b083      	sub	sp, #12
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	b083      	sub	sp, #12
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
 8000dde:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000de6:	605a      	str	r2, [r3, #4]
  return 0;
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <_isatty>:

int _isatty(int file)
{
 8000df6:	b480      	push	{r7}
 8000df8:	b083      	sub	sp, #12
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dfe:	2301      	movs	r3, #1
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3714      	adds	r7, #20
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
	...

08000e28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b087      	sub	sp, #28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e30:	4a14      	ldr	r2, [pc, #80]	; (8000e84 <_sbrk+0x5c>)
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <_sbrk+0x60>)
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <_sbrk+0x64>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d102      	bne.n	8000e4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <_sbrk+0x64>)
 8000e46:	4a12      	ldr	r2, [pc, #72]	; (8000e90 <_sbrk+0x68>)
 8000e48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <_sbrk+0x64>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4413      	add	r3, r2
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d205      	bcs.n	8000e64 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000e58:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <_sbrk+0x6c>)
 8000e5a:	220c      	movs	r2, #12
 8000e5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e62:	e009      	b.n	8000e78 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e64:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <_sbrk+0x64>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <_sbrk+0x64>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4413      	add	r3, r2
 8000e72:	4a06      	ldr	r2, [pc, #24]	; (8000e8c <_sbrk+0x64>)
 8000e74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e76:	68fb      	ldr	r3, [r7, #12]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	371c      	adds	r7, #28
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	20080000 	.word	0x20080000
 8000e88:	00000400 	.word	0x00000400
 8000e8c:	2000029c 	.word	0x2000029c
 8000e90:	2000a760 	.word	0x2000a760
 8000e94:	2000a74c 	.word	0x2000a74c

08000e98 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <SystemInit+0x20>)
 8000e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ea2:	4a05      	ldr	r2, [pc, #20]	; (8000eb8 <SystemInit+0x20>)
 8000ea4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ebc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ef4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ec0:	f7ff ffea 	bl	8000e98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ec4:	480c      	ldr	r0, [pc, #48]	; (8000ef8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ec6:	490d      	ldr	r1, [pc, #52]	; (8000efc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ec8:	4a0d      	ldr	r2, [pc, #52]	; (8000f00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ecc:	e002      	b.n	8000ed4 <LoopCopyDataInit>

08000ece <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ece:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed2:	3304      	adds	r3, #4

08000ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ed6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed8:	d3f9      	bcc.n	8000ece <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eda:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000edc:	4c0a      	ldr	r4, [pc, #40]	; (8000f08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ede:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee0:	e001      	b.n	8000ee6 <LoopFillZerobss>

08000ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee4:	3204      	adds	r2, #4

08000ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ee6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee8:	d3fb      	bcc.n	8000ee2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000eea:	f00e f8e7 	bl	800f0bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eee:	f7ff fbdf 	bl	80006b0 <main>
  bx  lr    
 8000ef2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ef4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000ef8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000efc:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000f00:	08012c98 	.word	0x08012c98
  ldr r2, =_sbss
 8000f04:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8000f08:	2000a75c 	.word	0x2000a75c

08000f0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f0c:	e7fe      	b.n	8000f0c <ADC_IRQHandler>

08000f0e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	b083      	sub	sp, #12
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
 8000f16:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d00b      	beq.n	8000f36 <LAN8742_RegisterBusIO+0x28>
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d007      	beq.n	8000f36 <LAN8742_RegisterBusIO+0x28>
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d003      	beq.n	8000f36 <LAN8742_RegisterBusIO+0x28>
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	691b      	ldr	r3, [r3, #16]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d102      	bne.n	8000f3c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000f36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f3a:	e014      	b.n	8000f66 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685a      	ldr	r2, [r3, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	68da      	ldr	r2, [r3, #12]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	689a      	ldr	r2, [r3, #8]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	691a      	ldr	r2, [r3, #16]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b086      	sub	sp, #24
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d139      	bne.n	8001002 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d002      	beq.n	8000f9c <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2220      	movs	r2, #32
 8000fa0:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
 8000fa6:	e01c      	b.n	8000fe2 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	695b      	ldr	r3, [r3, #20]
 8000fac:	f107 020c 	add.w	r2, r7, #12
 8000fb0:	2112      	movs	r1, #18
 8000fb2:	6978      	ldr	r0, [r7, #20]
 8000fb4:	4798      	blx	r3
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	da03      	bge.n	8000fc4 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000fbc:	f06f 0304 	mvn.w	r3, #4
 8000fc0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000fc2:	e00b      	b.n	8000fdc <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f003 031f 	and.w	r3, r3, #31
 8000fca:	697a      	ldr	r2, [r7, #20]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d105      	bne.n	8000fdc <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	697a      	ldr	r2, [r7, #20]
 8000fd4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
         break;
 8000fda:	e005      	b.n	8000fe8 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	617b      	str	r3, [r7, #20]
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	2b1f      	cmp	r3, #31
 8000fe6:	d9df      	bls.n	8000fa8 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b1f      	cmp	r3, #31
 8000fee:	d902      	bls.n	8000ff6 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000ff0:	f06f 0302 	mvn.w	r3, #2
 8000ff4:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d102      	bne.n	8001002 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2201      	movs	r2, #1
 8001000:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001002:	693b      	ldr	r3, [r7, #16]
 }
 8001004:	4618      	mov	r0, r3
 8001006:	3718      	adds	r7, #24
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	695b      	ldr	r3, [r3, #20]
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	6810      	ldr	r0, [r2, #0]
 8001020:	f107 020c 	add.w	r2, r7, #12
 8001024:	2101      	movs	r1, #1
 8001026:	4798      	blx	r3
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	da02      	bge.n	8001034 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800102e:	f06f 0304 	mvn.w	r3, #4
 8001032:	e06e      	b.n	8001112 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	695b      	ldr	r3, [r3, #20]
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	6810      	ldr	r0, [r2, #0]
 800103c:	f107 020c 	add.w	r2, r7, #12
 8001040:	2101      	movs	r1, #1
 8001042:	4798      	blx	r3
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	da02      	bge.n	8001050 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800104a:	f06f 0304 	mvn.w	r3, #4
 800104e:	e060      	b.n	8001112 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f003 0304 	and.w	r3, r3, #4
 8001056:	2b00      	cmp	r3, #0
 8001058:	d101      	bne.n	800105e <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 800105a:	2301      	movs	r3, #1
 800105c:	e059      	b.n	8001112 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	6810      	ldr	r0, [r2, #0]
 8001066:	f107 020c 	add.w	r2, r7, #12
 800106a:	2100      	movs	r1, #0
 800106c:	4798      	blx	r3
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	da02      	bge.n	800107a <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001074:	f06f 0304 	mvn.w	r3, #4
 8001078:	e04b      	b.n	8001112 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d11b      	bne.n	80010bc <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d006      	beq.n	800109c <LAN8742_GetLinkState+0x90>
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001098:	2302      	movs	r3, #2
 800109a:	e03a      	b.n	8001112 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e033      	b.n	8001112 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80010b4:	2304      	movs	r3, #4
 80010b6:	e02c      	b.n	8001112 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80010b8:	2305      	movs	r3, #5
 80010ba:	e02a      	b.n	8001112 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	695b      	ldr	r3, [r3, #20]
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	6810      	ldr	r0, [r2, #0]
 80010c4:	f107 020c 	add.w	r2, r7, #12
 80010c8:	211f      	movs	r1, #31
 80010ca:	4798      	blx	r3
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	da02      	bge.n	80010d8 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80010d2:	f06f 0304 	mvn.w	r3, #4
 80010d6:	e01c      	b.n	8001112 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d101      	bne.n	80010e6 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80010e2:	2306      	movs	r3, #6
 80010e4:	e015      	b.n	8001112 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f003 031c 	and.w	r3, r3, #28
 80010ec:	2b18      	cmp	r3, #24
 80010ee:	d101      	bne.n	80010f4 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80010f0:	2302      	movs	r3, #2
 80010f2:	e00e      	b.n	8001112 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f003 031c 	and.w	r3, r3, #28
 80010fa:	2b08      	cmp	r3, #8
 80010fc:	d101      	bne.n	8001102 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80010fe:	2303      	movs	r3, #3
 8001100:	e007      	b.n	8001112 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f003 031c 	and.w	r3, r3, #28
 8001108:	2b14      	cmp	r3, #20
 800110a:	d101      	bne.n	8001110 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800110c:	2304      	movs	r3, #4
 800110e:	e000      	b.n	8001112 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001110:	2305      	movs	r3, #5
    }
  }
}
 8001112:	4618      	mov	r0, r3
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <HAL_Init+0x28>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a07      	ldr	r2, [pc, #28]	; (8001144 <HAL_Init+0x28>)
 8001126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800112a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800112c:	2003      	movs	r0, #3
 800112e:	f000 f94f 	bl	80013d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001132:	2000      	movs	r0, #0
 8001134:	f000 f808 	bl	8001148 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001138:	f7ff fd4a 	bl	8000bd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40023c00 	.word	0x40023c00

08001148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <HAL_InitTick+0x54>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <HAL_InitTick+0x58>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	4619      	mov	r1, r3
 800115a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001162:	fbb2 f3f3 	udiv	r3, r2, r3
 8001166:	4618      	mov	r0, r3
 8001168:	f000 f967 	bl	800143a <HAL_SYSTICK_Config>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e00e      	b.n	8001194 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2b0f      	cmp	r3, #15
 800117a:	d80a      	bhi.n	8001192 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800117c:	2200      	movs	r2, #0
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001184:	f000 f92f 	bl	80013e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001188:	4a06      	ldr	r2, [pc, #24]	; (80011a4 <HAL_InitTick+0x5c>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800118e:	2300      	movs	r3, #0
 8001190:	e000      	b.n	8001194 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
}
 8001194:	4618      	mov	r0, r3
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000000 	.word	0x20000000
 80011a0:	20000008 	.word	0x20000008
 80011a4:	20000004 	.word	0x20000004

080011a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <HAL_IncTick+0x20>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <HAL_IncTick+0x24>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4413      	add	r3, r2
 80011b8:	4a04      	ldr	r2, [pc, #16]	; (80011cc <HAL_IncTick+0x24>)
 80011ba:	6013      	str	r3, [r2, #0]
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	20000008 	.word	0x20000008
 80011cc:	200002a0 	.word	0x200002a0

080011d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  return uwTick;
 80011d4:	4b03      	ldr	r3, [pc, #12]	; (80011e4 <HAL_GetTick+0x14>)
 80011d6:	681b      	ldr	r3, [r3, #0]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	200002a0 	.word	0x200002a0

080011e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011f0:	f7ff ffee 	bl	80011d0 <HAL_GetTick>
 80011f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001200:	d005      	beq.n	800120e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001202:	4b0a      	ldr	r3, [pc, #40]	; (800122c <HAL_Delay+0x44>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	461a      	mov	r2, r3
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	4413      	add	r3, r2
 800120c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800120e:	bf00      	nop
 8001210:	f7ff ffde 	bl	80011d0 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	68fa      	ldr	r2, [r7, #12]
 800121c:	429a      	cmp	r2, r3
 800121e:	d8f7      	bhi.n	8001210 <HAL_Delay+0x28>
  {
  }
}
 8001220:	bf00      	nop
 8001222:	bf00      	nop
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000008 	.word	0x20000008

08001230 <__NVIC_SetPriorityGrouping>:
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001240:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <__NVIC_SetPriorityGrouping+0x40>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800124c:	4013      	ands	r3, r2
 800124e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <__NVIC_SetPriorityGrouping+0x44>)
 800125a:	4313      	orrs	r3, r2
 800125c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800125e:	4a04      	ldr	r2, [pc, #16]	; (8001270 <__NVIC_SetPriorityGrouping+0x40>)
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	60d3      	str	r3, [r2, #12]
}
 8001264:	bf00      	nop
 8001266:	3714      	adds	r7, #20
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000ed00 	.word	0xe000ed00
 8001274:	05fa0000 	.word	0x05fa0000

08001278 <__NVIC_GetPriorityGrouping>:
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800127c:	4b04      	ldr	r3, [pc, #16]	; (8001290 <__NVIC_GetPriorityGrouping+0x18>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	0a1b      	lsrs	r3, r3, #8
 8001282:	f003 0307 	and.w	r3, r3, #7
}
 8001286:	4618      	mov	r0, r3
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <__NVIC_EnableIRQ>:
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	db0b      	blt.n	80012be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	f003 021f 	and.w	r2, r3, #31
 80012ac:	4907      	ldr	r1, [pc, #28]	; (80012cc <__NVIC_EnableIRQ+0x38>)
 80012ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b2:	095b      	lsrs	r3, r3, #5
 80012b4:	2001      	movs	r0, #1
 80012b6:	fa00 f202 	lsl.w	r2, r0, r2
 80012ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	e000e100 	.word	0xe000e100

080012d0 <__NVIC_SetPriority>:
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	6039      	str	r1, [r7, #0]
 80012da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	db0a      	blt.n	80012fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	490c      	ldr	r1, [pc, #48]	; (800131c <__NVIC_SetPriority+0x4c>)
 80012ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ee:	0112      	lsls	r2, r2, #4
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	440b      	add	r3, r1
 80012f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80012f8:	e00a      	b.n	8001310 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	4908      	ldr	r1, [pc, #32]	; (8001320 <__NVIC_SetPriority+0x50>)
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	f003 030f 	and.w	r3, r3, #15
 8001306:	3b04      	subs	r3, #4
 8001308:	0112      	lsls	r2, r2, #4
 800130a:	b2d2      	uxtb	r2, r2
 800130c:	440b      	add	r3, r1
 800130e:	761a      	strb	r2, [r3, #24]
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000e100 	.word	0xe000e100
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <NVIC_EncodePriority>:
{
 8001324:	b480      	push	{r7}
 8001326:	b089      	sub	sp, #36	; 0x24
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	f1c3 0307 	rsb	r3, r3, #7
 800133e:	2b04      	cmp	r3, #4
 8001340:	bf28      	it	cs
 8001342:	2304      	movcs	r3, #4
 8001344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3304      	adds	r3, #4
 800134a:	2b06      	cmp	r3, #6
 800134c:	d902      	bls.n	8001354 <NVIC_EncodePriority+0x30>
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3b03      	subs	r3, #3
 8001352:	e000      	b.n	8001356 <NVIC_EncodePriority+0x32>
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001358:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43da      	mvns	r2, r3
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	401a      	ands	r2, r3
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800136c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	fa01 f303 	lsl.w	r3, r1, r3
 8001376:	43d9      	mvns	r1, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800137c:	4313      	orrs	r3, r2
}
 800137e:	4618      	mov	r0, r3
 8001380:	3724      	adds	r7, #36	; 0x24
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
	...

0800138c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3b01      	subs	r3, #1
 8001398:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800139c:	d301      	bcc.n	80013a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800139e:	2301      	movs	r3, #1
 80013a0:	e00f      	b.n	80013c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013a2:	4a0a      	ldr	r2, [pc, #40]	; (80013cc <SysTick_Config+0x40>)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013aa:	210f      	movs	r1, #15
 80013ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013b0:	f7ff ff8e 	bl	80012d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b4:	4b05      	ldr	r3, [pc, #20]	; (80013cc <SysTick_Config+0x40>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ba:	4b04      	ldr	r3, [pc, #16]	; (80013cc <SysTick_Config+0x40>)
 80013bc:	2207      	movs	r2, #7
 80013be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	e000e010 	.word	0xe000e010

080013d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f7ff ff29 	bl	8001230 <__NVIC_SetPriorityGrouping>
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b086      	sub	sp, #24
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	4603      	mov	r3, r0
 80013ee:	60b9      	str	r1, [r7, #8]
 80013f0:	607a      	str	r2, [r7, #4]
 80013f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013f8:	f7ff ff3e 	bl	8001278 <__NVIC_GetPriorityGrouping>
 80013fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	68b9      	ldr	r1, [r7, #8]
 8001402:	6978      	ldr	r0, [r7, #20]
 8001404:	f7ff ff8e 	bl	8001324 <NVIC_EncodePriority>
 8001408:	4602      	mov	r2, r0
 800140a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800140e:	4611      	mov	r1, r2
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff5d 	bl	80012d0 <__NVIC_SetPriority>
}
 8001416:	bf00      	nop
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
 8001424:	4603      	mov	r3, r0
 8001426:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ff31 	bl	8001294 <__NVIC_EnableIRQ>
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff ffa2 	bl	800138c <SysTick_Config>
 8001448:	4603      	mov	r3, r0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001458:	f3bf 8f5f 	dmb	sy
}
 800145c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800145e:	4b07      	ldr	r3, [pc, #28]	; (800147c <HAL_MPU_Disable+0x28>)
 8001460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001462:	4a06      	ldr	r2, [pc, #24]	; (800147c <HAL_MPU_Disable+0x28>)
 8001464:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001468:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800146a:	4b05      	ldr	r3, [pc, #20]	; (8001480 <HAL_MPU_Disable+0x2c>)
 800146c:	2200      	movs	r2, #0
 800146e:	605a      	str	r2, [r3, #4]
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000ed00 	.word	0xe000ed00
 8001480:	e000ed90 	.word	0xe000ed90

08001484 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800148c:	4a0b      	ldr	r2, [pc, #44]	; (80014bc <HAL_MPU_Enable+0x38>)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001496:	4b0a      	ldr	r3, [pc, #40]	; (80014c0 <HAL_MPU_Enable+0x3c>)
 8001498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149a:	4a09      	ldr	r2, [pc, #36]	; (80014c0 <HAL_MPU_Enable+0x3c>)
 800149c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80014a2:	f3bf 8f4f 	dsb	sy
}
 80014a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014a8:	f3bf 8f6f 	isb	sy
}
 80014ac:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	e000ed90 	.word	0xe000ed90
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	785a      	ldrb	r2, [r3, #1]
 80014d0:	4b1b      	ldr	r3, [pc, #108]	; (8001540 <HAL_MPU_ConfigRegion+0x7c>)
 80014d2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80014d4:	4b1a      	ldr	r3, [pc, #104]	; (8001540 <HAL_MPU_ConfigRegion+0x7c>)
 80014d6:	691b      	ldr	r3, [r3, #16]
 80014d8:	4a19      	ldr	r2, [pc, #100]	; (8001540 <HAL_MPU_ConfigRegion+0x7c>)
 80014da:	f023 0301 	bic.w	r3, r3, #1
 80014de:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80014e0:	4a17      	ldr	r2, [pc, #92]	; (8001540 <HAL_MPU_ConfigRegion+0x7c>)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	7b1b      	ldrb	r3, [r3, #12]
 80014ec:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	7adb      	ldrb	r3, [r3, #11]
 80014f2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	7a9b      	ldrb	r3, [r3, #10]
 80014fa:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80014fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	7b5b      	ldrb	r3, [r3, #13]
 8001502:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001504:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	7b9b      	ldrb	r3, [r3, #14]
 800150a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800150c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	7bdb      	ldrb	r3, [r3, #15]
 8001512:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001514:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	7a5b      	ldrb	r3, [r3, #9]
 800151a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800151c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	7a1b      	ldrb	r3, [r3, #8]
 8001522:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001524:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	7812      	ldrb	r2, [r2, #0]
 800152a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800152c:	4a04      	ldr	r2, [pc, #16]	; (8001540 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800152e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001530:	6113      	str	r3, [r2, #16]
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000ed90 	.word	0xe000ed90

08001544 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d101      	bne.n	8001556 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e086      	b.n	8001664 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800155c:	2b00      	cmp	r3, #0
 800155e:	d106      	bne.n	800156e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2223      	movs	r2, #35	; 0x23
 8001564:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f003 f897 	bl	800469c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156e:	4b3f      	ldr	r3, [pc, #252]	; (800166c <HAL_ETH_Init+0x128>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	4a3e      	ldr	r2, [pc, #248]	; (800166c <HAL_ETH_Init+0x128>)
 8001574:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001578:	6453      	str	r3, [r2, #68]	; 0x44
 800157a:	4b3c      	ldr	r3, [pc, #240]	; (800166c <HAL_ETH_Init+0x128>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001586:	4b3a      	ldr	r3, [pc, #232]	; (8001670 <HAL_ETH_Init+0x12c>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	4a39      	ldr	r2, [pc, #228]	; (8001670 <HAL_ETH_Init+0x12c>)
 800158c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001590:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001592:	4b37      	ldr	r3, [pc, #220]	; (8001670 <HAL_ETH_Init+0x12c>)
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	4935      	ldr	r1, [pc, #212]	; (8001670 <HAL_ETH_Init+0x12c>)
 800159c:	4313      	orrs	r3, r2
 800159e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80015a0:	4b33      	ldr	r3, [pc, #204]	; (8001670 <HAL_ETH_Init+0x12c>)
 80015a2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	6812      	ldr	r2, [r2, #0]
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015bc:	f7ff fe08 	bl	80011d0 <HAL_GetTick>
 80015c0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80015c2:	e011      	b.n	80015e8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80015c4:	f7ff fe04 	bl	80011d0 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80015d2:	d909      	bls.n	80015e8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2204      	movs	r2, #4
 80015d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	22e0      	movs	r2, #224	; 0xe0
 80015e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e03d      	b.n	8001664 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1e4      	bne.n	80015c4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f000 fefc 	bl	80023f8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f000 ffa7 	bl	8002554 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f000 fffd 	bl	8002606 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	461a      	mov	r2, r3
 8001612:	2100      	movs	r1, #0
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f000 ff65 	bl	80024e4 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8001628:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <HAL_ETH_Init+0x130>)
 8001638:	430b      	orrs	r3, r1
 800163a:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 800164e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2210      	movs	r2, #16
 800165e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001662:	2300      	movs	r3, #0
}
 8001664:	4618      	mov	r0, r3
 8001666:	3710      	adds	r7, #16
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40023800 	.word	0x40023800
 8001670:	40013800 	.word	0x40013800
 8001674:	00020060 	.word	0x00020060

08001678 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001686:	2b10      	cmp	r3, #16
 8001688:	d150      	bne.n	800172c <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2223      	movs	r2, #35	; 0x23
 800168e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2204      	movs	r2, #4
 8001696:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f000 f9f9 	bl	8001a90 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f042 0208 	orr.w	r2, r2, #8
 80016ac:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80016b6:	2001      	movs	r0, #1
 80016b8:	f7ff fd96 	bl	80011e8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	68fa      	ldr	r2, [r7, #12]
 80016c2:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f042 0204 	orr.w	r2, r2, #4
 80016d2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80016dc:	2001      	movs	r0, #1
 80016de:	f7ff fd83 	bl	80011e8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f000 fd20 	bl	8002130 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	6812      	ldr	r2, [r2, #0]
 80016fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001702:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001706:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	6812      	ldr	r2, [r2, #0]
 8001716:	f043 0302 	orr.w	r3, r3, #2
 800171a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800171e:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2223      	movs	r2, #35	; 0x23
 8001724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001728:	2300      	movs	r3, #0
 800172a:	e000      	b.n	800172e <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
  }
}
 800172e:	4618      	mov	r0, r3
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b084      	sub	sp, #16
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001744:	2b23      	cmp	r3, #35	; 0x23
 8001746:	d14a      	bne.n	80017de <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2223      	movs	r2, #35	; 0x23
 800174c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	6812      	ldr	r2, [r2, #0]
 800175e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001762:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001766:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	6812      	ldr	r2, [r2, #0]
 8001776:	f023 0302 	bic.w	r3, r3, #2
 800177a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800177e:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 0204 	bic.w	r2, r2, #4
 800178e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001798:	2001      	movs	r0, #1
 800179a:	f7ff fd25 	bl	80011e8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f000 fcc2 	bl	8002130 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f022 0208 	bic.w	r2, r2, #8
 80017ba:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80017c4:	2001      	movs	r0, #1
 80017c6:	f7ff fd0f 	bl	80011e8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2210      	movs	r2, #16
 80017d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80017da:	2300      	movs	r3, #0
 80017dc:	e000      	b.n	80017e0 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
  }
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d109      	bne.n	800180e <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001800:	f043 0201 	orr.w	r2, r3, #1
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e07c      	b.n	8001908 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001814:	2b23      	cmp	r3, #35	; 0x23
 8001816:	d176      	bne.n	8001906 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001818:	2200      	movs	r2, #0
 800181a:	68b9      	ldr	r1, [r7, #8]
 800181c:	68f8      	ldr	r0, [r7, #12]
 800181e:	f000 ff61 	bl	80026e4 <ETH_Prepare_Tx_Descriptors>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d009      	beq.n	800183c <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800182e:	f043 0202 	orr.w	r2, r3, #2
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e065      	b.n	8001908 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 800183c:	f3bf 8f4f 	dsb	sy
}
 8001840:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	3206      	adds	r2, #6
 800184a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800184e:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001854:	1c5a      	adds	r2, r3, #1
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	629a      	str	r2, [r3, #40]	; 0x28
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185e:	2b03      	cmp	r3, #3
 8001860:	d904      	bls.n	800186c <HAL_ETH_Transmit+0x84>
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001866:	1f1a      	subs	r2, r3, #4
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	3106      	adds	r1, #6
 8001878:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800187c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001880:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8001882:	f7ff fca5 	bl	80011d0 <HAL_GetTick>
 8001886:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001888:	e037      	b.n	80018fa <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001892:	695b      	ldr	r3, [r3, #20]
 8001894:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d011      	beq.n	80018c0 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018a2:	f043 0208 	orr.w	r2, r3, #8
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018b4:	695a      	ldr	r2, [r3, #20]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e023      	b.n	8001908 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018c6:	d018      	beq.n	80018fa <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80018c8:	f7ff fc82 	bl	80011d0 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d302      	bcc.n	80018de <HAL_ETH_Transmit+0xf6>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10d      	bne.n	80018fa <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018e4:	f043 0204 	orr.w	r2, r3, #4
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80018f4:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e006      	b.n	8001908 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	dbc3      	blt.n	800188a <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001902:	2300      	movs	r3, #0
 8001904:	e000      	b.n	8001908 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
  }
}
 8001908:	4618      	mov	r0, r3
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800191e:	2300      	movs	r3, #0
 8001920:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d109      	bne.n	800193c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800192e:	f043 0201 	orr.w	r2, r3, #1
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e0a4      	b.n	8001a86 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001942:	2b23      	cmp	r3, #35	; 0x23
 8001944:	d001      	beq.n	800194a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e09d      	b.n	8001a86 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800194e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	69fa      	ldr	r2, [r7, #28]
 8001954:	3212      	adds	r2, #18
 8001956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800195a:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001960:	f1c3 0304 	rsb	r3, r3, #4
 8001964:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001966:	e066      	b.n	8001a36 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001970:	2b00      	cmp	r3, #0
 8001972:	d007      	beq.n	8001984 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	69da      	ldr	r2, [r3, #28]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	699a      	ldr	r2, [r3, #24]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800198c:	2b00      	cmp	r3, #0
 800198e:	d103      	bne.n	8001998 <HAL_ETH_ReadData+0x88>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001994:	2b00      	cmp	r3, #0
 8001996:	d03c      	beq.n	8001a12 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d005      	beq.n	80019b0 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	0c1b      	lsrs	r3, r3, #16
 80019b6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80019ba:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d005      	beq.n	80019d4 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80019d0:	2301      	movs	r3, #1
 80019d2:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80019ec:	461a      	mov	r2, r3
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	f003 f81d 	bl	8004a30 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019fa:	1c5a      	adds	r2, r3, #1
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	441a      	add	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3301      	adds	r3, #1
 8001a16:	61fb      	str	r3, [r7, #28]
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	2b03      	cmp	r3, #3
 8001a1c:	d902      	bls.n	8001a24 <HAL_ETH_ReadData+0x114>
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3b04      	subs	r3, #4
 8001a22:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	69fa      	ldr	r2, [r7, #28]
 8001a28:	3212      	adds	r2, #18
 8001a2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a2e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	3301      	adds	r3, #1
 8001a34:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	db06      	blt.n	8001a4c <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d202      	bcs.n	8001a4c <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8001a46:	7cfb      	ldrb	r3, [r7, #19]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d08d      	beq.n	8001968 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	441a      	add	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d002      	beq.n	8001a66 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f000 f815 	bl	8001a90 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69fa      	ldr	r2, [r7, #28]
 8001a6a:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001a6c:	7cfb      	ldrb	r3, [r7, #19]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d108      	bne.n	8001a84 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001a80:	2300      	movs	r3, #0
 8001a82:	e000      	b.n	8001a86 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3720      	adds	r7, #32
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
	...

08001a90 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b088      	sub	sp, #32
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001aa4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69fa      	ldr	r2, [r7, #28]
 8001aaa:	3212      	adds	r2, #18
 8001aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab0:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ab6:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001ab8:	e042      	b.n	8001b40 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	6a1b      	ldr	r3, [r3, #32]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d112      	bne.n	8001ae8 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001ac2:	f107 0308 	add.w	r3, r7, #8
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f002 ff82 	bl	80049d0 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d102      	bne.n	8001ad8 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	74fb      	strb	r3, [r7, #19]
 8001ad6:	e007      	b.n	8001ae8 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	461a      	mov	r2, r3
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001ae8:	7cfb      	ldrb	r3, [r7, #19]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d028      	beq.n	8001b40 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d106      	bne.n	8001b04 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	695a      	ldr	r2, [r3, #20]
 8001afa:	4b26      	ldr	r3, [pc, #152]	; (8001b94 <ETH_UpdateDescriptor+0x104>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	6053      	str	r3, [r2, #4]
 8001b02:	e005      	b.n	8001b10 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	695b      	ldr	r3, [r3, #20]
 8001b08:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	61fb      	str	r3, [r7, #28]
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	2b03      	cmp	r3, #3
 8001b26:	d902      	bls.n	8001b2e <ETH_UpdateDescriptor+0x9e>
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	3b04      	subs	r3, #4
 8001b2c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	69fa      	ldr	r2, [r7, #28]
 8001b32:	3212      	adds	r2, #18
 8001b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b38:	617b      	str	r3, [r7, #20]
      desccount--;
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d002      	beq.n	8001b4c <ETH_UpdateDescriptor+0xbc>
 8001b46:	7cfb      	ldrb	r3, [r7, #19]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1b6      	bne.n	8001aba <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d01a      	beq.n	8001b8c <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	f003 0303 	and.w	r3, r3, #3
 8001b5e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8001b60:	f3bf 8f5f 	dmb	sy
}
 8001b64:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6919      	ldr	r1, [r3, #16]
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4413      	add	r3, r2
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	18ca      	adds	r2, r1, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b7e:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	69fa      	ldr	r2, [r7, #28]
 8001b84:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001b8c:	bf00      	nop
 8001b8e:	3720      	adds	r7, #32
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	80004000 	.word	0x80004000

08001b98 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba6:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8001bc0:	4b4b      	ldr	r3, [pc, #300]	; (8001cf0 <HAL_ETH_IRQHandler+0x158>)
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00e      	beq.n	8001bee <HAL_ETH_IRQHandler+0x56>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d009      	beq.n	8001bee <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001be2:	461a      	mov	r2, r3
 8001be4:	4b43      	ldr	r3, [pc, #268]	; (8001cf4 <HAL_ETH_IRQHandler+0x15c>)
 8001be6:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 f891 	bl	8001d10 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00f      	beq.n	8001c18 <HAL_ETH_IRQHandler+0x80>
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d00a      	beq.n	8001c18 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001c10:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f872 	bl	8001cfc <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d042      	beq.n	8001ca8 <HAL_ETH_IRQHandler+0x110>
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d03d      	beq.n	8001ca8 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c32:	f043 0208 	orr.w	r2, r3, #8
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d01a      	beq.n	8001c7c <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c4e:	695a      	ldr	r2, [r3, #20]
 8001c50:	4b29      	ldr	r3, [pc, #164]	; (8001cf8 <HAL_ETH_IRQHandler+0x160>)
 8001c52:	4013      	ands	r3, r2
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c62:	69db      	ldr	r3, [r3, #28]
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6812      	ldr	r2, [r2, #0]
 8001c68:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8001c6c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c70:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	22e0      	movs	r2, #224	; 0xe0
 8001c76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001c7a:	e012      	b.n	8001ca2 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c84:	695a      	ldr	r2, [r3, #20]
 8001c86:	f248 6380 	movw	r3, #34432	; 0x8680
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	f248 6380 	movw	r3, #34432	; 0x8680
 8001ca0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 f83e 	bl	8001d24 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d00e      	beq.n	8001cd0 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f838 	bl	8001d38 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d006      	beq.n	8001ce8 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001cda:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <HAL_ETH_IRQHandler+0x158>)
 8001cdc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001ce0:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f832 	bl	8001d4c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001ce8:	bf00      	nop
 8001cea:	3718      	adds	r7, #24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40013c00 	.word	0x40013c00
 8001cf4:	00010040 	.word	0x00010040
 8001cf8:	007e2000 	.word	0x007e2000

08001cfc <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
 8001d6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	f003 031c 	and.w	r3, r3, #28
 8001d7c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	02db      	lsls	r3, r3, #11
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	019b      	lsls	r3, r3, #6
 8001d8e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	f023 0302 	bic.w	r3, r3, #2
 8001d9e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001db0:	f7ff fa0e 	bl	80011d0 <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001db6:	e00d      	b.n	8001dd4 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001db8:	f7ff fa0a 	bl	80011d0 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dc6:	d301      	bcc.n	8001dcc <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e010      	b.n	8001dee <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1ec      	bne.n	8001db8 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	461a      	mov	r2, r3
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3718      	adds	r7, #24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b086      	sub	sp, #24
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	60f8      	str	r0, [r7, #12]
 8001dfe:	60b9      	str	r1, [r7, #8]
 8001e00:	607a      	str	r2, [r7, #4]
 8001e02:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	f003 031c 	and.w	r3, r3, #28
 8001e12:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	02db      	lsls	r3, r3, #11
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	697a      	ldr	r2, [r7, #20]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	019b      	lsls	r3, r3, #6
 8001e24:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001e28:	697a      	ldr	r2, [r7, #20]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	f043 0302 	orr.w	r3, r3, #2
 8001e34:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e50:	f7ff f9be 	bl	80011d0 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e56:	e00d      	b.n	8001e74 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001e58:	f7ff f9ba 	bl	80011d0 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e66:	d301      	bcc.n	8001e6c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e009      	b.n	8001e80 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1ec      	bne.n	8001e58 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3718      	adds	r7, #24
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e0e6      	b.n	800206a <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0310 	and.w	r3, r3, #16
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	bf14      	ite	ne
 8001eaa:	2301      	movne	r3, #1
 8001eac:	2300      	moveq	r3, #0
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	bf0c      	ite	eq
 8001ed4:	2301      	moveq	r3, #1
 8001ed6:	2300      	movne	r3, #0
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	461a      	mov	r2, r3
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	bf14      	ite	ne
 8001ef0:	2301      	movne	r3, #1
 8001ef2:	2300      	moveq	r3, #0
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	bf0c      	ite	eq
 8001f0a:	2301      	moveq	r3, #1
 8001f0c:	2300      	movne	r3, #0
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	461a      	mov	r2, r3
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	bf14      	ite	ne
 8001f24:	2301      	movne	r3, #1
 8001f26:	2300      	moveq	r3, #0
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	bf0c      	ite	eq
 8001f5a:	2301      	moveq	r3, #1
 8001f5c:	2300      	movne	r3, #0
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	461a      	mov	r2, r3
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	bf0c      	ite	eq
 8001f74:	2301      	moveq	r3, #1
 8001f76:	2300      	movne	r3, #0
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	bf14      	ite	ne
 8001f8e:	2301      	movne	r3, #1
 8001f90:	2300      	moveq	r3, #0
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	461a      	mov	r2, r3
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	bf14      	ite	ne
 8001fb6:	2301      	movne	r3, #1
 8001fb8:	2300      	moveq	r3, #0
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	bf14      	ite	ne
 8001fd0:	2301      	movne	r3, #1
 8001fd2:	2300      	moveq	r3, #0
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	bf14      	ite	ne
 8001fea:	2301      	movne	r3, #1
 8001fec:	2300      	moveq	r3, #0
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002002:	2b00      	cmp	r3, #0
 8002004:	bf0c      	ite	eq
 8002006:	2301      	moveq	r3, #1
 8002008:	2300      	movne	r3, #0
 800200a:	b2db      	uxtb	r3, r3
 800200c:	461a      	mov	r2, r3
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	f003 0230 	and.w	r2, r3, #48	; 0x30
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	0c1b      	lsrs	r3, r3, #16
 800202a:	b29a      	uxth	r2, r3
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	f003 0304 	and.w	r3, r3, #4
 800203a:	2b00      	cmp	r3, #0
 800203c:	bf14      	ite	ne
 800203e:	2301      	movne	r3, #1
 8002040:	2300      	moveq	r3, #0
 8002042:	b2db      	uxtb	r3, r3
 8002044:	461a      	mov	r2, r3
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002056:	2b00      	cmp	r3, #0
 8002058:	bf14      	ite	ne
 800205a:	2301      	movne	r3, #1
 800205c:	2300      	moveq	r3, #0
 800205e:	b2db      	uxtb	r3, r3
 8002060:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
 800207e:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e00b      	b.n	80020a2 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002090:	2b10      	cmp	r3, #16
 8002092:	d105      	bne.n	80020a0 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002094:	6839      	ldr	r1, [r7, #0]
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f870 	bl	800217c <ETH_SetMACConfig>

    return HAL_OK;
 800209c:	2300      	movs	r3, #0
 800209e:	e000      	b.n	80020a2 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
  }
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
	...

080020ac <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f023 031c 	bic.w	r3, r3, #28
 80020c2:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80020c4:	f001 fb22 	bl	800370c <HAL_RCC_GetHCLKFreq>
 80020c8:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	4a14      	ldr	r2, [pc, #80]	; (8002120 <HAL_ETH_SetMDIOClockRange+0x74>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d804      	bhi.n	80020dc <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f043 0308 	orr.w	r3, r3, #8
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	e019      	b.n	8002110 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	4a11      	ldr	r2, [pc, #68]	; (8002124 <HAL_ETH_SetMDIOClockRange+0x78>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d204      	bcs.n	80020ee <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f043 030c 	orr.w	r3, r3, #12
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	e010      	b.n	8002110 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	4a0d      	ldr	r2, [pc, #52]	; (8002128 <HAL_ETH_SetMDIOClockRange+0x7c>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d90c      	bls.n	8002110 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	4a0c      	ldr	r2, [pc, #48]	; (800212c <HAL_ETH_SetMDIOClockRange+0x80>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d804      	bhi.n	8002108 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f043 0304 	orr.w	r3, r3, #4
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	e003      	b.n	8002110 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f043 0310 	orr.w	r3, r3, #16
 800210e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	611a      	str	r2, [r3, #16]
}
 8002118:	bf00      	nop
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	02160ebf 	.word	0x02160ebf
 8002124:	03938700 	.word	0x03938700
 8002128:	05f5e0ff 	.word	0x05f5e0ff
 800212c:	08f0d17f 	.word	0x08f0d17f

08002130 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002138:	2300      	movs	r3, #0
 800213a:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6812      	ldr	r2, [r2, #0]
 800214a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800214e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002152:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002160:	2001      	movs	r0, #1
 8002162:	f7ff f841 	bl	80011e8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002170:	6193      	str	r3, [r2, #24]
}
 8002172:	bf00      	nop
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
	...

0800217c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	4b53      	ldr	r3, [pc, #332]	; (80022e0 <ETH_SetMACConfig+0x164>)
 8002192:	4013      	ands	r3, r2
 8002194:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	7b9b      	ldrb	r3, [r3, #14]
 800219a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	7c12      	ldrb	r2, [r2, #16]
 80021a0:	2a00      	cmp	r2, #0
 80021a2:	d102      	bne.n	80021aa <ETH_SetMACConfig+0x2e>
 80021a4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80021a8:	e000      	b.n	80021ac <ETH_SetMACConfig+0x30>
 80021aa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80021ac:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	7c52      	ldrb	r2, [r2, #17]
 80021b2:	2a00      	cmp	r2, #0
 80021b4:	d102      	bne.n	80021bc <ETH_SetMACConfig+0x40>
 80021b6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80021ba:	e000      	b.n	80021be <ETH_SetMACConfig+0x42>
 80021bc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80021be:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80021c4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	7fdb      	ldrb	r3, [r3, #31]
 80021ca:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80021cc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80021d2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	7f92      	ldrb	r2, [r2, #30]
 80021d8:	2a00      	cmp	r2, #0
 80021da:	d102      	bne.n	80021e2 <ETH_SetMACConfig+0x66>
 80021dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021e0:	e000      	b.n	80021e4 <ETH_SetMACConfig+0x68>
 80021e2:	2200      	movs	r2, #0
                        macconf->Speed |
 80021e4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	7f1b      	ldrb	r3, [r3, #28]
 80021ea:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80021ec:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80021f2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	791b      	ldrb	r3, [r3, #4]
 80021f8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80021fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002202:	2a00      	cmp	r2, #0
 8002204:	d102      	bne.n	800220c <ETH_SetMACConfig+0x90>
 8002206:	f44f 7200 	mov.w	r2, #512	; 0x200
 800220a:	e000      	b.n	800220e <ETH_SetMACConfig+0x92>
 800220c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800220e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	7bdb      	ldrb	r3, [r3, #15]
 8002214:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002216:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800221c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002224:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002226:	4313      	orrs	r3, r2
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	4313      	orrs	r3, r2
 800222c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800223e:	2001      	movs	r0, #1
 8002240:	f7fe ffd2 	bl	80011e8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	f64f 7341 	movw	r3, #65345	; 0xff41
 800225a:	4013      	ands	r3, r2
 800225c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002262:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800226a:	2a00      	cmp	r2, #0
 800226c:	d101      	bne.n	8002272 <ETH_SetMACConfig+0xf6>
 800226e:	2280      	movs	r2, #128	; 0x80
 8002270:	e000      	b.n	8002274 <ETH_SetMACConfig+0xf8>
 8002272:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002274:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800227a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002282:	2a01      	cmp	r2, #1
 8002284:	d101      	bne.n	800228a <ETH_SetMACConfig+0x10e>
 8002286:	2208      	movs	r2, #8
 8002288:	e000      	b.n	800228c <ETH_SetMACConfig+0x110>
 800228a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800228c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002294:	2a01      	cmp	r2, #1
 8002296:	d101      	bne.n	800229c <ETH_SetMACConfig+0x120>
 8002298:	2204      	movs	r2, #4
 800229a:	e000      	b.n	800229e <ETH_SetMACConfig+0x122>
 800229c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800229e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80022a6:	2a01      	cmp	r2, #1
 80022a8:	d101      	bne.n	80022ae <ETH_SetMACConfig+0x132>
 80022aa:	2202      	movs	r2, #2
 80022ac:	e000      	b.n	80022b0 <ETH_SetMACConfig+0x134>
 80022ae:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80022b0:	4313      	orrs	r3, r2
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022c8:	2001      	movs	r0, #1
 80022ca:	f7fe ff8d 	bl	80011e8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	619a      	str	r2, [r3, #24]
}
 80022d6:	bf00      	nop
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	fd20810f 	.word	0xfd20810f

080022e4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	4b3d      	ldr	r3, [pc, #244]	; (80023f4 <ETH_SetDMAConfig+0x110>)
 80022fe:	4013      	ands	r3, r2
 8002300:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	7b1b      	ldrb	r3, [r3, #12]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d102      	bne.n	8002310 <ETH_SetDMAConfig+0x2c>
 800230a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800230e:	e000      	b.n	8002312 <ETH_SetDMAConfig+0x2e>
 8002310:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	7b5b      	ldrb	r3, [r3, #13]
 8002316:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002318:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	7f52      	ldrb	r2, [r2, #29]
 800231e:	2a00      	cmp	r2, #0
 8002320:	d102      	bne.n	8002328 <ETH_SetDMAConfig+0x44>
 8002322:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002326:	e000      	b.n	800232a <ETH_SetDMAConfig+0x46>
 8002328:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800232a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	7b9b      	ldrb	r3, [r3, #14]
 8002330:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002332:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002338:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	7f1b      	ldrb	r3, [r3, #28]
 800233e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002340:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	7f9b      	ldrb	r3, [r3, #30]
 8002346:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002348:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800234e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002356:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002358:	4313      	orrs	r3, r2
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	4313      	orrs	r3, r2
 800235e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002368:	461a      	mov	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800237a:	2001      	movs	r0, #1
 800237c:	f7fe ff34 	bl	80011e8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002388:	461a      	mov	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	791b      	ldrb	r3, [r3, #4]
 8002392:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002398:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800239e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80023a4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80023ac:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80023ae:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80023b6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80023bc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6812      	ldr	r2, [r2, #0]
 80023c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023ca:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023d8:	2001      	movs	r0, #1
 80023da:	f7fe ff05 	bl	80011e8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023e6:	461a      	mov	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6013      	str	r3, [r2, #0]
}
 80023ec:	bf00      	nop
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	f8de3f23 	.word	0xf8de3f23

080023f8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b0a6      	sub	sp, #152	; 0x98
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002400:	2301      	movs	r3, #1
 8002402:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002406:	2301      	movs	r3, #1
 8002408:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800240c:	2300      	movs	r3, #0
 800240e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002410:	2300      	movs	r3, #0
 8002412:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002416:	2301      	movs	r3, #1
 8002418:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800241c:	2300      	movs	r3, #0
 800241e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002422:	2301      	movs	r3, #1
 8002424:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002428:	2301      	movs	r3, #1
 800242a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800242e:	2300      	movs	r3, #0
 8002430:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002434:	2300      	movs	r3, #0
 8002436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800243a:	2300      	movs	r3, #0
 800243c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800243e:	2300      	movs	r3, #0
 8002440:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002444:	2300      	movs	r3, #0
 8002446:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002448:	2300      	movs	r3, #0
 800244a:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800244e:	2300      	movs	r3, #0
 8002450:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002454:	2300      	movs	r3, #0
 8002456:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800245a:	2300      	movs	r3, #0
 800245c:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002460:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002464:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002466:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800246a:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800246c:	2300      	movs	r3, #0
 800246e:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002472:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002476:	4619      	mov	r1, r3
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f7ff fe7f 	bl	800217c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800247e:	2301      	movs	r3, #1
 8002480:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002482:	2301      	movs	r3, #1
 8002484:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002486:	2301      	movs	r3, #1
 8002488:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800248c:	2301      	movs	r3, #1
 800248e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002490:	2300      	movs	r3, #0
 8002492:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002494:	2300      	movs	r3, #0
 8002496:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800249a:	2300      	movs	r3, #0
 800249c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80024a0:	2300      	movs	r3, #0
 80024a2:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80024a4:	2301      	movs	r3, #1
 80024a6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80024aa:	2301      	movs	r3, #1
 80024ac:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80024ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024b2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80024b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024b8:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80024ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024be:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80024c0:	2301      	movs	r3, #1
 80024c2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80024ca:	2300      	movs	r3, #0
 80024cc:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80024ce:	f107 0308 	add.w	r3, r7, #8
 80024d2:	4619      	mov	r1, r3
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7ff ff05 	bl	80022e4 <ETH_SetDMAConfig>
}
 80024da:	bf00      	nop
 80024dc:	3798      	adds	r7, #152	; 0x98
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
	...

080024e4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b087      	sub	sp, #28
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3305      	adds	r3, #5
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	021b      	lsls	r3, r3, #8
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	3204      	adds	r2, #4
 80024fc:	7812      	ldrb	r2, [r2, #0]
 80024fe:	4313      	orrs	r3, r2
 8002500:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	4b11      	ldr	r3, [pc, #68]	; (800254c <ETH_MACAddressConfig+0x68>)
 8002506:	4413      	add	r3, r2
 8002508:	461a      	mov	r2, r3
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	3303      	adds	r3, #3
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	061a      	lsls	r2, r3, #24
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3302      	adds	r3, #2
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	041b      	lsls	r3, r3, #16
 800251e:	431a      	orrs	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3301      	adds	r3, #1
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	021b      	lsls	r3, r3, #8
 8002528:	4313      	orrs	r3, r2
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	7812      	ldrb	r2, [r2, #0]
 800252e:	4313      	orrs	r3, r2
 8002530:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002532:	68ba      	ldr	r2, [r7, #8]
 8002534:	4b06      	ldr	r3, [pc, #24]	; (8002550 <ETH_MACAddressConfig+0x6c>)
 8002536:	4413      	add	r3, r2
 8002538:	461a      	mov	r2, r3
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	6013      	str	r3, [r2, #0]
}
 800253e:	bf00      	nop
 8002540:	371c      	adds	r7, #28
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	40028040 	.word	0x40028040
 8002550:	40028044 	.word	0x40028044

08002554 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800255c:	2300      	movs	r3, #0
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	e03e      	b.n	80025e0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68d9      	ldr	r1, [r3, #12]
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	4613      	mov	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	440b      	add	r3, r1
 8002572:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	2200      	movs	r2, #0
 8002578:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	2200      	movs	r2, #0
 800257e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	2200      	movs	r2, #0
 8002584:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	2200      	movs	r2, #0
 800258a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800258c:	68b9      	ldr	r1, [r7, #8]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	3206      	adds	r2, #6
 8002594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d80c      	bhi.n	80025c4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68d9      	ldr	r1, [r3, #12]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	1c5a      	adds	r2, r3, #1
 80025b2:	4613      	mov	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	440b      	add	r3, r1
 80025bc:	461a      	mov	r2, r3
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	60da      	str	r2, [r3, #12]
 80025c2:	e004      	b.n	80025ce <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	461a      	mov	r2, r3
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	3301      	adds	r3, #1
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2b03      	cmp	r3, #3
 80025e4:	d9bd      	bls.n	8002562 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68da      	ldr	r2, [r3, #12]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025f8:	611a      	str	r2, [r3, #16]
}
 80025fa:	bf00      	nop
 80025fc:	3714      	adds	r7, #20
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002606:	b480      	push	{r7}
 8002608:	b085      	sub	sp, #20
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800260e:	2300      	movs	r3, #0
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	e048      	b.n	80026a6 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6919      	ldr	r1, [r3, #16]
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	4613      	mov	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4413      	add	r3, r2
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	440b      	add	r3, r1
 8002624:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2200      	movs	r2, #0
 8002630:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	2200      	movs	r2, #0
 8002636:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	2200      	movs	r2, #0
 800263c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	2200      	movs	r2, #0
 8002642:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	2200      	movs	r2, #0
 8002648:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002650:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800266a:	68b9      	ldr	r1, [r7, #8]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	3212      	adds	r2, #18
 8002672:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2b02      	cmp	r3, #2
 800267a:	d80c      	bhi.n	8002696 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6919      	ldr	r1, [r3, #16]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	1c5a      	adds	r2, r3, #1
 8002684:	4613      	mov	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4413      	add	r3, r2
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	440b      	add	r3, r1
 800268e:	461a      	mov	r2, r3
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	60da      	str	r2, [r3, #12]
 8002694:	e004      	b.n	80026a0 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	461a      	mov	r2, r3
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	3301      	adds	r3, #1
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2b03      	cmp	r3, #3
 80026aa:	d9b3      	bls.n	8002614 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691a      	ldr	r2, [r3, #16]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026d6:	60da      	str	r2, [r3, #12]
}
 80026d8:	bf00      	nop
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b091      	sub	sp, #68	; 0x44
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	3318      	adds	r3, #24
 80026f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002702:	2300      	movs	r3, #0
 8002704:	637b      	str	r3, [r7, #52]	; 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002708:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800270a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800270e:	633b      	str	r3, [r7, #48]	; 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t           bd_count = 0;
 8002716:	2300      	movs	r3, #0
 8002718:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800271a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002722:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002726:	d007      	beq.n	8002738 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800272a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800272c:	3304      	adds	r3, #4
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002738:	2302      	movs	r3, #2
 800273a:	e111      	b.n	8002960 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 800273c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800273e:	3301      	adds	r3, #1
 8002740:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	461a      	mov	r2, r3
 8002748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800274a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800274c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	4b86      	ldr	r3, [pc, #536]	; (800296c <ETH_Prepare_Tx_Descriptors+0x288>)
 8002752:	4013      	ands	r3, r2
 8002754:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002756:	6852      	ldr	r2, [r2, #4]
 8002758:	431a      	orrs	r2, r3
 800275a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800275c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b00      	cmp	r3, #0
 8002768:	d008      	beq.n	800277c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800276a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	431a      	orrs	r2, r3
 8002778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0320 	and.w	r3, r3, #32
 8002784:	2b00      	cmp	r3, #0
 8002786:	d008      	beq.n	800279a <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	431a      	orrs	r2, r3
 8002796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002798:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0304 	and.w	r3, r3, #4
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d005      	beq.n	80027b2 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80027a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80027ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80027b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80027ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027bc:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80027be:	e082      	b.n	80028c6 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80027c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80027c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ca:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d006      	beq.n	80027e0 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80027d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80027da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	e005      	b.n	80027ec <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80027e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80027e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ea:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80027ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027ee:	3301      	adds	r3, #1
 80027f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027f4:	2b03      	cmp	r3, #3
 80027f6:	d902      	bls.n	80027fe <ETH_Prepare_Tx_Descriptors+0x11a>
 80027f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027fa:	3b04      	subs	r3, #4
 80027fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002806:	633b      	str	r3, [r7, #48]	; 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002810:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002814:	d007      	beq.n	8002826 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800281a:	3304      	adds	r3, #4
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4413      	add	r3, r2
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d029      	beq.n	800287a <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8002826:	6a3b      	ldr	r3, [r7, #32]
 8002828:	63fb      	str	r3, [r7, #60]	; 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800282e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002832:	633b      	str	r3, [r7, #48]	; 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002834:	2300      	movs	r3, #0
 8002836:	63bb      	str	r3, [r7, #56]	; 0x38
 8002838:	e019      	b.n	800286e <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 800283a:	f3bf 8f5f 	dmb	sy
}
 800283e:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284a:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800284c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800284e:	3301      	adds	r3, #1
 8002850:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002854:	2b03      	cmp	r3, #3
 8002856:	d902      	bls.n	800285e <ETH_Prepare_Tx_Descriptors+0x17a>
 8002858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800285a:	3b04      	subs	r3, #4
 800285c:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002866:	633b      	str	r3, [r7, #48]	; 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800286a:	3301      	adds	r3, #1
 800286c:	63bb      	str	r3, [r7, #56]	; 0x38
 800286e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002872:	429a      	cmp	r2, r3
 8002874:	d3e1      	bcc.n	800283a <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8002876:	2302      	movs	r3, #2
 8002878:	e072      	b.n	8002960 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800287a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002884:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8002886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002888:	3301      	adds	r3, #1
 800288a:	637b      	str	r3, [r7, #52]	; 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800288c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	461a      	mov	r2, r3
 8002898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289a:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800289c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	4b32      	ldr	r3, [pc, #200]	; (800296c <ETH_Prepare_Tx_Descriptors+0x288>)
 80028a2:	4013      	ands	r3, r2
 80028a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028a6:	6852      	ldr	r2, [r2, #4]
 80028a8:	431a      	orrs	r2, r3
 80028aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ac:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80028ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b0:	3301      	adds	r3, #1
 80028b2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80028b4:	f3bf 8f5f 	dmb	sy
}
 80028b8:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80028ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80028c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c4:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80028c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f47f af78 	bne.w	80027c0 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d006      	beq.n	80028e4 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80028d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80028de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e0:	601a      	str	r2, [r3, #0]
 80028e2:	e005      	b.n	80028f0 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80028e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80028ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ee:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80028f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80028f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fa:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	6a3a      	ldr	r2, [r7, #32]
 8002900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002904:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8002906:	f3bf 8f5f 	dmb	sy
}
 800290a:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800290c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002916:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800291c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800291e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002920:	3304      	adds	r3, #4
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	440b      	add	r3, r1
 8002926:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800292c:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800292e:	f3ef 8310 	mrs	r3, PRIMASK
 8002932:	613b      	str	r3, [r7, #16]
  return(result);
 8002934:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8002936:	61fb      	str	r3, [r7, #28]
 8002938:	2301      	movs	r3, #1
 800293a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	f383 8810 	msr	PRIMASK, r3
}
 8002942:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002946:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294a:	4413      	add	r3, r2
 800294c:	1c5a      	adds	r2, r3, #1
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	629a      	str	r2, [r3, #40]	; 0x28
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	f383 8810 	msr	PRIMASK, r3
}
 800295c:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3744      	adds	r7, #68	; 0x44
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	ffffe000 	.word	0xffffe000

08002970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002970:	b480      	push	{r7}
 8002972:	b089      	sub	sp, #36	; 0x24
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800297a:	2300      	movs	r3, #0
 800297c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800297e:	2300      	movs	r3, #0
 8002980:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002982:	2300      	movs	r3, #0
 8002984:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002986:	2300      	movs	r3, #0
 8002988:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800298a:	2300      	movs	r3, #0
 800298c:	61fb      	str	r3, [r7, #28]
 800298e:	e175      	b.n	8002c7c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002990:	2201      	movs	r2, #1
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	4013      	ands	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	f040 8164 	bne.w	8002c76 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f003 0303 	and.w	r3, r3, #3
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d005      	beq.n	80029c6 <HAL_GPIO_Init+0x56>
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f003 0303 	and.w	r3, r3, #3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d130      	bne.n	8002a28 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	2203      	movs	r2, #3
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	43db      	mvns	r3, r3
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	4013      	ands	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	68da      	ldr	r2, [r3, #12]
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029fc:	2201      	movs	r2, #1
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	091b      	lsrs	r3, r3, #4
 8002a12:	f003 0201 	and.w	r2, r3, #1
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f003 0303 	and.w	r3, r3, #3
 8002a30:	2b03      	cmp	r3, #3
 8002a32:	d017      	beq.n	8002a64 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	2203      	movs	r2, #3
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	43db      	mvns	r3, r3
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 0303 	and.w	r3, r3, #3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d123      	bne.n	8002ab8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	08da      	lsrs	r2, r3, #3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	3208      	adds	r2, #8
 8002a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	f003 0307 	and.w	r3, r3, #7
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	220f      	movs	r2, #15
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4013      	ands	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	691a      	ldr	r2, [r3, #16]
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	f003 0307 	and.w	r3, r3, #7
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	08da      	lsrs	r2, r3, #3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	3208      	adds	r2, #8
 8002ab2:	69b9      	ldr	r1, [r7, #24]
 8002ab4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	2203      	movs	r2, #3
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4013      	ands	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f003 0203 	and.w	r2, r3, #3
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f000 80be 	beq.w	8002c76 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002afa:	4b66      	ldr	r3, [pc, #408]	; (8002c94 <HAL_GPIO_Init+0x324>)
 8002afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afe:	4a65      	ldr	r2, [pc, #404]	; (8002c94 <HAL_GPIO_Init+0x324>)
 8002b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b04:	6453      	str	r3, [r2, #68]	; 0x44
 8002b06:	4b63      	ldr	r3, [pc, #396]	; (8002c94 <HAL_GPIO_Init+0x324>)
 8002b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002b12:	4a61      	ldr	r2, [pc, #388]	; (8002c98 <HAL_GPIO_Init+0x328>)
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	089b      	lsrs	r3, r3, #2
 8002b18:	3302      	adds	r3, #2
 8002b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	220f      	movs	r2, #15
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4013      	ands	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a58      	ldr	r2, [pc, #352]	; (8002c9c <HAL_GPIO_Init+0x32c>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d037      	beq.n	8002bae <HAL_GPIO_Init+0x23e>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a57      	ldr	r2, [pc, #348]	; (8002ca0 <HAL_GPIO_Init+0x330>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d031      	beq.n	8002baa <HAL_GPIO_Init+0x23a>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a56      	ldr	r2, [pc, #344]	; (8002ca4 <HAL_GPIO_Init+0x334>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d02b      	beq.n	8002ba6 <HAL_GPIO_Init+0x236>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a55      	ldr	r2, [pc, #340]	; (8002ca8 <HAL_GPIO_Init+0x338>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d025      	beq.n	8002ba2 <HAL_GPIO_Init+0x232>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a54      	ldr	r2, [pc, #336]	; (8002cac <HAL_GPIO_Init+0x33c>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d01f      	beq.n	8002b9e <HAL_GPIO_Init+0x22e>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a53      	ldr	r2, [pc, #332]	; (8002cb0 <HAL_GPIO_Init+0x340>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d019      	beq.n	8002b9a <HAL_GPIO_Init+0x22a>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a52      	ldr	r2, [pc, #328]	; (8002cb4 <HAL_GPIO_Init+0x344>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d013      	beq.n	8002b96 <HAL_GPIO_Init+0x226>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a51      	ldr	r2, [pc, #324]	; (8002cb8 <HAL_GPIO_Init+0x348>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d00d      	beq.n	8002b92 <HAL_GPIO_Init+0x222>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a50      	ldr	r2, [pc, #320]	; (8002cbc <HAL_GPIO_Init+0x34c>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d007      	beq.n	8002b8e <HAL_GPIO_Init+0x21e>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a4f      	ldr	r2, [pc, #316]	; (8002cc0 <HAL_GPIO_Init+0x350>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d101      	bne.n	8002b8a <HAL_GPIO_Init+0x21a>
 8002b86:	2309      	movs	r3, #9
 8002b88:	e012      	b.n	8002bb0 <HAL_GPIO_Init+0x240>
 8002b8a:	230a      	movs	r3, #10
 8002b8c:	e010      	b.n	8002bb0 <HAL_GPIO_Init+0x240>
 8002b8e:	2308      	movs	r3, #8
 8002b90:	e00e      	b.n	8002bb0 <HAL_GPIO_Init+0x240>
 8002b92:	2307      	movs	r3, #7
 8002b94:	e00c      	b.n	8002bb0 <HAL_GPIO_Init+0x240>
 8002b96:	2306      	movs	r3, #6
 8002b98:	e00a      	b.n	8002bb0 <HAL_GPIO_Init+0x240>
 8002b9a:	2305      	movs	r3, #5
 8002b9c:	e008      	b.n	8002bb0 <HAL_GPIO_Init+0x240>
 8002b9e:	2304      	movs	r3, #4
 8002ba0:	e006      	b.n	8002bb0 <HAL_GPIO_Init+0x240>
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e004      	b.n	8002bb0 <HAL_GPIO_Init+0x240>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	e002      	b.n	8002bb0 <HAL_GPIO_Init+0x240>
 8002baa:	2301      	movs	r3, #1
 8002bac:	e000      	b.n	8002bb0 <HAL_GPIO_Init+0x240>
 8002bae:	2300      	movs	r3, #0
 8002bb0:	69fa      	ldr	r2, [r7, #28]
 8002bb2:	f002 0203 	and.w	r2, r2, #3
 8002bb6:	0092      	lsls	r2, r2, #2
 8002bb8:	4093      	lsls	r3, r2
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002bc0:	4935      	ldr	r1, [pc, #212]	; (8002c98 <HAL_GPIO_Init+0x328>)
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	089b      	lsrs	r3, r3, #2
 8002bc6:	3302      	adds	r3, #2
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bce:	4b3d      	ldr	r3, [pc, #244]	; (8002cc4 <HAL_GPIO_Init+0x354>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bf2:	4a34      	ldr	r2, [pc, #208]	; (8002cc4 <HAL_GPIO_Init+0x354>)
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bf8:	4b32      	ldr	r3, [pc, #200]	; (8002cc4 <HAL_GPIO_Init+0x354>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	43db      	mvns	r3, r3
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4013      	ands	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d003      	beq.n	8002c1c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c1c:	4a29      	ldr	r2, [pc, #164]	; (8002cc4 <HAL_GPIO_Init+0x354>)
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c22:	4b28      	ldr	r3, [pc, #160]	; (8002cc4 <HAL_GPIO_Init+0x354>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c46:	4a1f      	ldr	r2, [pc, #124]	; (8002cc4 <HAL_GPIO_Init+0x354>)
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c4c:	4b1d      	ldr	r3, [pc, #116]	; (8002cc4 <HAL_GPIO_Init+0x354>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	43db      	mvns	r3, r3
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d003      	beq.n	8002c70 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c70:	4a14      	ldr	r2, [pc, #80]	; (8002cc4 <HAL_GPIO_Init+0x354>)
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	61fb      	str	r3, [r7, #28]
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	2b0f      	cmp	r3, #15
 8002c80:	f67f ae86 	bls.w	8002990 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002c84:	bf00      	nop
 8002c86:	bf00      	nop
 8002c88:	3724      	adds	r7, #36	; 0x24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	40023800 	.word	0x40023800
 8002c98:	40013800 	.word	0x40013800
 8002c9c:	40020000 	.word	0x40020000
 8002ca0:	40020400 	.word	0x40020400
 8002ca4:	40020800 	.word	0x40020800
 8002ca8:	40020c00 	.word	0x40020c00
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	40021400 	.word	0x40021400
 8002cb4:	40021800 	.word	0x40021800
 8002cb8:	40021c00 	.word	0x40021c00
 8002cbc:	40022000 	.word	0x40022000
 8002cc0:	40022400 	.word	0x40022400
 8002cc4:	40013c00 	.word	0x40013c00

08002cc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	807b      	strh	r3, [r7, #2]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cd8:	787b      	ldrb	r3, [r7, #1]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cde:	887a      	ldrh	r2, [r7, #2]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002ce4:	e003      	b.n	8002cee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002ce6:	887b      	ldrh	r3, [r7, #2]
 8002ce8:	041a      	lsls	r2, r3, #16
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	619a      	str	r2, [r3, #24]
}
 8002cee:	bf00      	nop
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	b085      	sub	sp, #20
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
 8002d02:	460b      	mov	r3, r1
 8002d04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d0c:	887a      	ldrh	r2, [r7, #2]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	4013      	ands	r3, r2
 8002d12:	041a      	lsls	r2, r3, #16
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	43d9      	mvns	r1, r3
 8002d18:	887b      	ldrh	r3, [r7, #2]
 8002d1a:	400b      	ands	r3, r1
 8002d1c:	431a      	orrs	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	619a      	str	r2, [r3, #24]
}
 8002d22:	bf00      	nop
 8002d24:	3714      	adds	r7, #20
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
	...

08002d30 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002d36:	2300      	movs	r3, #0
 8002d38:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d3a:	4b23      	ldr	r3, [pc, #140]	; (8002dc8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	4a22      	ldr	r2, [pc, #136]	; (8002dc8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d44:	6413      	str	r3, [r2, #64]	; 0x40
 8002d46:	4b20      	ldr	r3, [pc, #128]	; (8002dc8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4e:	603b      	str	r3, [r7, #0]
 8002d50:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002d52:	4b1e      	ldr	r3, [pc, #120]	; (8002dcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a1d      	ldr	r2, [pc, #116]	; (8002dcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d5c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d5e:	f7fe fa37 	bl	80011d0 <HAL_GetTick>
 8002d62:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002d64:	e009      	b.n	8002d7a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d66:	f7fe fa33 	bl	80011d0 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d74:	d901      	bls.n	8002d7a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e022      	b.n	8002dc0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002d7a:	4b14      	ldr	r3, [pc, #80]	; (8002dcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d86:	d1ee      	bne.n	8002d66 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002d88:	4b10      	ldr	r3, [pc, #64]	; (8002dcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a0f      	ldr	r2, [pc, #60]	; (8002dcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d92:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d94:	f7fe fa1c 	bl	80011d0 <HAL_GetTick>
 8002d98:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d9a:	e009      	b.n	8002db0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d9c:	f7fe fa18 	bl	80011d0 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002daa:	d901      	bls.n	8002db0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e007      	b.n	8002dc0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002db0:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002dbc:	d1ee      	bne.n	8002d9c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	40007000 	.word	0x40007000

08002dd0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e29b      	b.n	800331e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 8087 	beq.w	8002f02 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002df4:	4b96      	ldr	r3, [pc, #600]	; (8003050 <HAL_RCC_OscConfig+0x280>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f003 030c 	and.w	r3, r3, #12
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d00c      	beq.n	8002e1a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e00:	4b93      	ldr	r3, [pc, #588]	; (8003050 <HAL_RCC_OscConfig+0x280>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f003 030c 	and.w	r3, r3, #12
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	d112      	bne.n	8002e32 <HAL_RCC_OscConfig+0x62>
 8002e0c:	4b90      	ldr	r3, [pc, #576]	; (8003050 <HAL_RCC_OscConfig+0x280>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e18:	d10b      	bne.n	8002e32 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e1a:	4b8d      	ldr	r3, [pc, #564]	; (8003050 <HAL_RCC_OscConfig+0x280>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d06c      	beq.n	8002f00 <HAL_RCC_OscConfig+0x130>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d168      	bne.n	8002f00 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e275      	b.n	800331e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e3a:	d106      	bne.n	8002e4a <HAL_RCC_OscConfig+0x7a>
 8002e3c:	4b84      	ldr	r3, [pc, #528]	; (8003050 <HAL_RCC_OscConfig+0x280>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a83      	ldr	r2, [pc, #524]	; (8003050 <HAL_RCC_OscConfig+0x280>)
 8002e42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e46:	6013      	str	r3, [r2, #0]
 8002e48:	e02e      	b.n	8002ea8 <HAL_RCC_OscConfig+0xd8>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10c      	bne.n	8002e6c <HAL_RCC_OscConfig+0x9c>
 8002e52:	4b7f      	ldr	r3, [pc, #508]	; (8003050 <HAL_RCC_OscConfig+0x280>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a7e      	ldr	r2, [pc, #504]	; (8003050 <HAL_RCC_OscConfig+0x280>)
 8002e58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e5c:	6013      	str	r3, [r2, #0]
 8002e5e:	4b7c      	ldr	r3, [pc, #496]	; (8003050 <HAL_RCC_OscConfig+0x280>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a7b      	ldr	r2, [pc, #492]	; (8003050 <HAL_RCC_OscConfig+0x280>)
 8002e64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e68:	6013      	str	r3, [r2, #0]
 8002e6a:	e01d      	b.n	8002ea8 <HAL_RCC_OscConfig+0xd8>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e74:	d10c      	bne.n	8002e90 <HAL_RCC_OscConfig+0xc0>
 8002e76:	4b76      	ldr	r3, [pc, #472]	; (8003050 <HAL_RCC_OscConfig+0x280>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a75      	ldr	r2, [pc, #468]	; (8003050 <HAL_RCC_OscConfig+0x280>)
 8002e7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e80:	6013      	str	r3, [r2, #0]
 8002e82:	4b73      	ldr	r3, [pc, #460]	; (8003050 <HAL_RCC_OscConfig+0x280>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a72      	ldr	r2, [pc, #456]	; (8003050 <HAL_RCC_OscConfig+0x280>)
 8002e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e8c:	6013      	str	r3, [r2, #0]
 8002e8e:	e00b      	b.n	8002ea8 <HAL_RCC_OscConfig+0xd8>
 8002e90:	4b6f      	ldr	r3, [pc, #444]	; (8003050 <HAL_RCC_OscConfig+0x280>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a6e      	ldr	r2, [pc, #440]	; (8003050 <HAL_RCC_OscConfig+0x280>)
 8002e96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e9a:	6013      	str	r3, [r2, #0]
 8002e9c:	4b6c      	ldr	r3, [pc, #432]	; (8003050 <HAL_RCC_OscConfig+0x280>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a6b      	ldr	r2, [pc, #428]	; (8003050 <HAL_RCC_OscConfig+0x280>)
 8002ea2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ea6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d013      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb0:	f7fe f98e 	bl	80011d0 <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eb8:	f7fe f98a 	bl	80011d0 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b64      	cmp	r3, #100	; 0x64
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e229      	b.n	800331e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eca:	4b61      	ldr	r3, [pc, #388]	; (8003050 <HAL_RCC_OscConfig+0x280>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d0f0      	beq.n	8002eb8 <HAL_RCC_OscConfig+0xe8>
 8002ed6:	e014      	b.n	8002f02 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed8:	f7fe f97a 	bl	80011d0 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ee0:	f7fe f976 	bl	80011d0 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b64      	cmp	r3, #100	; 0x64
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e215      	b.n	800331e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ef2:	4b57      	ldr	r3, [pc, #348]	; (8003050 <HAL_RCC_OscConfig+0x280>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1f0      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x110>
 8002efe:	e000      	b.n	8002f02 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d069      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f0e:	4b50      	ldr	r3, [pc, #320]	; (8003050 <HAL_RCC_OscConfig+0x280>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 030c 	and.w	r3, r3, #12
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00b      	beq.n	8002f32 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f1a:	4b4d      	ldr	r3, [pc, #308]	; (8003050 <HAL_RCC_OscConfig+0x280>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 030c 	and.w	r3, r3, #12
 8002f22:	2b08      	cmp	r3, #8
 8002f24:	d11c      	bne.n	8002f60 <HAL_RCC_OscConfig+0x190>
 8002f26:	4b4a      	ldr	r3, [pc, #296]	; (8003050 <HAL_RCC_OscConfig+0x280>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d116      	bne.n	8002f60 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f32:	4b47      	ldr	r3, [pc, #284]	; (8003050 <HAL_RCC_OscConfig+0x280>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d005      	beq.n	8002f4a <HAL_RCC_OscConfig+0x17a>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d001      	beq.n	8002f4a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e1e9      	b.n	800331e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f4a:	4b41      	ldr	r3, [pc, #260]	; (8003050 <HAL_RCC_OscConfig+0x280>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	493d      	ldr	r1, [pc, #244]	; (8003050 <HAL_RCC_OscConfig+0x280>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f5e:	e040      	b.n	8002fe2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d023      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f68:	4b39      	ldr	r3, [pc, #228]	; (8003050 <HAL_RCC_OscConfig+0x280>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a38      	ldr	r2, [pc, #224]	; (8003050 <HAL_RCC_OscConfig+0x280>)
 8002f6e:	f043 0301 	orr.w	r3, r3, #1
 8002f72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f74:	f7fe f92c 	bl	80011d0 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f7c:	f7fe f928 	bl	80011d0 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e1c7      	b.n	800331e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f8e:	4b30      	ldr	r3, [pc, #192]	; (8003050 <HAL_RCC_OscConfig+0x280>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0f0      	beq.n	8002f7c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f9a:	4b2d      	ldr	r3, [pc, #180]	; (8003050 <HAL_RCC_OscConfig+0x280>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	4929      	ldr	r1, [pc, #164]	; (8003050 <HAL_RCC_OscConfig+0x280>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	600b      	str	r3, [r1, #0]
 8002fae:	e018      	b.n	8002fe2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fb0:	4b27      	ldr	r3, [pc, #156]	; (8003050 <HAL_RCC_OscConfig+0x280>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a26      	ldr	r2, [pc, #152]	; (8003050 <HAL_RCC_OscConfig+0x280>)
 8002fb6:	f023 0301 	bic.w	r3, r3, #1
 8002fba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fbc:	f7fe f908 	bl	80011d0 <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fc4:	f7fe f904 	bl	80011d0 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e1a3      	b.n	800331e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fd6:	4b1e      	ldr	r3, [pc, #120]	; (8003050 <HAL_RCC_OscConfig+0x280>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1f0      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0308 	and.w	r3, r3, #8
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d038      	beq.n	8003060 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d019      	beq.n	800302a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ff6:	4b16      	ldr	r3, [pc, #88]	; (8003050 <HAL_RCC_OscConfig+0x280>)
 8002ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ffa:	4a15      	ldr	r2, [pc, #84]	; (8003050 <HAL_RCC_OscConfig+0x280>)
 8002ffc:	f043 0301 	orr.w	r3, r3, #1
 8003000:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003002:	f7fe f8e5 	bl	80011d0 <HAL_GetTick>
 8003006:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003008:	e008      	b.n	800301c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800300a:	f7fe f8e1 	bl	80011d0 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d901      	bls.n	800301c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e180      	b.n	800331e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800301c:	4b0c      	ldr	r3, [pc, #48]	; (8003050 <HAL_RCC_OscConfig+0x280>)
 800301e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d0f0      	beq.n	800300a <HAL_RCC_OscConfig+0x23a>
 8003028:	e01a      	b.n	8003060 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800302a:	4b09      	ldr	r3, [pc, #36]	; (8003050 <HAL_RCC_OscConfig+0x280>)
 800302c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800302e:	4a08      	ldr	r2, [pc, #32]	; (8003050 <HAL_RCC_OscConfig+0x280>)
 8003030:	f023 0301 	bic.w	r3, r3, #1
 8003034:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003036:	f7fe f8cb 	bl	80011d0 <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800303c:	e00a      	b.n	8003054 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800303e:	f7fe f8c7 	bl	80011d0 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d903      	bls.n	8003054 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e166      	b.n	800331e <HAL_RCC_OscConfig+0x54e>
 8003050:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003054:	4b92      	ldr	r3, [pc, #584]	; (80032a0 <HAL_RCC_OscConfig+0x4d0>)
 8003056:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1ee      	bne.n	800303e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 80a4 	beq.w	80031b6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800306e:	4b8c      	ldr	r3, [pc, #560]	; (80032a0 <HAL_RCC_OscConfig+0x4d0>)
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10d      	bne.n	8003096 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800307a:	4b89      	ldr	r3, [pc, #548]	; (80032a0 <HAL_RCC_OscConfig+0x4d0>)
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	4a88      	ldr	r2, [pc, #544]	; (80032a0 <HAL_RCC_OscConfig+0x4d0>)
 8003080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003084:	6413      	str	r3, [r2, #64]	; 0x40
 8003086:	4b86      	ldr	r3, [pc, #536]	; (80032a0 <HAL_RCC_OscConfig+0x4d0>)
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800308e:	60bb      	str	r3, [r7, #8]
 8003090:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003092:	2301      	movs	r3, #1
 8003094:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003096:	4b83      	ldr	r3, [pc, #524]	; (80032a4 <HAL_RCC_OscConfig+0x4d4>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d118      	bne.n	80030d4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80030a2:	4b80      	ldr	r3, [pc, #512]	; (80032a4 <HAL_RCC_OscConfig+0x4d4>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a7f      	ldr	r2, [pc, #508]	; (80032a4 <HAL_RCC_OscConfig+0x4d4>)
 80030a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ae:	f7fe f88f 	bl	80011d0 <HAL_GetTick>
 80030b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030b4:	e008      	b.n	80030c8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030b6:	f7fe f88b 	bl	80011d0 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b64      	cmp	r3, #100	; 0x64
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e12a      	b.n	800331e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030c8:	4b76      	ldr	r3, [pc, #472]	; (80032a4 <HAL_RCC_OscConfig+0x4d4>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0f0      	beq.n	80030b6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d106      	bne.n	80030ea <HAL_RCC_OscConfig+0x31a>
 80030dc:	4b70      	ldr	r3, [pc, #448]	; (80032a0 <HAL_RCC_OscConfig+0x4d0>)
 80030de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e0:	4a6f      	ldr	r2, [pc, #444]	; (80032a0 <HAL_RCC_OscConfig+0x4d0>)
 80030e2:	f043 0301 	orr.w	r3, r3, #1
 80030e6:	6713      	str	r3, [r2, #112]	; 0x70
 80030e8:	e02d      	b.n	8003146 <HAL_RCC_OscConfig+0x376>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10c      	bne.n	800310c <HAL_RCC_OscConfig+0x33c>
 80030f2:	4b6b      	ldr	r3, [pc, #428]	; (80032a0 <HAL_RCC_OscConfig+0x4d0>)
 80030f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f6:	4a6a      	ldr	r2, [pc, #424]	; (80032a0 <HAL_RCC_OscConfig+0x4d0>)
 80030f8:	f023 0301 	bic.w	r3, r3, #1
 80030fc:	6713      	str	r3, [r2, #112]	; 0x70
 80030fe:	4b68      	ldr	r3, [pc, #416]	; (80032a0 <HAL_RCC_OscConfig+0x4d0>)
 8003100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003102:	4a67      	ldr	r2, [pc, #412]	; (80032a0 <HAL_RCC_OscConfig+0x4d0>)
 8003104:	f023 0304 	bic.w	r3, r3, #4
 8003108:	6713      	str	r3, [r2, #112]	; 0x70
 800310a:	e01c      	b.n	8003146 <HAL_RCC_OscConfig+0x376>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	2b05      	cmp	r3, #5
 8003112:	d10c      	bne.n	800312e <HAL_RCC_OscConfig+0x35e>
 8003114:	4b62      	ldr	r3, [pc, #392]	; (80032a0 <HAL_RCC_OscConfig+0x4d0>)
 8003116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003118:	4a61      	ldr	r2, [pc, #388]	; (80032a0 <HAL_RCC_OscConfig+0x4d0>)
 800311a:	f043 0304 	orr.w	r3, r3, #4
 800311e:	6713      	str	r3, [r2, #112]	; 0x70
 8003120:	4b5f      	ldr	r3, [pc, #380]	; (80032a0 <HAL_RCC_OscConfig+0x4d0>)
 8003122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003124:	4a5e      	ldr	r2, [pc, #376]	; (80032a0 <HAL_RCC_OscConfig+0x4d0>)
 8003126:	f043 0301 	orr.w	r3, r3, #1
 800312a:	6713      	str	r3, [r2, #112]	; 0x70
 800312c:	e00b      	b.n	8003146 <HAL_RCC_OscConfig+0x376>
 800312e:	4b5c      	ldr	r3, [pc, #368]	; (80032a0 <HAL_RCC_OscConfig+0x4d0>)
 8003130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003132:	4a5b      	ldr	r2, [pc, #364]	; (80032a0 <HAL_RCC_OscConfig+0x4d0>)
 8003134:	f023 0301 	bic.w	r3, r3, #1
 8003138:	6713      	str	r3, [r2, #112]	; 0x70
 800313a:	4b59      	ldr	r3, [pc, #356]	; (80032a0 <HAL_RCC_OscConfig+0x4d0>)
 800313c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800313e:	4a58      	ldr	r2, [pc, #352]	; (80032a0 <HAL_RCC_OscConfig+0x4d0>)
 8003140:	f023 0304 	bic.w	r3, r3, #4
 8003144:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d015      	beq.n	800317a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800314e:	f7fe f83f 	bl	80011d0 <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003154:	e00a      	b.n	800316c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003156:	f7fe f83b 	bl	80011d0 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	f241 3288 	movw	r2, #5000	; 0x1388
 8003164:	4293      	cmp	r3, r2
 8003166:	d901      	bls.n	800316c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e0d8      	b.n	800331e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800316c:	4b4c      	ldr	r3, [pc, #304]	; (80032a0 <HAL_RCC_OscConfig+0x4d0>)
 800316e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d0ee      	beq.n	8003156 <HAL_RCC_OscConfig+0x386>
 8003178:	e014      	b.n	80031a4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800317a:	f7fe f829 	bl	80011d0 <HAL_GetTick>
 800317e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003180:	e00a      	b.n	8003198 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003182:	f7fe f825 	bl	80011d0 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003190:	4293      	cmp	r3, r2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e0c2      	b.n	800331e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003198:	4b41      	ldr	r3, [pc, #260]	; (80032a0 <HAL_RCC_OscConfig+0x4d0>)
 800319a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1ee      	bne.n	8003182 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031a4:	7dfb      	ldrb	r3, [r7, #23]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d105      	bne.n	80031b6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031aa:	4b3d      	ldr	r3, [pc, #244]	; (80032a0 <HAL_RCC_OscConfig+0x4d0>)
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	4a3c      	ldr	r2, [pc, #240]	; (80032a0 <HAL_RCC_OscConfig+0x4d0>)
 80031b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 80ae 	beq.w	800331c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031c0:	4b37      	ldr	r3, [pc, #220]	; (80032a0 <HAL_RCC_OscConfig+0x4d0>)
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 030c 	and.w	r3, r3, #12
 80031c8:	2b08      	cmp	r3, #8
 80031ca:	d06d      	beq.n	80032a8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d14b      	bne.n	800326c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d4:	4b32      	ldr	r3, [pc, #200]	; (80032a0 <HAL_RCC_OscConfig+0x4d0>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a31      	ldr	r2, [pc, #196]	; (80032a0 <HAL_RCC_OscConfig+0x4d0>)
 80031da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e0:	f7fd fff6 	bl	80011d0 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031e8:	f7fd fff2 	bl	80011d0 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e091      	b.n	800331e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031fa:	4b29      	ldr	r3, [pc, #164]	; (80032a0 <HAL_RCC_OscConfig+0x4d0>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f0      	bne.n	80031e8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	69da      	ldr	r2, [r3, #28]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	431a      	orrs	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	019b      	lsls	r3, r3, #6
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321c:	085b      	lsrs	r3, r3, #1
 800321e:	3b01      	subs	r3, #1
 8003220:	041b      	lsls	r3, r3, #16
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003228:	061b      	lsls	r3, r3, #24
 800322a:	431a      	orrs	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003230:	071b      	lsls	r3, r3, #28
 8003232:	491b      	ldr	r1, [pc, #108]	; (80032a0 <HAL_RCC_OscConfig+0x4d0>)
 8003234:	4313      	orrs	r3, r2
 8003236:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003238:	4b19      	ldr	r3, [pc, #100]	; (80032a0 <HAL_RCC_OscConfig+0x4d0>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a18      	ldr	r2, [pc, #96]	; (80032a0 <HAL_RCC_OscConfig+0x4d0>)
 800323e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003244:	f7fd ffc4 	bl	80011d0 <HAL_GetTick>
 8003248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800324c:	f7fd ffc0 	bl	80011d0 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b02      	cmp	r3, #2
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e05f      	b.n	800331e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800325e:	4b10      	ldr	r3, [pc, #64]	; (80032a0 <HAL_RCC_OscConfig+0x4d0>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d0f0      	beq.n	800324c <HAL_RCC_OscConfig+0x47c>
 800326a:	e057      	b.n	800331c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800326c:	4b0c      	ldr	r3, [pc, #48]	; (80032a0 <HAL_RCC_OscConfig+0x4d0>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a0b      	ldr	r2, [pc, #44]	; (80032a0 <HAL_RCC_OscConfig+0x4d0>)
 8003272:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003276:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003278:	f7fd ffaa 	bl	80011d0 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003280:	f7fd ffa6 	bl	80011d0 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e045      	b.n	800331e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003292:	4b03      	ldr	r3, [pc, #12]	; (80032a0 <HAL_RCC_OscConfig+0x4d0>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1f0      	bne.n	8003280 <HAL_RCC_OscConfig+0x4b0>
 800329e:	e03d      	b.n	800331c <HAL_RCC_OscConfig+0x54c>
 80032a0:	40023800 	.word	0x40023800
 80032a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80032a8:	4b1f      	ldr	r3, [pc, #124]	; (8003328 <HAL_RCC_OscConfig+0x558>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d030      	beq.n	8003318 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d129      	bne.n	8003318 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d122      	bne.n	8003318 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032d8:	4013      	ands	r3, r2
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032de:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d119      	bne.n	8003318 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ee:	085b      	lsrs	r3, r3, #1
 80032f0:	3b01      	subs	r3, #1
 80032f2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d10f      	bne.n	8003318 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003302:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003304:	429a      	cmp	r2, r3
 8003306:	d107      	bne.n	8003318 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003314:	429a      	cmp	r2, r3
 8003316:	d001      	beq.n	800331c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e000      	b.n	800331e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3718      	adds	r7, #24
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	40023800 	.word	0x40023800

0800332c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003336:	2300      	movs	r3, #0
 8003338:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d101      	bne.n	8003344 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e0d0      	b.n	80034e6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003344:	4b6a      	ldr	r3, [pc, #424]	; (80034f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 030f 	and.w	r3, r3, #15
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	429a      	cmp	r2, r3
 8003350:	d910      	bls.n	8003374 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003352:	4b67      	ldr	r3, [pc, #412]	; (80034f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f023 020f 	bic.w	r2, r3, #15
 800335a:	4965      	ldr	r1, [pc, #404]	; (80034f0 <HAL_RCC_ClockConfig+0x1c4>)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	4313      	orrs	r3, r2
 8003360:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003362:	4b63      	ldr	r3, [pc, #396]	; (80034f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 030f 	and.w	r3, r3, #15
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	429a      	cmp	r2, r3
 800336e:	d001      	beq.n	8003374 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e0b8      	b.n	80034e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d020      	beq.n	80033c2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0304 	and.w	r3, r3, #4
 8003388:	2b00      	cmp	r3, #0
 800338a:	d005      	beq.n	8003398 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800338c:	4b59      	ldr	r3, [pc, #356]	; (80034f4 <HAL_RCC_ClockConfig+0x1c8>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	4a58      	ldr	r2, [pc, #352]	; (80034f4 <HAL_RCC_ClockConfig+0x1c8>)
 8003392:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003396:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0308 	and.w	r3, r3, #8
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d005      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033a4:	4b53      	ldr	r3, [pc, #332]	; (80034f4 <HAL_RCC_ClockConfig+0x1c8>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	4a52      	ldr	r2, [pc, #328]	; (80034f4 <HAL_RCC_ClockConfig+0x1c8>)
 80033aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033b0:	4b50      	ldr	r3, [pc, #320]	; (80034f4 <HAL_RCC_ClockConfig+0x1c8>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	494d      	ldr	r1, [pc, #308]	; (80034f4 <HAL_RCC_ClockConfig+0x1c8>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d040      	beq.n	8003450 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d107      	bne.n	80033e6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033d6:	4b47      	ldr	r3, [pc, #284]	; (80034f4 <HAL_RCC_ClockConfig+0x1c8>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d115      	bne.n	800340e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e07f      	b.n	80034e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d107      	bne.n	80033fe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ee:	4b41      	ldr	r3, [pc, #260]	; (80034f4 <HAL_RCC_ClockConfig+0x1c8>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d109      	bne.n	800340e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e073      	b.n	80034e6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033fe:	4b3d      	ldr	r3, [pc, #244]	; (80034f4 <HAL_RCC_ClockConfig+0x1c8>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e06b      	b.n	80034e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800340e:	4b39      	ldr	r3, [pc, #228]	; (80034f4 <HAL_RCC_ClockConfig+0x1c8>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f023 0203 	bic.w	r2, r3, #3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	4936      	ldr	r1, [pc, #216]	; (80034f4 <HAL_RCC_ClockConfig+0x1c8>)
 800341c:	4313      	orrs	r3, r2
 800341e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003420:	f7fd fed6 	bl	80011d0 <HAL_GetTick>
 8003424:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003426:	e00a      	b.n	800343e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003428:	f7fd fed2 	bl	80011d0 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	f241 3288 	movw	r2, #5000	; 0x1388
 8003436:	4293      	cmp	r3, r2
 8003438:	d901      	bls.n	800343e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e053      	b.n	80034e6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800343e:	4b2d      	ldr	r3, [pc, #180]	; (80034f4 <HAL_RCC_ClockConfig+0x1c8>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f003 020c 	and.w	r2, r3, #12
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	429a      	cmp	r2, r3
 800344e:	d1eb      	bne.n	8003428 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003450:	4b27      	ldr	r3, [pc, #156]	; (80034f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 030f 	and.w	r3, r3, #15
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	429a      	cmp	r2, r3
 800345c:	d210      	bcs.n	8003480 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800345e:	4b24      	ldr	r3, [pc, #144]	; (80034f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f023 020f 	bic.w	r2, r3, #15
 8003466:	4922      	ldr	r1, [pc, #136]	; (80034f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	4313      	orrs	r3, r2
 800346c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800346e:	4b20      	ldr	r3, [pc, #128]	; (80034f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 030f 	and.w	r3, r3, #15
 8003476:	683a      	ldr	r2, [r7, #0]
 8003478:	429a      	cmp	r2, r3
 800347a:	d001      	beq.n	8003480 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e032      	b.n	80034e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	2b00      	cmp	r3, #0
 800348a:	d008      	beq.n	800349e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800348c:	4b19      	ldr	r3, [pc, #100]	; (80034f4 <HAL_RCC_ClockConfig+0x1c8>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	4916      	ldr	r1, [pc, #88]	; (80034f4 <HAL_RCC_ClockConfig+0x1c8>)
 800349a:	4313      	orrs	r3, r2
 800349c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0308 	and.w	r3, r3, #8
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d009      	beq.n	80034be <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034aa:	4b12      	ldr	r3, [pc, #72]	; (80034f4 <HAL_RCC_ClockConfig+0x1c8>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	490e      	ldr	r1, [pc, #56]	; (80034f4 <HAL_RCC_ClockConfig+0x1c8>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034be:	f000 f821 	bl	8003504 <HAL_RCC_GetSysClockFreq>
 80034c2:	4602      	mov	r2, r0
 80034c4:	4b0b      	ldr	r3, [pc, #44]	; (80034f4 <HAL_RCC_ClockConfig+0x1c8>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	091b      	lsrs	r3, r3, #4
 80034ca:	f003 030f 	and.w	r3, r3, #15
 80034ce:	490a      	ldr	r1, [pc, #40]	; (80034f8 <HAL_RCC_ClockConfig+0x1cc>)
 80034d0:	5ccb      	ldrb	r3, [r1, r3]
 80034d2:	fa22 f303 	lsr.w	r3, r2, r3
 80034d6:	4a09      	ldr	r2, [pc, #36]	; (80034fc <HAL_RCC_ClockConfig+0x1d0>)
 80034d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034da:	4b09      	ldr	r3, [pc, #36]	; (8003500 <HAL_RCC_ClockConfig+0x1d4>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fd fe32 	bl	8001148 <HAL_InitTick>

  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	40023c00 	.word	0x40023c00
 80034f4:	40023800 	.word	0x40023800
 80034f8:	08012aac 	.word	0x08012aac
 80034fc:	20000000 	.word	0x20000000
 8003500:	20000004 	.word	0x20000004

08003504 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003504:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003508:	b094      	sub	sp, #80	; 0x50
 800350a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800350c:	2300      	movs	r3, #0
 800350e:	647b      	str	r3, [r7, #68]	; 0x44
 8003510:	2300      	movs	r3, #0
 8003512:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003514:	2300      	movs	r3, #0
 8003516:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003518:	2300      	movs	r3, #0
 800351a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800351c:	4b79      	ldr	r3, [pc, #484]	; (8003704 <HAL_RCC_GetSysClockFreq+0x200>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f003 030c 	and.w	r3, r3, #12
 8003524:	2b08      	cmp	r3, #8
 8003526:	d00d      	beq.n	8003544 <HAL_RCC_GetSysClockFreq+0x40>
 8003528:	2b08      	cmp	r3, #8
 800352a:	f200 80e1 	bhi.w	80036f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800352e:	2b00      	cmp	r3, #0
 8003530:	d002      	beq.n	8003538 <HAL_RCC_GetSysClockFreq+0x34>
 8003532:	2b04      	cmp	r3, #4
 8003534:	d003      	beq.n	800353e <HAL_RCC_GetSysClockFreq+0x3a>
 8003536:	e0db      	b.n	80036f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003538:	4b73      	ldr	r3, [pc, #460]	; (8003708 <HAL_RCC_GetSysClockFreq+0x204>)
 800353a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800353c:	e0db      	b.n	80036f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800353e:	4b72      	ldr	r3, [pc, #456]	; (8003708 <HAL_RCC_GetSysClockFreq+0x204>)
 8003540:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003542:	e0d8      	b.n	80036f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003544:	4b6f      	ldr	r3, [pc, #444]	; (8003704 <HAL_RCC_GetSysClockFreq+0x200>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800354c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800354e:	4b6d      	ldr	r3, [pc, #436]	; (8003704 <HAL_RCC_GetSysClockFreq+0x200>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d063      	beq.n	8003622 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800355a:	4b6a      	ldr	r3, [pc, #424]	; (8003704 <HAL_RCC_GetSysClockFreq+0x200>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	099b      	lsrs	r3, r3, #6
 8003560:	2200      	movs	r2, #0
 8003562:	63bb      	str	r3, [r7, #56]	; 0x38
 8003564:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800356c:	633b      	str	r3, [r7, #48]	; 0x30
 800356e:	2300      	movs	r3, #0
 8003570:	637b      	str	r3, [r7, #52]	; 0x34
 8003572:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003576:	4622      	mov	r2, r4
 8003578:	462b      	mov	r3, r5
 800357a:	f04f 0000 	mov.w	r0, #0
 800357e:	f04f 0100 	mov.w	r1, #0
 8003582:	0159      	lsls	r1, r3, #5
 8003584:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003588:	0150      	lsls	r0, r2, #5
 800358a:	4602      	mov	r2, r0
 800358c:	460b      	mov	r3, r1
 800358e:	4621      	mov	r1, r4
 8003590:	1a51      	subs	r1, r2, r1
 8003592:	6139      	str	r1, [r7, #16]
 8003594:	4629      	mov	r1, r5
 8003596:	eb63 0301 	sbc.w	r3, r3, r1
 800359a:	617b      	str	r3, [r7, #20]
 800359c:	f04f 0200 	mov.w	r2, #0
 80035a0:	f04f 0300 	mov.w	r3, #0
 80035a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035a8:	4659      	mov	r1, fp
 80035aa:	018b      	lsls	r3, r1, #6
 80035ac:	4651      	mov	r1, sl
 80035ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035b2:	4651      	mov	r1, sl
 80035b4:	018a      	lsls	r2, r1, #6
 80035b6:	4651      	mov	r1, sl
 80035b8:	ebb2 0801 	subs.w	r8, r2, r1
 80035bc:	4659      	mov	r1, fp
 80035be:	eb63 0901 	sbc.w	r9, r3, r1
 80035c2:	f04f 0200 	mov.w	r2, #0
 80035c6:	f04f 0300 	mov.w	r3, #0
 80035ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035d6:	4690      	mov	r8, r2
 80035d8:	4699      	mov	r9, r3
 80035da:	4623      	mov	r3, r4
 80035dc:	eb18 0303 	adds.w	r3, r8, r3
 80035e0:	60bb      	str	r3, [r7, #8]
 80035e2:	462b      	mov	r3, r5
 80035e4:	eb49 0303 	adc.w	r3, r9, r3
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	f04f 0200 	mov.w	r2, #0
 80035ee:	f04f 0300 	mov.w	r3, #0
 80035f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80035f6:	4629      	mov	r1, r5
 80035f8:	028b      	lsls	r3, r1, #10
 80035fa:	4621      	mov	r1, r4
 80035fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003600:	4621      	mov	r1, r4
 8003602:	028a      	lsls	r2, r1, #10
 8003604:	4610      	mov	r0, r2
 8003606:	4619      	mov	r1, r3
 8003608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800360a:	2200      	movs	r2, #0
 800360c:	62bb      	str	r3, [r7, #40]	; 0x28
 800360e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003610:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003614:	f7fc fe64 	bl	80002e0 <__aeabi_uldivmod>
 8003618:	4602      	mov	r2, r0
 800361a:	460b      	mov	r3, r1
 800361c:	4613      	mov	r3, r2
 800361e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003620:	e058      	b.n	80036d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003622:	4b38      	ldr	r3, [pc, #224]	; (8003704 <HAL_RCC_GetSysClockFreq+0x200>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	099b      	lsrs	r3, r3, #6
 8003628:	2200      	movs	r2, #0
 800362a:	4618      	mov	r0, r3
 800362c:	4611      	mov	r1, r2
 800362e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003632:	623b      	str	r3, [r7, #32]
 8003634:	2300      	movs	r3, #0
 8003636:	627b      	str	r3, [r7, #36]	; 0x24
 8003638:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800363c:	4642      	mov	r2, r8
 800363e:	464b      	mov	r3, r9
 8003640:	f04f 0000 	mov.w	r0, #0
 8003644:	f04f 0100 	mov.w	r1, #0
 8003648:	0159      	lsls	r1, r3, #5
 800364a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800364e:	0150      	lsls	r0, r2, #5
 8003650:	4602      	mov	r2, r0
 8003652:	460b      	mov	r3, r1
 8003654:	4641      	mov	r1, r8
 8003656:	ebb2 0a01 	subs.w	sl, r2, r1
 800365a:	4649      	mov	r1, r9
 800365c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003660:	f04f 0200 	mov.w	r2, #0
 8003664:	f04f 0300 	mov.w	r3, #0
 8003668:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800366c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003670:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003674:	ebb2 040a 	subs.w	r4, r2, sl
 8003678:	eb63 050b 	sbc.w	r5, r3, fp
 800367c:	f04f 0200 	mov.w	r2, #0
 8003680:	f04f 0300 	mov.w	r3, #0
 8003684:	00eb      	lsls	r3, r5, #3
 8003686:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800368a:	00e2      	lsls	r2, r4, #3
 800368c:	4614      	mov	r4, r2
 800368e:	461d      	mov	r5, r3
 8003690:	4643      	mov	r3, r8
 8003692:	18e3      	adds	r3, r4, r3
 8003694:	603b      	str	r3, [r7, #0]
 8003696:	464b      	mov	r3, r9
 8003698:	eb45 0303 	adc.w	r3, r5, r3
 800369c:	607b      	str	r3, [r7, #4]
 800369e:	f04f 0200 	mov.w	r2, #0
 80036a2:	f04f 0300 	mov.w	r3, #0
 80036a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036aa:	4629      	mov	r1, r5
 80036ac:	028b      	lsls	r3, r1, #10
 80036ae:	4621      	mov	r1, r4
 80036b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036b4:	4621      	mov	r1, r4
 80036b6:	028a      	lsls	r2, r1, #10
 80036b8:	4610      	mov	r0, r2
 80036ba:	4619      	mov	r1, r3
 80036bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036be:	2200      	movs	r2, #0
 80036c0:	61bb      	str	r3, [r7, #24]
 80036c2:	61fa      	str	r2, [r7, #28]
 80036c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036c8:	f7fc fe0a 	bl	80002e0 <__aeabi_uldivmod>
 80036cc:	4602      	mov	r2, r0
 80036ce:	460b      	mov	r3, r1
 80036d0:	4613      	mov	r3, r2
 80036d2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80036d4:	4b0b      	ldr	r3, [pc, #44]	; (8003704 <HAL_RCC_GetSysClockFreq+0x200>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	0c1b      	lsrs	r3, r3, #16
 80036da:	f003 0303 	and.w	r3, r3, #3
 80036de:	3301      	adds	r3, #1
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80036e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036ee:	e002      	b.n	80036f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036f0:	4b05      	ldr	r3, [pc, #20]	; (8003708 <HAL_RCC_GetSysClockFreq+0x204>)
 80036f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3750      	adds	r7, #80	; 0x50
 80036fc:	46bd      	mov	sp, r7
 80036fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003702:	bf00      	nop
 8003704:	40023800 	.word	0x40023800
 8003708:	00f42400 	.word	0x00f42400

0800370c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003710:	4b03      	ldr	r3, [pc, #12]	; (8003720 <HAL_RCC_GetHCLKFreq+0x14>)
 8003712:	681b      	ldr	r3, [r3, #0]
}
 8003714:	4618      	mov	r0, r3
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	20000000 	.word	0x20000000

08003724 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e049      	b.n	80037ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d106      	bne.n	8003750 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7fd fa64 	bl	8000c18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2202      	movs	r2, #2
 8003754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	3304      	adds	r3, #4
 8003760:	4619      	mov	r1, r3
 8003762:	4610      	mov	r0, r2
 8003764:	f000 faa8 	bl	8003cb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
	...

080037d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d001      	beq.n	80037ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e054      	b.n	8003896 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2202      	movs	r2, #2
 80037f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68da      	ldr	r2, [r3, #12]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f042 0201 	orr.w	r2, r2, #1
 8003802:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a26      	ldr	r2, [pc, #152]	; (80038a4 <HAL_TIM_Base_Start_IT+0xd0>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d022      	beq.n	8003854 <HAL_TIM_Base_Start_IT+0x80>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003816:	d01d      	beq.n	8003854 <HAL_TIM_Base_Start_IT+0x80>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a22      	ldr	r2, [pc, #136]	; (80038a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d018      	beq.n	8003854 <HAL_TIM_Base_Start_IT+0x80>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a21      	ldr	r2, [pc, #132]	; (80038ac <HAL_TIM_Base_Start_IT+0xd8>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d013      	beq.n	8003854 <HAL_TIM_Base_Start_IT+0x80>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a1f      	ldr	r2, [pc, #124]	; (80038b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d00e      	beq.n	8003854 <HAL_TIM_Base_Start_IT+0x80>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a1e      	ldr	r2, [pc, #120]	; (80038b4 <HAL_TIM_Base_Start_IT+0xe0>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d009      	beq.n	8003854 <HAL_TIM_Base_Start_IT+0x80>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a1c      	ldr	r2, [pc, #112]	; (80038b8 <HAL_TIM_Base_Start_IT+0xe4>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d004      	beq.n	8003854 <HAL_TIM_Base_Start_IT+0x80>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a1b      	ldr	r2, [pc, #108]	; (80038bc <HAL_TIM_Base_Start_IT+0xe8>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d115      	bne.n	8003880 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689a      	ldr	r2, [r3, #8]
 800385a:	4b19      	ldr	r3, [pc, #100]	; (80038c0 <HAL_TIM_Base_Start_IT+0xec>)
 800385c:	4013      	ands	r3, r2
 800385e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2b06      	cmp	r3, #6
 8003864:	d015      	beq.n	8003892 <HAL_TIM_Base_Start_IT+0xbe>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800386c:	d011      	beq.n	8003892 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f042 0201 	orr.w	r2, r2, #1
 800387c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800387e:	e008      	b.n	8003892 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f042 0201 	orr.w	r2, r2, #1
 800388e:	601a      	str	r2, [r3, #0]
 8003890:	e000      	b.n	8003894 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003892:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3714      	adds	r7, #20
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	40010000 	.word	0x40010000
 80038a8:	40000400 	.word	0x40000400
 80038ac:	40000800 	.word	0x40000800
 80038b0:	40000c00 	.word	0x40000c00
 80038b4:	40010400 	.word	0x40010400
 80038b8:	40014000 	.word	0x40014000
 80038bc:	40001800 	.word	0x40001800
 80038c0:	00010007 	.word	0x00010007

080038c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d020      	beq.n	8003928 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d01b      	beq.n	8003928 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f06f 0202 	mvn.w	r2, #2
 80038f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	f003 0303 	and.w	r3, r3, #3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f9b4 	bl	8003c7c <HAL_TIM_IC_CaptureCallback>
 8003914:	e005      	b.n	8003922 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f9a6 	bl	8003c68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 f9b7 	bl	8003c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	f003 0304 	and.w	r3, r3, #4
 800392e:	2b00      	cmp	r3, #0
 8003930:	d020      	beq.n	8003974 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b00      	cmp	r3, #0
 800393a:	d01b      	beq.n	8003974 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f06f 0204 	mvn.w	r2, #4
 8003944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2202      	movs	r2, #2
 800394a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003956:	2b00      	cmp	r3, #0
 8003958:	d003      	beq.n	8003962 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f98e 	bl	8003c7c <HAL_TIM_IC_CaptureCallback>
 8003960:	e005      	b.n	800396e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f980 	bl	8003c68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 f991 	bl	8003c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	f003 0308 	and.w	r3, r3, #8
 800397a:	2b00      	cmp	r3, #0
 800397c:	d020      	beq.n	80039c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f003 0308 	and.w	r3, r3, #8
 8003984:	2b00      	cmp	r3, #0
 8003986:	d01b      	beq.n	80039c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f06f 0208 	mvn.w	r2, #8
 8003990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2204      	movs	r2, #4
 8003996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	f003 0303 	and.w	r3, r3, #3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f968 	bl	8003c7c <HAL_TIM_IC_CaptureCallback>
 80039ac:	e005      	b.n	80039ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f95a 	bl	8003c68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 f96b 	bl	8003c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	f003 0310 	and.w	r3, r3, #16
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d020      	beq.n	8003a0c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f003 0310 	and.w	r3, r3, #16
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d01b      	beq.n	8003a0c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f06f 0210 	mvn.w	r2, #16
 80039dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2208      	movs	r2, #8
 80039e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f942 	bl	8003c7c <HAL_TIM_IC_CaptureCallback>
 80039f8:	e005      	b.n	8003a06 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 f934 	bl	8003c68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 f945 	bl	8003c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00c      	beq.n	8003a30 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d007      	beq.n	8003a30 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f06f 0201 	mvn.w	r2, #1
 8003a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7fc fffa 	bl	8000a24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d104      	bne.n	8003a44 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00c      	beq.n	8003a5e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d007      	beq.n	8003a5e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8003a56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 fb0b 	bl	8004074 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00c      	beq.n	8003a82 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d007      	beq.n	8003a82 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003a7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 fb03 	bl	8004088 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00c      	beq.n	8003aa6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d007      	beq.n	8003aa6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 f8ff 	bl	8003ca4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	f003 0320 	and.w	r3, r3, #32
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00c      	beq.n	8003aca <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f003 0320 	and.w	r3, r3, #32
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d007      	beq.n	8003aca <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f06f 0220 	mvn.w	r2, #32
 8003ac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 facb 	bl	8004060 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003aca:	bf00      	nop
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
	...

08003ad4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d101      	bne.n	8003af0 <HAL_TIM_ConfigClockSource+0x1c>
 8003aec:	2302      	movs	r3, #2
 8003aee:	e0b4      	b.n	8003c5a <HAL_TIM_ConfigClockSource+0x186>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2202      	movs	r2, #2
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	4b56      	ldr	r3, [pc, #344]	; (8003c64 <HAL_TIM_ConfigClockSource+0x190>)
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b28:	d03e      	beq.n	8003ba8 <HAL_TIM_ConfigClockSource+0xd4>
 8003b2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b2e:	f200 8087 	bhi.w	8003c40 <HAL_TIM_ConfigClockSource+0x16c>
 8003b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b36:	f000 8086 	beq.w	8003c46 <HAL_TIM_ConfigClockSource+0x172>
 8003b3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b3e:	d87f      	bhi.n	8003c40 <HAL_TIM_ConfigClockSource+0x16c>
 8003b40:	2b70      	cmp	r3, #112	; 0x70
 8003b42:	d01a      	beq.n	8003b7a <HAL_TIM_ConfigClockSource+0xa6>
 8003b44:	2b70      	cmp	r3, #112	; 0x70
 8003b46:	d87b      	bhi.n	8003c40 <HAL_TIM_ConfigClockSource+0x16c>
 8003b48:	2b60      	cmp	r3, #96	; 0x60
 8003b4a:	d050      	beq.n	8003bee <HAL_TIM_ConfigClockSource+0x11a>
 8003b4c:	2b60      	cmp	r3, #96	; 0x60
 8003b4e:	d877      	bhi.n	8003c40 <HAL_TIM_ConfigClockSource+0x16c>
 8003b50:	2b50      	cmp	r3, #80	; 0x50
 8003b52:	d03c      	beq.n	8003bce <HAL_TIM_ConfigClockSource+0xfa>
 8003b54:	2b50      	cmp	r3, #80	; 0x50
 8003b56:	d873      	bhi.n	8003c40 <HAL_TIM_ConfigClockSource+0x16c>
 8003b58:	2b40      	cmp	r3, #64	; 0x40
 8003b5a:	d058      	beq.n	8003c0e <HAL_TIM_ConfigClockSource+0x13a>
 8003b5c:	2b40      	cmp	r3, #64	; 0x40
 8003b5e:	d86f      	bhi.n	8003c40 <HAL_TIM_ConfigClockSource+0x16c>
 8003b60:	2b30      	cmp	r3, #48	; 0x30
 8003b62:	d064      	beq.n	8003c2e <HAL_TIM_ConfigClockSource+0x15a>
 8003b64:	2b30      	cmp	r3, #48	; 0x30
 8003b66:	d86b      	bhi.n	8003c40 <HAL_TIM_ConfigClockSource+0x16c>
 8003b68:	2b20      	cmp	r3, #32
 8003b6a:	d060      	beq.n	8003c2e <HAL_TIM_ConfigClockSource+0x15a>
 8003b6c:	2b20      	cmp	r3, #32
 8003b6e:	d867      	bhi.n	8003c40 <HAL_TIM_ConfigClockSource+0x16c>
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d05c      	beq.n	8003c2e <HAL_TIM_ConfigClockSource+0x15a>
 8003b74:	2b10      	cmp	r3, #16
 8003b76:	d05a      	beq.n	8003c2e <HAL_TIM_ConfigClockSource+0x15a>
 8003b78:	e062      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b8a:	f000 f9bb 	bl	8003f04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	609a      	str	r2, [r3, #8]
      break;
 8003ba6:	e04f      	b.n	8003c48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003bb8:	f000 f9a4 	bl	8003f04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689a      	ldr	r2, [r3, #8]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bca:	609a      	str	r2, [r3, #8]
      break;
 8003bcc:	e03c      	b.n	8003c48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bda:	461a      	mov	r2, r3
 8003bdc:	f000 f918 	bl	8003e10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2150      	movs	r1, #80	; 0x50
 8003be6:	4618      	mov	r0, r3
 8003be8:	f000 f971 	bl	8003ece <TIM_ITRx_SetConfig>
      break;
 8003bec:	e02c      	b.n	8003c48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	f000 f937 	bl	8003e6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2160      	movs	r1, #96	; 0x60
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 f961 	bl	8003ece <TIM_ITRx_SetConfig>
      break;
 8003c0c:	e01c      	b.n	8003c48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	f000 f8f8 	bl	8003e10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2140      	movs	r1, #64	; 0x40
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 f951 	bl	8003ece <TIM_ITRx_SetConfig>
      break;
 8003c2c:	e00c      	b.n	8003c48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4619      	mov	r1, r3
 8003c38:	4610      	mov	r0, r2
 8003c3a:	f000 f948 	bl	8003ece <TIM_ITRx_SetConfig>
      break;
 8003c3e:	e003      	b.n	8003c48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	73fb      	strb	r3, [r7, #15]
      break;
 8003c44:	e000      	b.n	8003c48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	fffeff88 	.word	0xfffeff88

08003c68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a46      	ldr	r2, [pc, #280]	; (8003de4 <TIM_Base_SetConfig+0x12c>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d013      	beq.n	8003cf8 <TIM_Base_SetConfig+0x40>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cd6:	d00f      	beq.n	8003cf8 <TIM_Base_SetConfig+0x40>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a43      	ldr	r2, [pc, #268]	; (8003de8 <TIM_Base_SetConfig+0x130>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d00b      	beq.n	8003cf8 <TIM_Base_SetConfig+0x40>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a42      	ldr	r2, [pc, #264]	; (8003dec <TIM_Base_SetConfig+0x134>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d007      	beq.n	8003cf8 <TIM_Base_SetConfig+0x40>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a41      	ldr	r2, [pc, #260]	; (8003df0 <TIM_Base_SetConfig+0x138>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d003      	beq.n	8003cf8 <TIM_Base_SetConfig+0x40>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a40      	ldr	r2, [pc, #256]	; (8003df4 <TIM_Base_SetConfig+0x13c>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d108      	bne.n	8003d0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a35      	ldr	r2, [pc, #212]	; (8003de4 <TIM_Base_SetConfig+0x12c>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d02b      	beq.n	8003d6a <TIM_Base_SetConfig+0xb2>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d18:	d027      	beq.n	8003d6a <TIM_Base_SetConfig+0xb2>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a32      	ldr	r2, [pc, #200]	; (8003de8 <TIM_Base_SetConfig+0x130>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d023      	beq.n	8003d6a <TIM_Base_SetConfig+0xb2>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a31      	ldr	r2, [pc, #196]	; (8003dec <TIM_Base_SetConfig+0x134>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d01f      	beq.n	8003d6a <TIM_Base_SetConfig+0xb2>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a30      	ldr	r2, [pc, #192]	; (8003df0 <TIM_Base_SetConfig+0x138>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d01b      	beq.n	8003d6a <TIM_Base_SetConfig+0xb2>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a2f      	ldr	r2, [pc, #188]	; (8003df4 <TIM_Base_SetConfig+0x13c>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d017      	beq.n	8003d6a <TIM_Base_SetConfig+0xb2>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a2e      	ldr	r2, [pc, #184]	; (8003df8 <TIM_Base_SetConfig+0x140>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d013      	beq.n	8003d6a <TIM_Base_SetConfig+0xb2>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a2d      	ldr	r2, [pc, #180]	; (8003dfc <TIM_Base_SetConfig+0x144>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d00f      	beq.n	8003d6a <TIM_Base_SetConfig+0xb2>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a2c      	ldr	r2, [pc, #176]	; (8003e00 <TIM_Base_SetConfig+0x148>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d00b      	beq.n	8003d6a <TIM_Base_SetConfig+0xb2>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a2b      	ldr	r2, [pc, #172]	; (8003e04 <TIM_Base_SetConfig+0x14c>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d007      	beq.n	8003d6a <TIM_Base_SetConfig+0xb2>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a2a      	ldr	r2, [pc, #168]	; (8003e08 <TIM_Base_SetConfig+0x150>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d003      	beq.n	8003d6a <TIM_Base_SetConfig+0xb2>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a29      	ldr	r2, [pc, #164]	; (8003e0c <TIM_Base_SetConfig+0x154>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d108      	bne.n	8003d7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a10      	ldr	r2, [pc, #64]	; (8003de4 <TIM_Base_SetConfig+0x12c>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d003      	beq.n	8003db0 <TIM_Base_SetConfig+0xf8>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a12      	ldr	r2, [pc, #72]	; (8003df4 <TIM_Base_SetConfig+0x13c>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d103      	bne.n	8003db8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	691a      	ldr	r2, [r3, #16]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d105      	bne.n	8003dd6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	f023 0201 	bic.w	r2, r3, #1
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	611a      	str	r2, [r3, #16]
  }
}
 8003dd6:	bf00      	nop
 8003dd8:	3714      	adds	r7, #20
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	40010000 	.word	0x40010000
 8003de8:	40000400 	.word	0x40000400
 8003dec:	40000800 	.word	0x40000800
 8003df0:	40000c00 	.word	0x40000c00
 8003df4:	40010400 	.word	0x40010400
 8003df8:	40014000 	.word	0x40014000
 8003dfc:	40014400 	.word	0x40014400
 8003e00:	40014800 	.word	0x40014800
 8003e04:	40001800 	.word	0x40001800
 8003e08:	40001c00 	.word	0x40001c00
 8003e0c:	40002000 	.word	0x40002000

08003e10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b087      	sub	sp, #28
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	f023 0201 	bic.w	r2, r3, #1
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	011b      	lsls	r3, r3, #4
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f023 030a 	bic.w	r3, r3, #10
 8003e4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	621a      	str	r2, [r3, #32]
}
 8003e62:	bf00      	nop
 8003e64:	371c      	adds	r7, #28
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b087      	sub	sp, #28
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	60f8      	str	r0, [r7, #12]
 8003e76:	60b9      	str	r1, [r7, #8]
 8003e78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	f023 0210 	bic.w	r2, r3, #16
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	031b      	lsls	r3, r3, #12
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003eaa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	011b      	lsls	r3, r3, #4
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	621a      	str	r2, [r3, #32]
}
 8003ec2:	bf00      	nop
 8003ec4:	371c      	adds	r7, #28
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b085      	sub	sp, #20
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
 8003ed6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	f043 0307 	orr.w	r3, r3, #7
 8003ef0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	609a      	str	r2, [r3, #8]
}
 8003ef8:	bf00      	nop
 8003efa:	3714      	adds	r7, #20
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b087      	sub	sp, #28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
 8003f10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	021a      	lsls	r2, r3, #8
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	431a      	orrs	r2, r3
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	609a      	str	r2, [r3, #8]
}
 8003f38:	bf00      	nop
 8003f3a:	371c      	adds	r7, #28
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d101      	bne.n	8003f5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f58:	2302      	movs	r3, #2
 8003f5a:	e06d      	b.n	8004038 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2202      	movs	r2, #2
 8003f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a30      	ldr	r2, [pc, #192]	; (8004044 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d004      	beq.n	8003f90 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a2f      	ldr	r2, [pc, #188]	; (8004048 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d108      	bne.n	8003fa2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003f96:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fa8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a20      	ldr	r2, [pc, #128]	; (8004044 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d022      	beq.n	800400c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fce:	d01d      	beq.n	800400c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a1d      	ldr	r2, [pc, #116]	; (800404c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d018      	beq.n	800400c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a1c      	ldr	r2, [pc, #112]	; (8004050 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d013      	beq.n	800400c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a1a      	ldr	r2, [pc, #104]	; (8004054 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d00e      	beq.n	800400c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a15      	ldr	r2, [pc, #84]	; (8004048 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d009      	beq.n	800400c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a16      	ldr	r2, [pc, #88]	; (8004058 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d004      	beq.n	800400c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a15      	ldr	r2, [pc, #84]	; (800405c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d10c      	bne.n	8004026 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004012:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	4313      	orrs	r3, r2
 800401c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3714      	adds	r7, #20
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr
 8004044:	40010000 	.word	0x40010000
 8004048:	40010400 	.word	0x40010400
 800404c:	40000400 	.word	0x40000400
 8004050:	40000800 	.word	0x40000800
 8004054:	40000c00 	.word	0x40000c00
 8004058:	40014000 	.word	0x40014000
 800405c:	40001800 	.word	0x40001800

08004060 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80040a2:	4b87      	ldr	r3, [pc, #540]	; (80042c0 <MX_LWIP_Init+0x224>)
 80040a4:	22c0      	movs	r2, #192	; 0xc0
 80040a6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80040a8:	4b85      	ldr	r3, [pc, #532]	; (80042c0 <MX_LWIP_Init+0x224>)
 80040aa:	22a8      	movs	r2, #168	; 0xa8
 80040ac:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 2;
 80040ae:	4b84      	ldr	r3, [pc, #528]	; (80042c0 <MX_LWIP_Init+0x224>)
 80040b0:	2202      	movs	r2, #2
 80040b2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 150;
 80040b4:	4b82      	ldr	r3, [pc, #520]	; (80042c0 <MX_LWIP_Init+0x224>)
 80040b6:	2296      	movs	r2, #150	; 0x96
 80040b8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80040ba:	4b82      	ldr	r3, [pc, #520]	; (80042c4 <MX_LWIP_Init+0x228>)
 80040bc:	22ff      	movs	r2, #255	; 0xff
 80040be:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80040c0:	4b80      	ldr	r3, [pc, #512]	; (80042c4 <MX_LWIP_Init+0x228>)
 80040c2:	22ff      	movs	r2, #255	; 0xff
 80040c4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80040c6:	4b7f      	ldr	r3, [pc, #508]	; (80042c4 <MX_LWIP_Init+0x228>)
 80040c8:	22ff      	movs	r2, #255	; 0xff
 80040ca:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80040cc:	4b7d      	ldr	r3, [pc, #500]	; (80042c4 <MX_LWIP_Init+0x228>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80040d2:	4b7d      	ldr	r3, [pc, #500]	; (80042c8 <MX_LWIP_Init+0x22c>)
 80040d4:	22c0      	movs	r2, #192	; 0xc0
 80040d6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80040d8:	4b7b      	ldr	r3, [pc, #492]	; (80042c8 <MX_LWIP_Init+0x22c>)
 80040da:	22a8      	movs	r2, #168	; 0xa8
 80040dc:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 2;
 80040de:	4b7a      	ldr	r3, [pc, #488]	; (80042c8 <MX_LWIP_Init+0x22c>)
 80040e0:	2202      	movs	r2, #2
 80040e2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80040e4:	4b78      	ldr	r3, [pc, #480]	; (80042c8 <MX_LWIP_Init+0x22c>)
 80040e6:	2201      	movs	r2, #1
 80040e8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80040ea:	f000 fd11 	bl	8004b10 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80040ee:	4b74      	ldr	r3, [pc, #464]	; (80042c0 <MX_LWIP_Init+0x224>)
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	061a      	lsls	r2, r3, #24
 80040f4:	4b72      	ldr	r3, [pc, #456]	; (80042c0 <MX_LWIP_Init+0x224>)
 80040f6:	785b      	ldrb	r3, [r3, #1]
 80040f8:	041b      	lsls	r3, r3, #16
 80040fa:	431a      	orrs	r2, r3
 80040fc:	4b70      	ldr	r3, [pc, #448]	; (80042c0 <MX_LWIP_Init+0x224>)
 80040fe:	789b      	ldrb	r3, [r3, #2]
 8004100:	021b      	lsls	r3, r3, #8
 8004102:	4313      	orrs	r3, r2
 8004104:	4a6e      	ldr	r2, [pc, #440]	; (80042c0 <MX_LWIP_Init+0x224>)
 8004106:	78d2      	ldrb	r2, [r2, #3]
 8004108:	4313      	orrs	r3, r2
 800410a:	061a      	lsls	r2, r3, #24
 800410c:	4b6c      	ldr	r3, [pc, #432]	; (80042c0 <MX_LWIP_Init+0x224>)
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	0619      	lsls	r1, r3, #24
 8004112:	4b6b      	ldr	r3, [pc, #428]	; (80042c0 <MX_LWIP_Init+0x224>)
 8004114:	785b      	ldrb	r3, [r3, #1]
 8004116:	041b      	lsls	r3, r3, #16
 8004118:	4319      	orrs	r1, r3
 800411a:	4b69      	ldr	r3, [pc, #420]	; (80042c0 <MX_LWIP_Init+0x224>)
 800411c:	789b      	ldrb	r3, [r3, #2]
 800411e:	021b      	lsls	r3, r3, #8
 8004120:	430b      	orrs	r3, r1
 8004122:	4967      	ldr	r1, [pc, #412]	; (80042c0 <MX_LWIP_Init+0x224>)
 8004124:	78c9      	ldrb	r1, [r1, #3]
 8004126:	430b      	orrs	r3, r1
 8004128:	021b      	lsls	r3, r3, #8
 800412a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800412e:	431a      	orrs	r2, r3
 8004130:	4b63      	ldr	r3, [pc, #396]	; (80042c0 <MX_LWIP_Init+0x224>)
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	0619      	lsls	r1, r3, #24
 8004136:	4b62      	ldr	r3, [pc, #392]	; (80042c0 <MX_LWIP_Init+0x224>)
 8004138:	785b      	ldrb	r3, [r3, #1]
 800413a:	041b      	lsls	r3, r3, #16
 800413c:	4319      	orrs	r1, r3
 800413e:	4b60      	ldr	r3, [pc, #384]	; (80042c0 <MX_LWIP_Init+0x224>)
 8004140:	789b      	ldrb	r3, [r3, #2]
 8004142:	021b      	lsls	r3, r3, #8
 8004144:	430b      	orrs	r3, r1
 8004146:	495e      	ldr	r1, [pc, #376]	; (80042c0 <MX_LWIP_Init+0x224>)
 8004148:	78c9      	ldrb	r1, [r1, #3]
 800414a:	430b      	orrs	r3, r1
 800414c:	0a1b      	lsrs	r3, r3, #8
 800414e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004152:	431a      	orrs	r2, r3
 8004154:	4b5a      	ldr	r3, [pc, #360]	; (80042c0 <MX_LWIP_Init+0x224>)
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	0619      	lsls	r1, r3, #24
 800415a:	4b59      	ldr	r3, [pc, #356]	; (80042c0 <MX_LWIP_Init+0x224>)
 800415c:	785b      	ldrb	r3, [r3, #1]
 800415e:	041b      	lsls	r3, r3, #16
 8004160:	4319      	orrs	r1, r3
 8004162:	4b57      	ldr	r3, [pc, #348]	; (80042c0 <MX_LWIP_Init+0x224>)
 8004164:	789b      	ldrb	r3, [r3, #2]
 8004166:	021b      	lsls	r3, r3, #8
 8004168:	430b      	orrs	r3, r1
 800416a:	4955      	ldr	r1, [pc, #340]	; (80042c0 <MX_LWIP_Init+0x224>)
 800416c:	78c9      	ldrb	r1, [r1, #3]
 800416e:	430b      	orrs	r3, r1
 8004170:	0e1b      	lsrs	r3, r3, #24
 8004172:	4313      	orrs	r3, r2
 8004174:	4a55      	ldr	r2, [pc, #340]	; (80042cc <MX_LWIP_Init+0x230>)
 8004176:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004178:	4b52      	ldr	r3, [pc, #328]	; (80042c4 <MX_LWIP_Init+0x228>)
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	061a      	lsls	r2, r3, #24
 800417e:	4b51      	ldr	r3, [pc, #324]	; (80042c4 <MX_LWIP_Init+0x228>)
 8004180:	785b      	ldrb	r3, [r3, #1]
 8004182:	041b      	lsls	r3, r3, #16
 8004184:	431a      	orrs	r2, r3
 8004186:	4b4f      	ldr	r3, [pc, #316]	; (80042c4 <MX_LWIP_Init+0x228>)
 8004188:	789b      	ldrb	r3, [r3, #2]
 800418a:	021b      	lsls	r3, r3, #8
 800418c:	4313      	orrs	r3, r2
 800418e:	4a4d      	ldr	r2, [pc, #308]	; (80042c4 <MX_LWIP_Init+0x228>)
 8004190:	78d2      	ldrb	r2, [r2, #3]
 8004192:	4313      	orrs	r3, r2
 8004194:	061a      	lsls	r2, r3, #24
 8004196:	4b4b      	ldr	r3, [pc, #300]	; (80042c4 <MX_LWIP_Init+0x228>)
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	0619      	lsls	r1, r3, #24
 800419c:	4b49      	ldr	r3, [pc, #292]	; (80042c4 <MX_LWIP_Init+0x228>)
 800419e:	785b      	ldrb	r3, [r3, #1]
 80041a0:	041b      	lsls	r3, r3, #16
 80041a2:	4319      	orrs	r1, r3
 80041a4:	4b47      	ldr	r3, [pc, #284]	; (80042c4 <MX_LWIP_Init+0x228>)
 80041a6:	789b      	ldrb	r3, [r3, #2]
 80041a8:	021b      	lsls	r3, r3, #8
 80041aa:	430b      	orrs	r3, r1
 80041ac:	4945      	ldr	r1, [pc, #276]	; (80042c4 <MX_LWIP_Init+0x228>)
 80041ae:	78c9      	ldrb	r1, [r1, #3]
 80041b0:	430b      	orrs	r3, r1
 80041b2:	021b      	lsls	r3, r3, #8
 80041b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80041b8:	431a      	orrs	r2, r3
 80041ba:	4b42      	ldr	r3, [pc, #264]	; (80042c4 <MX_LWIP_Init+0x228>)
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	0619      	lsls	r1, r3, #24
 80041c0:	4b40      	ldr	r3, [pc, #256]	; (80042c4 <MX_LWIP_Init+0x228>)
 80041c2:	785b      	ldrb	r3, [r3, #1]
 80041c4:	041b      	lsls	r3, r3, #16
 80041c6:	4319      	orrs	r1, r3
 80041c8:	4b3e      	ldr	r3, [pc, #248]	; (80042c4 <MX_LWIP_Init+0x228>)
 80041ca:	789b      	ldrb	r3, [r3, #2]
 80041cc:	021b      	lsls	r3, r3, #8
 80041ce:	430b      	orrs	r3, r1
 80041d0:	493c      	ldr	r1, [pc, #240]	; (80042c4 <MX_LWIP_Init+0x228>)
 80041d2:	78c9      	ldrb	r1, [r1, #3]
 80041d4:	430b      	orrs	r3, r1
 80041d6:	0a1b      	lsrs	r3, r3, #8
 80041d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80041dc:	431a      	orrs	r2, r3
 80041de:	4b39      	ldr	r3, [pc, #228]	; (80042c4 <MX_LWIP_Init+0x228>)
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	0619      	lsls	r1, r3, #24
 80041e4:	4b37      	ldr	r3, [pc, #220]	; (80042c4 <MX_LWIP_Init+0x228>)
 80041e6:	785b      	ldrb	r3, [r3, #1]
 80041e8:	041b      	lsls	r3, r3, #16
 80041ea:	4319      	orrs	r1, r3
 80041ec:	4b35      	ldr	r3, [pc, #212]	; (80042c4 <MX_LWIP_Init+0x228>)
 80041ee:	789b      	ldrb	r3, [r3, #2]
 80041f0:	021b      	lsls	r3, r3, #8
 80041f2:	430b      	orrs	r3, r1
 80041f4:	4933      	ldr	r1, [pc, #204]	; (80042c4 <MX_LWIP_Init+0x228>)
 80041f6:	78c9      	ldrb	r1, [r1, #3]
 80041f8:	430b      	orrs	r3, r1
 80041fa:	0e1b      	lsrs	r3, r3, #24
 80041fc:	4313      	orrs	r3, r2
 80041fe:	4a34      	ldr	r2, [pc, #208]	; (80042d0 <MX_LWIP_Init+0x234>)
 8004200:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004202:	4b31      	ldr	r3, [pc, #196]	; (80042c8 <MX_LWIP_Init+0x22c>)
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	061a      	lsls	r2, r3, #24
 8004208:	4b2f      	ldr	r3, [pc, #188]	; (80042c8 <MX_LWIP_Init+0x22c>)
 800420a:	785b      	ldrb	r3, [r3, #1]
 800420c:	041b      	lsls	r3, r3, #16
 800420e:	431a      	orrs	r2, r3
 8004210:	4b2d      	ldr	r3, [pc, #180]	; (80042c8 <MX_LWIP_Init+0x22c>)
 8004212:	789b      	ldrb	r3, [r3, #2]
 8004214:	021b      	lsls	r3, r3, #8
 8004216:	4313      	orrs	r3, r2
 8004218:	4a2b      	ldr	r2, [pc, #172]	; (80042c8 <MX_LWIP_Init+0x22c>)
 800421a:	78d2      	ldrb	r2, [r2, #3]
 800421c:	4313      	orrs	r3, r2
 800421e:	061a      	lsls	r2, r3, #24
 8004220:	4b29      	ldr	r3, [pc, #164]	; (80042c8 <MX_LWIP_Init+0x22c>)
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	0619      	lsls	r1, r3, #24
 8004226:	4b28      	ldr	r3, [pc, #160]	; (80042c8 <MX_LWIP_Init+0x22c>)
 8004228:	785b      	ldrb	r3, [r3, #1]
 800422a:	041b      	lsls	r3, r3, #16
 800422c:	4319      	orrs	r1, r3
 800422e:	4b26      	ldr	r3, [pc, #152]	; (80042c8 <MX_LWIP_Init+0x22c>)
 8004230:	789b      	ldrb	r3, [r3, #2]
 8004232:	021b      	lsls	r3, r3, #8
 8004234:	430b      	orrs	r3, r1
 8004236:	4924      	ldr	r1, [pc, #144]	; (80042c8 <MX_LWIP_Init+0x22c>)
 8004238:	78c9      	ldrb	r1, [r1, #3]
 800423a:	430b      	orrs	r3, r1
 800423c:	021b      	lsls	r3, r3, #8
 800423e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004242:	431a      	orrs	r2, r3
 8004244:	4b20      	ldr	r3, [pc, #128]	; (80042c8 <MX_LWIP_Init+0x22c>)
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	0619      	lsls	r1, r3, #24
 800424a:	4b1f      	ldr	r3, [pc, #124]	; (80042c8 <MX_LWIP_Init+0x22c>)
 800424c:	785b      	ldrb	r3, [r3, #1]
 800424e:	041b      	lsls	r3, r3, #16
 8004250:	4319      	orrs	r1, r3
 8004252:	4b1d      	ldr	r3, [pc, #116]	; (80042c8 <MX_LWIP_Init+0x22c>)
 8004254:	789b      	ldrb	r3, [r3, #2]
 8004256:	021b      	lsls	r3, r3, #8
 8004258:	430b      	orrs	r3, r1
 800425a:	491b      	ldr	r1, [pc, #108]	; (80042c8 <MX_LWIP_Init+0x22c>)
 800425c:	78c9      	ldrb	r1, [r1, #3]
 800425e:	430b      	orrs	r3, r1
 8004260:	0a1b      	lsrs	r3, r3, #8
 8004262:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004266:	431a      	orrs	r2, r3
 8004268:	4b17      	ldr	r3, [pc, #92]	; (80042c8 <MX_LWIP_Init+0x22c>)
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	0619      	lsls	r1, r3, #24
 800426e:	4b16      	ldr	r3, [pc, #88]	; (80042c8 <MX_LWIP_Init+0x22c>)
 8004270:	785b      	ldrb	r3, [r3, #1]
 8004272:	041b      	lsls	r3, r3, #16
 8004274:	4319      	orrs	r1, r3
 8004276:	4b14      	ldr	r3, [pc, #80]	; (80042c8 <MX_LWIP_Init+0x22c>)
 8004278:	789b      	ldrb	r3, [r3, #2]
 800427a:	021b      	lsls	r3, r3, #8
 800427c:	430b      	orrs	r3, r1
 800427e:	4912      	ldr	r1, [pc, #72]	; (80042c8 <MX_LWIP_Init+0x22c>)
 8004280:	78c9      	ldrb	r1, [r1, #3]
 8004282:	430b      	orrs	r3, r1
 8004284:	0e1b      	lsrs	r3, r3, #24
 8004286:	4313      	orrs	r3, r2
 8004288:	4a12      	ldr	r2, [pc, #72]	; (80042d4 <MX_LWIP_Init+0x238>)
 800428a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800428c:	4b12      	ldr	r3, [pc, #72]	; (80042d8 <MX_LWIP_Init+0x23c>)
 800428e:	9302      	str	r3, [sp, #8]
 8004290:	4b12      	ldr	r3, [pc, #72]	; (80042dc <MX_LWIP_Init+0x240>)
 8004292:	9301      	str	r3, [sp, #4]
 8004294:	2300      	movs	r3, #0
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	4b0e      	ldr	r3, [pc, #56]	; (80042d4 <MX_LWIP_Init+0x238>)
 800429a:	4a0d      	ldr	r2, [pc, #52]	; (80042d0 <MX_LWIP_Init+0x234>)
 800429c:	490b      	ldr	r1, [pc, #44]	; (80042cc <MX_LWIP_Init+0x230>)
 800429e:	4810      	ldr	r0, [pc, #64]	; (80042e0 <MX_LWIP_Init+0x244>)
 80042a0:	f001 f922 	bl	80054e8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80042a4:	480e      	ldr	r0, [pc, #56]	; (80042e0 <MX_LWIP_Init+0x244>)
 80042a6:	f001 fad1 	bl	800584c <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 80042aa:	480d      	ldr	r0, [pc, #52]	; (80042e0 <MX_LWIP_Init+0x244>)
 80042ac:	f001 fade 	bl	800586c <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80042b0:	490c      	ldr	r1, [pc, #48]	; (80042e4 <MX_LWIP_Init+0x248>)
 80042b2:	480b      	ldr	r0, [pc, #44]	; (80042e0 <MX_LWIP_Init+0x244>)
 80042b4:	f001 fbdc 	bl	8005a70 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80042b8:	bf00      	nop
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	200002e4 	.word	0x200002e4
 80042c4:	200002e8 	.word	0x200002e8
 80042c8:	200002ec 	.word	0x200002ec
 80042cc:	200002d8 	.word	0x200002d8
 80042d0:	200002dc 	.word	0x200002dc
 80042d4:	200002e0 	.word	0x200002e0
 80042d8:	0800eb11 	.word	0x0800eb11
 80042dc:	080045fd 	.word	0x080045fd
 80042e0:	200002a4 	.word	0x200002a4
 80042e4:	080042e9 	.word	0x080042e9

080042e8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <SCB_InvalidateDCache_by_Addr>:
{
 80042fc:	b480      	push	{r7}
 80042fe:	b087      	sub	sp, #28
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800430e:	2320      	movs	r3, #32
 8004310:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004312:	f3bf 8f4f 	dsb	sy
}
 8004316:	bf00      	nop
    while (op_size > 0) {
 8004318:	e00b      	b.n	8004332 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800431a:	4a0d      	ldr	r2, [pc, #52]	; (8004350 <SCB_InvalidateDCache_by_Addr+0x54>)
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	4413      	add	r3, r2
 8004328:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	2b00      	cmp	r3, #0
 8004336:	dcf0      	bgt.n	800431a <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8004338:	f3bf 8f4f 	dsb	sy
}
 800433c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800433e:	f3bf 8f6f 	isb	sy
}
 8004342:	bf00      	nop
}
 8004344:	bf00      	nop
 8004346:	371c      	adds	r7, #28
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	e000ed00 	.word	0xe000ed00

08004354 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800435c:	2300      	movs	r3, #0
 800435e:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004360:	4b40      	ldr	r3, [pc, #256]	; (8004464 <low_level_init+0x110>)
 8004362:	4a41      	ldr	r2, [pc, #260]	; (8004468 <low_level_init+0x114>)
 8004364:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004366:	2300      	movs	r3, #0
 8004368:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800436a:	2380      	movs	r3, #128	; 0x80
 800436c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800436e:	23e1      	movs	r3, #225	; 0xe1
 8004370:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004372:	2300      	movs	r3, #0
 8004374:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004376:	2300      	movs	r3, #0
 8004378:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800437a:	2300      	movs	r3, #0
 800437c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800437e:	4a39      	ldr	r2, [pc, #228]	; (8004464 <low_level_init+0x110>)
 8004380:	f107 0308 	add.w	r3, r7, #8
 8004384:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004386:	4b37      	ldr	r3, [pc, #220]	; (8004464 <low_level_init+0x110>)
 8004388:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800438c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800438e:	4b35      	ldr	r3, [pc, #212]	; (8004464 <low_level_init+0x110>)
 8004390:	4a36      	ldr	r2, [pc, #216]	; (800446c <low_level_init+0x118>)
 8004392:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004394:	4b33      	ldr	r3, [pc, #204]	; (8004464 <low_level_init+0x110>)
 8004396:	4a36      	ldr	r2, [pc, #216]	; (8004470 <low_level_init+0x11c>)
 8004398:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800439a:	4b32      	ldr	r3, [pc, #200]	; (8004464 <low_level_init+0x110>)
 800439c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80043a0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80043a2:	4830      	ldr	r0, [pc, #192]	; (8004464 <low_level_init+0x110>)
 80043a4:	f7fd f8ce 	bl	8001544 <HAL_ETH_Init>
 80043a8:	4603      	mov	r3, r0
 80043aa:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80043ac:	2238      	movs	r2, #56	; 0x38
 80043ae:	2100      	movs	r1, #0
 80043b0:	4830      	ldr	r0, [pc, #192]	; (8004474 <low_level_init+0x120>)
 80043b2:	f00a fe22 	bl	800effa <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80043b6:	4b2f      	ldr	r3, [pc, #188]	; (8004474 <low_level_init+0x120>)
 80043b8:	2221      	movs	r2, #33	; 0x21
 80043ba:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80043bc:	4b2d      	ldr	r3, [pc, #180]	; (8004474 <low_level_init+0x120>)
 80043be:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80043c2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80043c4:	4b2b      	ldr	r3, [pc, #172]	; (8004474 <low_level_init+0x120>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80043ca:	482b      	ldr	r0, [pc, #172]	; (8004478 <low_level_init+0x124>)
 80043cc:	f000 ff54 	bl	8005278 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2206      	movs	r2, #6
 80043d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80043d8:	4b22      	ldr	r3, [pc, #136]	; (8004464 <low_level_init+0x110>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	781a      	ldrb	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80043e4:	4b1f      	ldr	r3, [pc, #124]	; (8004464 <low_level_init+0x110>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	785a      	ldrb	r2, [r3, #1]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80043f0:	4b1c      	ldr	r3, [pc, #112]	; (8004464 <low_level_init+0x110>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	789a      	ldrb	r2, [r3, #2]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80043fc:	4b19      	ldr	r3, [pc, #100]	; (8004464 <low_level_init+0x110>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	78da      	ldrb	r2, [r3, #3]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004408:	4b16      	ldr	r3, [pc, #88]	; (8004464 <low_level_init+0x110>)
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	791a      	ldrb	r2, [r3, #4]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004414:	4b13      	ldr	r3, [pc, #76]	; (8004464 <low_level_init+0x110>)
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	795a      	ldrb	r2, [r3, #5]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004426:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800442e:	f043 030a 	orr.w	r3, r3, #10
 8004432:	b2da      	uxtb	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800443a:	4910      	ldr	r1, [pc, #64]	; (800447c <low_level_init+0x128>)
 800443c:	4810      	ldr	r0, [pc, #64]	; (8004480 <low_level_init+0x12c>)
 800443e:	f7fc fd66 	bl	8000f0e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8004442:	480f      	ldr	r0, [pc, #60]	; (8004480 <low_level_init+0x12c>)
 8004444:	f7fc fd95 	bl	8000f72 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8004448:	7bfb      	ldrb	r3, [r7, #15]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d103      	bne.n	8004456 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 fa32 	bl	80048b8 <ethernet_link_check_state>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 8004454:	e001      	b.n	800445a <low_level_init+0x106>
    Error_Handler();
 8004456:	f7fc fbb5 	bl	8000bc4 <Error_Handler>
}
 800445a:	bf00      	nop
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	20004c7c 	.word	0x20004c7c
 8004468:	40028000 	.word	0x40028000
 800446c:	20000128 	.word	0x20000128
 8004470:	20000088 	.word	0x20000088
 8004474:	20004d2c 	.word	0x20004d2c
 8004478:	08012abc 	.word	0x08012abc
 800447c:	2000000c 	.word	0x2000000c
 8004480:	20004d64 	.word	0x20004d64

08004484 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b092      	sub	sp, #72	; 0x48
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800448e:	2300      	movs	r3, #0
 8004490:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8004492:	2300      	movs	r3, #0
 8004494:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8004496:	2300      	movs	r3, #0
 8004498:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800449c:	f107 030c 	add.w	r3, r7, #12
 80044a0:	2230      	movs	r2, #48	; 0x30
 80044a2:	2100      	movs	r1, #0
 80044a4:	4618      	mov	r0, r3
 80044a6:	f00a fda8 	bl	800effa <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80044aa:	f107 030c 	add.w	r3, r7, #12
 80044ae:	2230      	movs	r2, #48	; 0x30
 80044b0:	2100      	movs	r1, #0
 80044b2:	4618      	mov	r0, r3
 80044b4:	f00a fda1 	bl	800effa <memset>

  for(q = p; q != NULL; q = q->next)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	643b      	str	r3, [r7, #64]	; 0x40
 80044bc:	e045      	b.n	800454a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80044be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044c0:	2b03      	cmp	r3, #3
 80044c2:	d902      	bls.n	80044ca <low_level_output+0x46>
      return ERR_IF;
 80044c4:	f06f 030b 	mvn.w	r3, #11
 80044c8:	e055      	b.n	8004576 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80044ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044cc:	6859      	ldr	r1, [r3, #4]
 80044ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044d0:	4613      	mov	r3, r2
 80044d2:	005b      	lsls	r3, r3, #1
 80044d4:	4413      	add	r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	3348      	adds	r3, #72	; 0x48
 80044da:	443b      	add	r3, r7
 80044dc:	3b3c      	subs	r3, #60	; 0x3c
 80044de:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80044e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044e2:	895b      	ldrh	r3, [r3, #10]
 80044e4:	4619      	mov	r1, r3
 80044e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044e8:	4613      	mov	r3, r2
 80044ea:	005b      	lsls	r3, r3, #1
 80044ec:	4413      	add	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	3348      	adds	r3, #72	; 0x48
 80044f2:	443b      	add	r3, r7
 80044f4:	3b38      	subs	r3, #56	; 0x38
 80044f6:	6019      	str	r1, [r3, #0]

    if(i>0)
 80044f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d011      	beq.n	8004522 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80044fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004500:	1e5a      	subs	r2, r3, #1
 8004502:	f107 000c 	add.w	r0, r7, #12
 8004506:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004508:	460b      	mov	r3, r1
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	440b      	add	r3, r1
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	18c1      	adds	r1, r0, r3
 8004512:	4613      	mov	r3, r2
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	4413      	add	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	3348      	adds	r3, #72	; 0x48
 800451c:	443b      	add	r3, r7
 800451e:	3b34      	subs	r3, #52	; 0x34
 8004520:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004522:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d109      	bne.n	800453e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800452a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800452c:	4613      	mov	r3, r2
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	4413      	add	r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	3348      	adds	r3, #72	; 0x48
 8004536:	443b      	add	r3, r7
 8004538:	3b34      	subs	r3, #52	; 0x34
 800453a:	2200      	movs	r2, #0
 800453c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800453e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004540:	3301      	adds	r3, #1
 8004542:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8004544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	643b      	str	r3, [r7, #64]	; 0x40
 800454a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1b6      	bne.n	80044be <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	891b      	ldrh	r3, [r3, #8]
 8004554:	461a      	mov	r2, r3
 8004556:	4b0a      	ldr	r3, [pc, #40]	; (8004580 <low_level_output+0xfc>)
 8004558:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800455a:	4a09      	ldr	r2, [pc, #36]	; (8004580 <low_level_output+0xfc>)
 800455c:	f107 030c 	add.w	r3, r7, #12
 8004560:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004562:	4a07      	ldr	r2, [pc, #28]	; (8004580 <low_level_output+0xfc>)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8004568:	2214      	movs	r2, #20
 800456a:	4905      	ldr	r1, [pc, #20]	; (8004580 <low_level_output+0xfc>)
 800456c:	4805      	ldr	r0, [pc, #20]	; (8004584 <low_level_output+0x100>)
 800456e:	f7fd f93b 	bl	80017e8 <HAL_ETH_Transmit>

  return errval;
 8004572:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8004576:	4618      	mov	r0, r3
 8004578:	3748      	adds	r7, #72	; 0x48
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	20004d2c 	.word	0x20004d2c
 8004584:	20004c7c 	.word	0x20004c7c

08004588 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004590:	2300      	movs	r3, #0
 8004592:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004594:	4b07      	ldr	r3, [pc, #28]	; (80045b4 <low_level_input+0x2c>)
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d105      	bne.n	80045a8 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800459c:	f107 030c 	add.w	r3, r7, #12
 80045a0:	4619      	mov	r1, r3
 80045a2:	4805      	ldr	r0, [pc, #20]	; (80045b8 <low_level_input+0x30>)
 80045a4:	f7fd f9b4 	bl	8001910 <HAL_ETH_ReadData>
  }

  return p;
 80045a8:	68fb      	ldr	r3, [r7, #12]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	20004c78 	.word	0x20004c78
 80045b8:	20004c7c 	.word	0x20004c7c

080045bc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80045c4:	2300      	movs	r3, #0
 80045c6:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f7ff ffdd 	bl	8004588 <low_level_input>
 80045ce:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00a      	beq.n	80045ec <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	6879      	ldr	r1, [r7, #4]
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	4798      	blx	r3
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d002      	beq.n	80045ec <ethernetif_input+0x30>
      {
        pbuf_free(p);
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f001 fdc2 	bl	8006170 <pbuf_free>
      }
    }
  } while(p!=NULL);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1ea      	bne.n	80045c8 <ethernetif_input+0xc>
}
 80045f2:	bf00      	nop
 80045f4:	bf00      	nop
 80045f6:	3710      	adds	r7, #16
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d106      	bne.n	8004618 <ethernetif_init+0x1c>
 800460a:	4b0e      	ldr	r3, [pc, #56]	; (8004644 <ethernetif_init+0x48>)
 800460c:	f240 127b 	movw	r2, #379	; 0x17b
 8004610:	490d      	ldr	r1, [pc, #52]	; (8004648 <ethernetif_init+0x4c>)
 8004612:	480e      	ldr	r0, [pc, #56]	; (800464c <ethernetif_init+0x50>)
 8004614:	f00a fc52 	bl	800eebc <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2273      	movs	r2, #115	; 0x73
 800461c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2274      	movs	r2, #116	; 0x74
 8004624:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a09      	ldr	r2, [pc, #36]	; (8004650 <ethernetif_init+0x54>)
 800462c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a08      	ldr	r2, [pc, #32]	; (8004654 <ethernetif_init+0x58>)
 8004632:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f7ff fe8d 	bl	8004354 <low_level_init>

  return ERR_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3708      	adds	r7, #8
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	080100cc 	.word	0x080100cc
 8004648:	080100e8 	.word	0x080100e8
 800464c:	080100f8 	.word	0x080100f8
 8004650:	0800cfc9 	.word	0x0800cfc9
 8004654:	08004485 	.word	0x08004485

08004658 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004664:	68f9      	ldr	r1, [r7, #12]
 8004666:	4807      	ldr	r0, [pc, #28]	; (8004684 <pbuf_free_custom+0x2c>)
 8004668:	f000 fee8 	bl	800543c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800466c:	4b06      	ldr	r3, [pc, #24]	; (8004688 <pbuf_free_custom+0x30>)
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d102      	bne.n	800467a <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004674:	4b04      	ldr	r3, [pc, #16]	; (8004688 <pbuf_free_custom+0x30>)
 8004676:	2200      	movs	r2, #0
 8004678:	701a      	strb	r2, [r3, #0]
  }
}
 800467a:	bf00      	nop
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	08012abc 	.word	0x08012abc
 8004688:	20004c78 	.word	0x20004c78

0800468c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004690:	f7fc fd9e 	bl	80011d0 <HAL_GetTick>
 8004694:	4603      	mov	r3, r0
}
 8004696:	4618      	mov	r0, r3
 8004698:	bd80      	pop	{r7, pc}
	...

0800469c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b08e      	sub	sp, #56	; 0x38
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046a8:	2200      	movs	r2, #0
 80046aa:	601a      	str	r2, [r3, #0]
 80046ac:	605a      	str	r2, [r3, #4]
 80046ae:	609a      	str	r2, [r3, #8]
 80046b0:	60da      	str	r2, [r3, #12]
 80046b2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a52      	ldr	r2, [pc, #328]	; (8004804 <HAL_ETH_MspInit+0x168>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	f040 809e 	bne.w	80047fc <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80046c0:	4b51      	ldr	r3, [pc, #324]	; (8004808 <HAL_ETH_MspInit+0x16c>)
 80046c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c4:	4a50      	ldr	r2, [pc, #320]	; (8004808 <HAL_ETH_MspInit+0x16c>)
 80046c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80046ca:	6313      	str	r3, [r2, #48]	; 0x30
 80046cc:	4b4e      	ldr	r3, [pc, #312]	; (8004808 <HAL_ETH_MspInit+0x16c>)
 80046ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046d4:	623b      	str	r3, [r7, #32]
 80046d6:	6a3b      	ldr	r3, [r7, #32]
 80046d8:	4b4b      	ldr	r3, [pc, #300]	; (8004808 <HAL_ETH_MspInit+0x16c>)
 80046da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046dc:	4a4a      	ldr	r2, [pc, #296]	; (8004808 <HAL_ETH_MspInit+0x16c>)
 80046de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046e2:	6313      	str	r3, [r2, #48]	; 0x30
 80046e4:	4b48      	ldr	r3, [pc, #288]	; (8004808 <HAL_ETH_MspInit+0x16c>)
 80046e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046ec:	61fb      	str	r3, [r7, #28]
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	4b45      	ldr	r3, [pc, #276]	; (8004808 <HAL_ETH_MspInit+0x16c>)
 80046f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f4:	4a44      	ldr	r2, [pc, #272]	; (8004808 <HAL_ETH_MspInit+0x16c>)
 80046f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80046fa:	6313      	str	r3, [r2, #48]	; 0x30
 80046fc:	4b42      	ldr	r3, [pc, #264]	; (8004808 <HAL_ETH_MspInit+0x16c>)
 80046fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004700:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004704:	61bb      	str	r3, [r7, #24]
 8004706:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004708:	4b3f      	ldr	r3, [pc, #252]	; (8004808 <HAL_ETH_MspInit+0x16c>)
 800470a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470c:	4a3e      	ldr	r2, [pc, #248]	; (8004808 <HAL_ETH_MspInit+0x16c>)
 800470e:	f043 0304 	orr.w	r3, r3, #4
 8004712:	6313      	str	r3, [r2, #48]	; 0x30
 8004714:	4b3c      	ldr	r3, [pc, #240]	; (8004808 <HAL_ETH_MspInit+0x16c>)
 8004716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004718:	f003 0304 	and.w	r3, r3, #4
 800471c:	617b      	str	r3, [r7, #20]
 800471e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004720:	4b39      	ldr	r3, [pc, #228]	; (8004808 <HAL_ETH_MspInit+0x16c>)
 8004722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004724:	4a38      	ldr	r2, [pc, #224]	; (8004808 <HAL_ETH_MspInit+0x16c>)
 8004726:	f043 0301 	orr.w	r3, r3, #1
 800472a:	6313      	str	r3, [r2, #48]	; 0x30
 800472c:	4b36      	ldr	r3, [pc, #216]	; (8004808 <HAL_ETH_MspInit+0x16c>)
 800472e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004730:	f003 0301 	and.w	r3, r3, #1
 8004734:	613b      	str	r3, [r7, #16]
 8004736:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004738:	4b33      	ldr	r3, [pc, #204]	; (8004808 <HAL_ETH_MspInit+0x16c>)
 800473a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473c:	4a32      	ldr	r2, [pc, #200]	; (8004808 <HAL_ETH_MspInit+0x16c>)
 800473e:	f043 0302 	orr.w	r3, r3, #2
 8004742:	6313      	str	r3, [r2, #48]	; 0x30
 8004744:	4b30      	ldr	r3, [pc, #192]	; (8004808 <HAL_ETH_MspInit+0x16c>)
 8004746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	60fb      	str	r3, [r7, #12]
 800474e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004750:	4b2d      	ldr	r3, [pc, #180]	; (8004808 <HAL_ETH_MspInit+0x16c>)
 8004752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004754:	4a2c      	ldr	r2, [pc, #176]	; (8004808 <HAL_ETH_MspInit+0x16c>)
 8004756:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800475a:	6313      	str	r3, [r2, #48]	; 0x30
 800475c:	4b2a      	ldr	r3, [pc, #168]	; (8004808 <HAL_ETH_MspInit+0x16c>)
 800475e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004764:	60bb      	str	r3, [r7, #8]
 8004766:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004768:	2332      	movs	r3, #50	; 0x32
 800476a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800476c:	2302      	movs	r3, #2
 800476e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004770:	2300      	movs	r3, #0
 8004772:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004774:	2303      	movs	r3, #3
 8004776:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004778:	230b      	movs	r3, #11
 800477a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800477c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004780:	4619      	mov	r1, r3
 8004782:	4822      	ldr	r0, [pc, #136]	; (800480c <HAL_ETH_MspInit+0x170>)
 8004784:	f7fe f8f4 	bl	8002970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004788:	2386      	movs	r3, #134	; 0x86
 800478a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800478c:	2302      	movs	r3, #2
 800478e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004790:	2300      	movs	r3, #0
 8004792:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004794:	2303      	movs	r3, #3
 8004796:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004798:	230b      	movs	r3, #11
 800479a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800479c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047a0:	4619      	mov	r1, r3
 80047a2:	481b      	ldr	r0, [pc, #108]	; (8004810 <HAL_ETH_MspInit+0x174>)
 80047a4:	f7fe f8e4 	bl	8002970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80047a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80047ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047ae:	2302      	movs	r3, #2
 80047b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047b2:	2300      	movs	r3, #0
 80047b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047b6:	2303      	movs	r3, #3
 80047b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80047ba:	230b      	movs	r3, #11
 80047bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80047be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047c2:	4619      	mov	r1, r3
 80047c4:	4813      	ldr	r0, [pc, #76]	; (8004814 <HAL_ETH_MspInit+0x178>)
 80047c6:	f7fe f8d3 	bl	8002970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80047ca:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80047ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047d0:	2302      	movs	r3, #2
 80047d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047d4:	2300      	movs	r3, #0
 80047d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047d8:	2303      	movs	r3, #3
 80047da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80047dc:	230b      	movs	r3, #11
 80047de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80047e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047e4:	4619      	mov	r1, r3
 80047e6:	480c      	ldr	r0, [pc, #48]	; (8004818 <HAL_ETH_MspInit+0x17c>)
 80047e8:	f7fe f8c2 	bl	8002970 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 80047ec:	2200      	movs	r2, #0
 80047ee:	2100      	movs	r1, #0
 80047f0:	203d      	movs	r0, #61	; 0x3d
 80047f2:	f7fc fdf8 	bl	80013e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80047f6:	203d      	movs	r0, #61	; 0x3d
 80047f8:	f7fc fe11 	bl	800141e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80047fc:	bf00      	nop
 80047fe:	3738      	adds	r7, #56	; 0x38
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	40028000 	.word	0x40028000
 8004808:	40023800 	.word	0x40023800
 800480c:	40020800 	.word	0x40020800
 8004810:	40020000 	.word	0x40020000
 8004814:	40020400 	.word	0x40020400
 8004818:	40021800 	.word	0x40021800

0800481c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004820:	4802      	ldr	r0, [pc, #8]	; (800482c <ETH_PHY_IO_Init+0x10>)
 8004822:	f7fd fc43 	bl	80020ac <HAL_ETH_SetMDIOClockRange>

  return 0;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	bd80      	pop	{r7, pc}
 800482c:	20004c7c 	.word	0x20004c7c

08004830 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004830:	b480      	push	{r7}
 8004832:	af00      	add	r7, sp, #0
  return 0;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	68f9      	ldr	r1, [r7, #12]
 8004852:	4807      	ldr	r0, [pc, #28]	; (8004870 <ETH_PHY_IO_ReadReg+0x30>)
 8004854:	f7fd fa84 	bl	8001d60 <HAL_ETH_ReadPHYRegister>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d002      	beq.n	8004864 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800485e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004862:	e000      	b.n	8004866 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	20004c7c 	.word	0x20004c7c

08004874 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68ba      	ldr	r2, [r7, #8]
 8004884:	68f9      	ldr	r1, [r7, #12]
 8004886:	4807      	ldr	r0, [pc, #28]	; (80048a4 <ETH_PHY_IO_WriteReg+0x30>)
 8004888:	f7fd fab5 	bl	8001df6 <HAL_ETH_WritePHYRegister>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d002      	beq.n	8004898 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8004892:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004896:	e000      	b.n	800489a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	20004c7c 	.word	0x20004c7c

080048a8 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80048ac:	f7fc fc90 	bl	80011d0 <HAL_GetTick>
 80048b0:	4603      	mov	r3, r0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	bd80      	pop	{r7, pc}
	...

080048b8 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b0a0      	sub	sp, #128	; 0x80
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80048c0:	f107 030c 	add.w	r3, r7, #12
 80048c4:	2264      	movs	r2, #100	; 0x64
 80048c6:	2100      	movs	r1, #0
 80048c8:	4618      	mov	r0, r3
 80048ca:	f00a fb96 	bl	800effa <memset>
  int32_t PHYLinkState = 0;
 80048ce:	2300      	movs	r3, #0
 80048d0:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80048d2:	2300      	movs	r3, #0
 80048d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80048d6:	2300      	movs	r3, #0
 80048d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80048da:	2300      	movs	r3, #0
 80048dc:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80048de:	483a      	ldr	r0, [pc, #232]	; (80049c8 <ethernet_link_check_state+0x110>)
 80048e0:	f7fc fb94 	bl	800100c <LAN8742_GetLinkState>
 80048e4:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80048ec:	089b      	lsrs	r3, r3, #2
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00c      	beq.n	8004912 <ethernet_link_check_state+0x5a>
 80048f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	dc09      	bgt.n	8004912 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 80048fe:	4833      	ldr	r0, [pc, #204]	; (80049cc <ethernet_link_check_state+0x114>)
 8004900:	f7fc ff19 	bl	8001736 <HAL_ETH_Stop>
    netif_set_down(netif);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f001 f81d 	bl	8005944 <netif_set_down>
    netif_set_link_down(netif);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f001 f880 	bl	8005a10 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8004910:	e055      	b.n	80049be <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004918:	f003 0304 	and.w	r3, r3, #4
 800491c:	2b00      	cmp	r3, #0
 800491e:	d14e      	bne.n	80049be <ethernet_link_check_state+0x106>
 8004920:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004922:	2b01      	cmp	r3, #1
 8004924:	dd4b      	ble.n	80049be <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8004926:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004928:	3b02      	subs	r3, #2
 800492a:	2b03      	cmp	r3, #3
 800492c:	d82a      	bhi.n	8004984 <ethernet_link_check_state+0xcc>
 800492e:	a201      	add	r2, pc, #4	; (adr r2, 8004934 <ethernet_link_check_state+0x7c>)
 8004930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004934:	08004945 	.word	0x08004945
 8004938:	08004957 	.word	0x08004957
 800493c:	08004967 	.word	0x08004967
 8004940:	08004977 	.word	0x08004977
      duplex = ETH_FULLDUPLEX_MODE;
 8004944:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004948:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800494a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800494e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004950:	2301      	movs	r3, #1
 8004952:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004954:	e017      	b.n	8004986 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004956:	2300      	movs	r3, #0
 8004958:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800495a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800495e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004960:	2301      	movs	r3, #1
 8004962:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004964:	e00f      	b.n	8004986 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8004966:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800496a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800496c:	2300      	movs	r3, #0
 800496e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004970:	2301      	movs	r3, #1
 8004972:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004974:	e007      	b.n	8004986 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004976:	2300      	movs	r3, #0
 8004978:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800497a:	2300      	movs	r3, #0
 800497c:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800497e:	2301      	movs	r3, #1
 8004980:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004982:	e000      	b.n	8004986 <ethernet_link_check_state+0xce>
      break;
 8004984:	bf00      	nop
    if(linkchanged)
 8004986:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004988:	2b00      	cmp	r3, #0
 800498a:	d018      	beq.n	80049be <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800498c:	f107 030c 	add.w	r3, r7, #12
 8004990:	4619      	mov	r1, r3
 8004992:	480e      	ldr	r0, [pc, #56]	; (80049cc <ethernet_link_check_state+0x114>)
 8004994:	f7fd fa78 	bl	8001e88 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004998:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800499a:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800499c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800499e:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80049a0:	f107 030c 	add.w	r3, r7, #12
 80049a4:	4619      	mov	r1, r3
 80049a6:	4809      	ldr	r0, [pc, #36]	; (80049cc <ethernet_link_check_state+0x114>)
 80049a8:	f7fd fb65 	bl	8002076 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80049ac:	4807      	ldr	r0, [pc, #28]	; (80049cc <ethernet_link_check_state+0x114>)
 80049ae:	f7fc fe63 	bl	8001678 <HAL_ETH_Start>
      netif_set_up(netif);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 ff5a 	bl	800586c <netif_set_up>
      netif_set_link_up(netif);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 fff5 	bl	80059a8 <netif_set_link_up>
}
 80049be:	bf00      	nop
 80049c0:	3780      	adds	r7, #128	; 0x80
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	20004d64 	.word	0x20004d64
 80049cc:	20004c7c 	.word	0x20004c7c

080049d0 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b086      	sub	sp, #24
 80049d4:	af02      	add	r7, sp, #8
 80049d6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80049d8:	4812      	ldr	r0, [pc, #72]	; (8004a24 <HAL_ETH_RxAllocateCallback+0x54>)
 80049da:	f000 fcc1 	bl	8005360 <memp_malloc_pool>
 80049de:	60f8      	str	r0, [r7, #12]
  if (p)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d014      	beq.n	8004a10 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f103 0220 	add.w	r2, r3, #32
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4a0d      	ldr	r2, [pc, #52]	; (8004a28 <HAL_ETH_RxAllocateCallback+0x58>)
 80049f4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80049fe:	9201      	str	r2, [sp, #4]
 8004a00:	9300      	str	r3, [sp, #0]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2241      	movs	r2, #65	; 0x41
 8004a06:	2100      	movs	r1, #0
 8004a08:	2000      	movs	r0, #0
 8004a0a:	f001 f9f7 	bl	8005dfc <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004a0e:	e005      	b.n	8004a1c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004a10:	4b06      	ldr	r3, [pc, #24]	; (8004a2c <HAL_ETH_RxAllocateCallback+0x5c>)
 8004a12:	2201      	movs	r2, #1
 8004a14:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	601a      	str	r2, [r3, #0]
}
 8004a1c:	bf00      	nop
 8004a1e:	3710      	adds	r7, #16
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	08012abc 	.word	0x08012abc
 8004a28:	08004659 	.word	0x08004659
 8004a2c:	20004c78 	.word	0x20004c78

08004a30 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b088      	sub	sp, #32
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
 8004a3c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8004a46:	2300      	movs	r3, #0
 8004a48:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	3b20      	subs	r3, #32
 8004a4e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	2200      	movs	r2, #0
 8004a54:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	887a      	ldrh	r2, [r7, #2]
 8004a60:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d103      	bne.n	8004a72 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	69fa      	ldr	r2, [r7, #28]
 8004a6e:	601a      	str	r2, [r3, #0]
 8004a70:	e003      	b.n	8004a7a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	69fa      	ldr	r2, [r7, #28]
 8004a78:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	69fa      	ldr	r2, [r7, #28]
 8004a7e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	61fb      	str	r3, [r7, #28]
 8004a86:	e009      	b.n	8004a9c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	891a      	ldrh	r2, [r3, #8]
 8004a8c:	887b      	ldrh	r3, [r7, #2]
 8004a8e:	4413      	add	r3, r2
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	61fb      	str	r3, [r7, #28]
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1f2      	bne.n	8004a88 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8004aa2:	887b      	ldrh	r3, [r7, #2]
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7ff fc28 	bl	80042fc <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8004aac:	bf00      	nop
 8004aae:	3720      	adds	r7, #32
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	4603      	mov	r3, r0
 8004abc:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8004abe:	88fb      	ldrh	r3, [r7, #6]
 8004ac0:	021b      	lsls	r3, r3, #8
 8004ac2:	b21a      	sxth	r2, r3
 8004ac4:	88fb      	ldrh	r3, [r7, #6]
 8004ac6:	0a1b      	lsrs	r3, r3, #8
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	b21b      	sxth	r3, r3
 8004acc:	4313      	orrs	r3, r2
 8004ace:	b21b      	sxth	r3, r3
 8004ad0:	b29b      	uxth	r3, r3
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr

08004ade <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b083      	sub	sp, #12
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	061a      	lsls	r2, r3, #24
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	021b      	lsls	r3, r3, #8
 8004aee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004af2:	431a      	orrs	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	0a1b      	lsrs	r3, r3, #8
 8004af8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004afc:	431a      	orrs	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	0e1b      	lsrs	r3, r3, #24
 8004b02:	4313      	orrs	r3, r2
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8004b16:	2300      	movs	r3, #0
 8004b18:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8004b1a:	f000 f8d5 	bl	8004cc8 <mem_init>
  memp_init();
 8004b1e:	f000 fbdb 	bl	80052d8 <memp_init>
  pbuf_init();
  netif_init();
 8004b22:	f000 fcd9 	bl	80054d8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8004b26:	f007 f8f9 	bl	800bd1c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8004b2a:	f001 fe51 	bl	80067d0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8004b2e:	f007 f86b 	bl	800bc08 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8004b32:	bf00      	nop
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
	...

08004b3c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	4603      	mov	r3, r0
 8004b44:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8004b46:	4b05      	ldr	r3, [pc, #20]	; (8004b5c <ptr_to_mem+0x20>)
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	88fb      	ldrh	r3, [r7, #6]
 8004b4c:	4413      	add	r3, r2
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	200075b0 	.word	0x200075b0

08004b60 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8004b68:	4b05      	ldr	r3, [pc, #20]	; (8004b80 <mem_to_ptr+0x20>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	b29b      	uxth	r3, r3
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	370c      	adds	r7, #12
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	200075b0 	.word	0x200075b0

08004b84 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8004b84:	b590      	push	{r4, r7, lr}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004b8c:	4b45      	ldr	r3, [pc, #276]	; (8004ca4 <plug_holes+0x120>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d206      	bcs.n	8004ba4 <plug_holes+0x20>
 8004b96:	4b44      	ldr	r3, [pc, #272]	; (8004ca8 <plug_holes+0x124>)
 8004b98:	f240 12df 	movw	r2, #479	; 0x1df
 8004b9c:	4943      	ldr	r1, [pc, #268]	; (8004cac <plug_holes+0x128>)
 8004b9e:	4844      	ldr	r0, [pc, #272]	; (8004cb0 <plug_holes+0x12c>)
 8004ba0:	f00a f98c 	bl	800eebc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004ba4:	4b43      	ldr	r3, [pc, #268]	; (8004cb4 <plug_holes+0x130>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d306      	bcc.n	8004bbc <plug_holes+0x38>
 8004bae:	4b3e      	ldr	r3, [pc, #248]	; (8004ca8 <plug_holes+0x124>)
 8004bb0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004bb4:	4940      	ldr	r1, [pc, #256]	; (8004cb8 <plug_holes+0x134>)
 8004bb6:	483e      	ldr	r0, [pc, #248]	; (8004cb0 <plug_holes+0x12c>)
 8004bb8:	f00a f980 	bl	800eebc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	791b      	ldrb	r3, [r3, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d006      	beq.n	8004bd2 <plug_holes+0x4e>
 8004bc4:	4b38      	ldr	r3, [pc, #224]	; (8004ca8 <plug_holes+0x124>)
 8004bc6:	f240 12e1 	movw	r2, #481	; 0x1e1
 8004bca:	493c      	ldr	r1, [pc, #240]	; (8004cbc <plug_holes+0x138>)
 8004bcc:	4838      	ldr	r0, [pc, #224]	; (8004cb0 <plug_holes+0x12c>)
 8004bce:	f00a f975 	bl	800eebc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	881b      	ldrh	r3, [r3, #0]
 8004bd6:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004bda:	d906      	bls.n	8004bea <plug_holes+0x66>
 8004bdc:	4b32      	ldr	r3, [pc, #200]	; (8004ca8 <plug_holes+0x124>)
 8004bde:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8004be2:	4937      	ldr	r1, [pc, #220]	; (8004cc0 <plug_holes+0x13c>)
 8004be4:	4832      	ldr	r0, [pc, #200]	; (8004cb0 <plug_holes+0x12c>)
 8004be6:	f00a f969 	bl	800eebc <iprintf>

  nmem = ptr_to_mem(mem->next);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	881b      	ldrh	r3, [r3, #0]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7ff ffa4 	bl	8004b3c <ptr_to_mem>
 8004bf4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d024      	beq.n	8004c48 <plug_holes+0xc4>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	791b      	ldrb	r3, [r3, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d120      	bne.n	8004c48 <plug_holes+0xc4>
 8004c06:	4b2b      	ldr	r3, [pc, #172]	; (8004cb4 <plug_holes+0x130>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d01b      	beq.n	8004c48 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004c10:	4b2c      	ldr	r3, [pc, #176]	; (8004cc4 <plug_holes+0x140>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d102      	bne.n	8004c20 <plug_holes+0x9c>
      lfree = mem;
 8004c1a:	4a2a      	ldr	r2, [pc, #168]	; (8004cc4 <plug_holes+0x140>)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	881a      	ldrh	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	881b      	ldrh	r3, [r3, #0]
 8004c2c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004c30:	d00a      	beq.n	8004c48 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	881b      	ldrh	r3, [r3, #0]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7ff ff80 	bl	8004b3c <ptr_to_mem>
 8004c3c:	4604      	mov	r4, r0
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f7ff ff8e 	bl	8004b60 <mem_to_ptr>
 8004c44:	4603      	mov	r3, r0
 8004c46:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	885b      	ldrh	r3, [r3, #2]
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f7ff ff75 	bl	8004b3c <ptr_to_mem>
 8004c52:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d01f      	beq.n	8004c9c <plug_holes+0x118>
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	791b      	ldrb	r3, [r3, #4]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d11b      	bne.n	8004c9c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004c64:	4b17      	ldr	r3, [pc, #92]	; (8004cc4 <plug_holes+0x140>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d102      	bne.n	8004c74 <plug_holes+0xf0>
      lfree = pmem;
 8004c6e:	4a15      	ldr	r2, [pc, #84]	; (8004cc4 <plug_holes+0x140>)
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	881a      	ldrh	r2, [r3, #0]
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	881b      	ldrh	r3, [r3, #0]
 8004c80:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004c84:	d00a      	beq.n	8004c9c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	881b      	ldrh	r3, [r3, #0]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7ff ff56 	bl	8004b3c <ptr_to_mem>
 8004c90:	4604      	mov	r4, r0
 8004c92:	68b8      	ldr	r0, [r7, #8]
 8004c94:	f7ff ff64 	bl	8004b60 <mem_to_ptr>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8004c9c:	bf00      	nop
 8004c9e:	3714      	adds	r7, #20
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd90      	pop	{r4, r7, pc}
 8004ca4:	200075b0 	.word	0x200075b0
 8004ca8:	08010120 	.word	0x08010120
 8004cac:	08010150 	.word	0x08010150
 8004cb0:	08010168 	.word	0x08010168
 8004cb4:	200075b4 	.word	0x200075b4
 8004cb8:	08010190 	.word	0x08010190
 8004cbc:	080101ac 	.word	0x080101ac
 8004cc0:	080101c8 	.word	0x080101c8
 8004cc4:	200075b8 	.word	0x200075b8

08004cc8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004cce:	4b18      	ldr	r3, [pc, #96]	; (8004d30 <mem_init+0x68>)
 8004cd0:	3303      	adds	r3, #3
 8004cd2:	f023 0303 	bic.w	r3, r3, #3
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	4b16      	ldr	r3, [pc, #88]	; (8004d34 <mem_init+0x6c>)
 8004cda:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004cdc:	4b15      	ldr	r3, [pc, #84]	; (8004d34 <mem_init+0x6c>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8004ce8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8004cf6:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8004cfa:	f7ff ff1f 	bl	8004b3c <ptr_to_mem>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	4a0d      	ldr	r2, [pc, #52]	; (8004d38 <mem_init+0x70>)
 8004d02:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8004d04:	4b0c      	ldr	r3, [pc, #48]	; (8004d38 <mem_init+0x70>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004d0c:	4b0a      	ldr	r3, [pc, #40]	; (8004d38 <mem_init+0x70>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8004d14:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004d16:	4b08      	ldr	r3, [pc, #32]	; (8004d38 <mem_init+0x70>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8004d1e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004d20:	4b04      	ldr	r3, [pc, #16]	; (8004d34 <mem_init+0x6c>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a05      	ldr	r2, [pc, #20]	; (8004d3c <mem_init+0x74>)
 8004d26:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004d28:	bf00      	nop
 8004d2a:	3708      	adds	r7, #8
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	20004d9c 	.word	0x20004d9c
 8004d34:	200075b0 	.word	0x200075b0
 8004d38:	200075b4 	.word	0x200075b4
 8004d3c:	200075b8 	.word	0x200075b8

08004d40 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f7ff ff09 	bl	8004b60 <mem_to_ptr>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	881b      	ldrh	r3, [r3, #0]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7ff fef0 	bl	8004b3c <ptr_to_mem>
 8004d5c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	885b      	ldrh	r3, [r3, #2]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7ff feea 	bl	8004b3c <ptr_to_mem>
 8004d68:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	881b      	ldrh	r3, [r3, #0]
 8004d6e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004d72:	d818      	bhi.n	8004da6 <mem_link_valid+0x66>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	885b      	ldrh	r3, [r3, #2]
 8004d78:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004d7c:	d813      	bhi.n	8004da6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004d82:	8afa      	ldrh	r2, [r7, #22]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d004      	beq.n	8004d92 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	881b      	ldrh	r3, [r3, #0]
 8004d8c:	8afa      	ldrh	r2, [r7, #22]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d109      	bne.n	8004da6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004d92:	4b08      	ldr	r3, [pc, #32]	; (8004db4 <mem_link_valid+0x74>)
 8004d94:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d006      	beq.n	8004daa <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	885b      	ldrh	r3, [r3, #2]
 8004da0:	8afa      	ldrh	r2, [r7, #22]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d001      	beq.n	8004daa <mem_link_valid+0x6a>
    return 0;
 8004da6:	2300      	movs	r3, #0
 8004da8:	e000      	b.n	8004dac <mem_link_valid+0x6c>
  }
  return 1;
 8004daa:	2301      	movs	r3, #1
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3718      	adds	r7, #24
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	200075b4 	.word	0x200075b4

08004db8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d04c      	beq.n	8004e60 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f003 0303 	and.w	r3, r3, #3
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d007      	beq.n	8004de0 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8004dd0:	4b25      	ldr	r3, [pc, #148]	; (8004e68 <mem_free+0xb0>)
 8004dd2:	f240 2273 	movw	r2, #627	; 0x273
 8004dd6:	4925      	ldr	r1, [pc, #148]	; (8004e6c <mem_free+0xb4>)
 8004dd8:	4825      	ldr	r0, [pc, #148]	; (8004e70 <mem_free+0xb8>)
 8004dda:	f00a f86f 	bl	800eebc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004dde:	e040      	b.n	8004e62 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	3b08      	subs	r3, #8
 8004de4:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004de6:	4b23      	ldr	r3, [pc, #140]	; (8004e74 <mem_free+0xbc>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d306      	bcc.n	8004dfe <mem_free+0x46>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f103 020c 	add.w	r2, r3, #12
 8004df6:	4b20      	ldr	r3, [pc, #128]	; (8004e78 <mem_free+0xc0>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d907      	bls.n	8004e0e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8004dfe:	4b1a      	ldr	r3, [pc, #104]	; (8004e68 <mem_free+0xb0>)
 8004e00:	f240 227f 	movw	r2, #639	; 0x27f
 8004e04:	491d      	ldr	r1, [pc, #116]	; (8004e7c <mem_free+0xc4>)
 8004e06:	481a      	ldr	r0, [pc, #104]	; (8004e70 <mem_free+0xb8>)
 8004e08:	f00a f858 	bl	800eebc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004e0c:	e029      	b.n	8004e62 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	791b      	ldrb	r3, [r3, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d107      	bne.n	8004e26 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8004e16:	4b14      	ldr	r3, [pc, #80]	; (8004e68 <mem_free+0xb0>)
 8004e18:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8004e1c:	4918      	ldr	r1, [pc, #96]	; (8004e80 <mem_free+0xc8>)
 8004e1e:	4814      	ldr	r0, [pc, #80]	; (8004e70 <mem_free+0xb8>)
 8004e20:	f00a f84c 	bl	800eebc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004e24:	e01d      	b.n	8004e62 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f7ff ff8a 	bl	8004d40 <mem_link_valid>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d107      	bne.n	8004e42 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8004e32:	4b0d      	ldr	r3, [pc, #52]	; (8004e68 <mem_free+0xb0>)
 8004e34:	f240 2295 	movw	r2, #661	; 0x295
 8004e38:	4912      	ldr	r1, [pc, #72]	; (8004e84 <mem_free+0xcc>)
 8004e3a:	480d      	ldr	r0, [pc, #52]	; (8004e70 <mem_free+0xb8>)
 8004e3c:	f00a f83e 	bl	800eebc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004e40:	e00f      	b.n	8004e62 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2200      	movs	r2, #0
 8004e46:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004e48:	4b0f      	ldr	r3, [pc, #60]	; (8004e88 <mem_free+0xd0>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d202      	bcs.n	8004e58 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004e52:	4a0d      	ldr	r2, [pc, #52]	; (8004e88 <mem_free+0xd0>)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f7ff fe93 	bl	8004b84 <plug_holes>
 8004e5e:	e000      	b.n	8004e62 <mem_free+0xaa>
    return;
 8004e60:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	08010120 	.word	0x08010120
 8004e6c:	080101f4 	.word	0x080101f4
 8004e70:	08010168 	.word	0x08010168
 8004e74:	200075b0 	.word	0x200075b0
 8004e78:	200075b4 	.word	0x200075b4
 8004e7c:	08010218 	.word	0x08010218
 8004e80:	08010234 	.word	0x08010234
 8004e84:	0801025c 	.word	0x0801025c
 8004e88:	200075b8 	.word	0x200075b8

08004e8c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b088      	sub	sp, #32
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	460b      	mov	r3, r1
 8004e96:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8004e98:	887b      	ldrh	r3, [r7, #2]
 8004e9a:	3303      	adds	r3, #3
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	f023 0303 	bic.w	r3, r3, #3
 8004ea2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8004ea4:	8bfb      	ldrh	r3, [r7, #30]
 8004ea6:	2b0b      	cmp	r3, #11
 8004ea8:	d801      	bhi.n	8004eae <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004eaa:	230c      	movs	r3, #12
 8004eac:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8004eae:	8bfb      	ldrh	r3, [r7, #30]
 8004eb0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004eb4:	d803      	bhi.n	8004ebe <mem_trim+0x32>
 8004eb6:	8bfa      	ldrh	r2, [r7, #30]
 8004eb8:	887b      	ldrh	r3, [r7, #2]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d201      	bcs.n	8004ec2 <mem_trim+0x36>
    return NULL;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	e0cc      	b.n	800505c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004ec2:	4b68      	ldr	r3, [pc, #416]	; (8005064 <mem_trim+0x1d8>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d304      	bcc.n	8004ed6 <mem_trim+0x4a>
 8004ecc:	4b66      	ldr	r3, [pc, #408]	; (8005068 <mem_trim+0x1dc>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d306      	bcc.n	8004ee4 <mem_trim+0x58>
 8004ed6:	4b65      	ldr	r3, [pc, #404]	; (800506c <mem_trim+0x1e0>)
 8004ed8:	f240 22d1 	movw	r2, #721	; 0x2d1
 8004edc:	4964      	ldr	r1, [pc, #400]	; (8005070 <mem_trim+0x1e4>)
 8004ede:	4865      	ldr	r0, [pc, #404]	; (8005074 <mem_trim+0x1e8>)
 8004ee0:	f009 ffec 	bl	800eebc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004ee4:	4b5f      	ldr	r3, [pc, #380]	; (8005064 <mem_trim+0x1d8>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d304      	bcc.n	8004ef8 <mem_trim+0x6c>
 8004eee:	4b5e      	ldr	r3, [pc, #376]	; (8005068 <mem_trim+0x1dc>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d301      	bcc.n	8004efc <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	e0af      	b.n	800505c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	3b08      	subs	r3, #8
 8004f00:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8004f02:	69b8      	ldr	r0, [r7, #24]
 8004f04:	f7ff fe2c 	bl	8004b60 <mem_to_ptr>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	881a      	ldrh	r2, [r3, #0]
 8004f10:	8afb      	ldrh	r3, [r7, #22]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	3b08      	subs	r3, #8
 8004f18:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004f1a:	8bfa      	ldrh	r2, [r7, #30]
 8004f1c:	8abb      	ldrh	r3, [r7, #20]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d906      	bls.n	8004f30 <mem_trim+0xa4>
 8004f22:	4b52      	ldr	r3, [pc, #328]	; (800506c <mem_trim+0x1e0>)
 8004f24:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8004f28:	4953      	ldr	r1, [pc, #332]	; (8005078 <mem_trim+0x1ec>)
 8004f2a:	4852      	ldr	r0, [pc, #328]	; (8005074 <mem_trim+0x1e8>)
 8004f2c:	f009 ffc6 	bl	800eebc <iprintf>
  if (newsize > size) {
 8004f30:	8bfa      	ldrh	r2, [r7, #30]
 8004f32:	8abb      	ldrh	r3, [r7, #20]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d901      	bls.n	8004f3c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	e08f      	b.n	800505c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8004f3c:	8bfa      	ldrh	r2, [r7, #30]
 8004f3e:	8abb      	ldrh	r3, [r7, #20]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d101      	bne.n	8004f48 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	e089      	b.n	800505c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	881b      	ldrh	r3, [r3, #0]
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f7ff fdf5 	bl	8004b3c <ptr_to_mem>
 8004f52:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	791b      	ldrb	r3, [r3, #4]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d13f      	bne.n	8004fdc <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	881b      	ldrh	r3, [r3, #0]
 8004f60:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004f64:	d106      	bne.n	8004f74 <mem_trim+0xe8>
 8004f66:	4b41      	ldr	r3, [pc, #260]	; (800506c <mem_trim+0x1e0>)
 8004f68:	f240 22f5 	movw	r2, #757	; 0x2f5
 8004f6c:	4943      	ldr	r1, [pc, #268]	; (800507c <mem_trim+0x1f0>)
 8004f6e:	4841      	ldr	r0, [pc, #260]	; (8005074 <mem_trim+0x1e8>)
 8004f70:	f009 ffa4 	bl	800eebc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	881b      	ldrh	r3, [r3, #0]
 8004f78:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004f7a:	8afa      	ldrh	r2, [r7, #22]
 8004f7c:	8bfb      	ldrh	r3, [r7, #30]
 8004f7e:	4413      	add	r3, r2
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	3308      	adds	r3, #8
 8004f84:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8004f86:	4b3e      	ldr	r3, [pc, #248]	; (8005080 <mem_trim+0x1f4>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d106      	bne.n	8004f9e <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8004f90:	89fb      	ldrh	r3, [r7, #14]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7ff fdd2 	bl	8004b3c <ptr_to_mem>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	4a39      	ldr	r2, [pc, #228]	; (8005080 <mem_trim+0x1f4>)
 8004f9c:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8004f9e:	89fb      	ldrh	r3, [r7, #14]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7ff fdcb 	bl	8004b3c <ptr_to_mem>
 8004fa6:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	2200      	movs	r2, #0
 8004fac:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	89ba      	ldrh	r2, [r7, #12]
 8004fb2:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	8afa      	ldrh	r2, [r7, #22]
 8004fb8:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	89fa      	ldrh	r2, [r7, #14]
 8004fbe:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	881b      	ldrh	r3, [r3, #0]
 8004fc4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004fc8:	d047      	beq.n	800505a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	881b      	ldrh	r3, [r3, #0]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7ff fdb4 	bl	8004b3c <ptr_to_mem>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	89fb      	ldrh	r3, [r7, #14]
 8004fd8:	8053      	strh	r3, [r2, #2]
 8004fda:	e03e      	b.n	800505a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004fdc:	8bfb      	ldrh	r3, [r7, #30]
 8004fde:	f103 0214 	add.w	r2, r3, #20
 8004fe2:	8abb      	ldrh	r3, [r7, #20]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d838      	bhi.n	800505a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004fe8:	8afa      	ldrh	r2, [r7, #22]
 8004fea:	8bfb      	ldrh	r3, [r7, #30]
 8004fec:	4413      	add	r3, r2
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	3308      	adds	r3, #8
 8004ff2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	881b      	ldrh	r3, [r3, #0]
 8004ff8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004ffc:	d106      	bne.n	800500c <mem_trim+0x180>
 8004ffe:	4b1b      	ldr	r3, [pc, #108]	; (800506c <mem_trim+0x1e0>)
 8005000:	f240 3216 	movw	r2, #790	; 0x316
 8005004:	491d      	ldr	r1, [pc, #116]	; (800507c <mem_trim+0x1f0>)
 8005006:	481b      	ldr	r0, [pc, #108]	; (8005074 <mem_trim+0x1e8>)
 8005008:	f009 ff58 	bl	800eebc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800500c:	89fb      	ldrh	r3, [r7, #14]
 800500e:	4618      	mov	r0, r3
 8005010:	f7ff fd94 	bl	8004b3c <ptr_to_mem>
 8005014:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8005016:	4b1a      	ldr	r3, [pc, #104]	; (8005080 <mem_trim+0x1f4>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	429a      	cmp	r2, r3
 800501e:	d202      	bcs.n	8005026 <mem_trim+0x19a>
      lfree = mem2;
 8005020:	4a17      	ldr	r2, [pc, #92]	; (8005080 <mem_trim+0x1f4>)
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	2200      	movs	r2, #0
 800502a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	881a      	ldrh	r2, [r3, #0]
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	8afa      	ldrh	r2, [r7, #22]
 8005038:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	89fa      	ldrh	r2, [r7, #14]
 800503e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	881b      	ldrh	r3, [r3, #0]
 8005044:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005048:	d007      	beq.n	800505a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	881b      	ldrh	r3, [r3, #0]
 800504e:	4618      	mov	r0, r3
 8005050:	f7ff fd74 	bl	8004b3c <ptr_to_mem>
 8005054:	4602      	mov	r2, r0
 8005056:	89fb      	ldrh	r3, [r7, #14]
 8005058:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800505a:	687b      	ldr	r3, [r7, #4]
}
 800505c:	4618      	mov	r0, r3
 800505e:	3720      	adds	r7, #32
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	200075b0 	.word	0x200075b0
 8005068:	200075b4 	.word	0x200075b4
 800506c:	08010120 	.word	0x08010120
 8005070:	08010290 	.word	0x08010290
 8005074:	08010168 	.word	0x08010168
 8005078:	080102a8 	.word	0x080102a8
 800507c:	080102c8 	.word	0x080102c8
 8005080:	200075b8 	.word	0x200075b8

08005084 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b088      	sub	sp, #32
 8005088:	af00      	add	r7, sp, #0
 800508a:	4603      	mov	r3, r0
 800508c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800508e:	88fb      	ldrh	r3, [r7, #6]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d101      	bne.n	8005098 <mem_malloc+0x14>
    return NULL;
 8005094:	2300      	movs	r3, #0
 8005096:	e0d9      	b.n	800524c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8005098:	88fb      	ldrh	r3, [r7, #6]
 800509a:	3303      	adds	r3, #3
 800509c:	b29b      	uxth	r3, r3
 800509e:	f023 0303 	bic.w	r3, r3, #3
 80050a2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80050a4:	8bbb      	ldrh	r3, [r7, #28]
 80050a6:	2b0b      	cmp	r3, #11
 80050a8:	d801      	bhi.n	80050ae <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80050aa:	230c      	movs	r3, #12
 80050ac:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80050ae:	8bbb      	ldrh	r3, [r7, #28]
 80050b0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80050b4:	d803      	bhi.n	80050be <mem_malloc+0x3a>
 80050b6:	8bba      	ldrh	r2, [r7, #28]
 80050b8:	88fb      	ldrh	r3, [r7, #6]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d201      	bcs.n	80050c2 <mem_malloc+0x3e>
    return NULL;
 80050be:	2300      	movs	r3, #0
 80050c0:	e0c4      	b.n	800524c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80050c2:	4b64      	ldr	r3, [pc, #400]	; (8005254 <mem_malloc+0x1d0>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7ff fd4a 	bl	8004b60 <mem_to_ptr>
 80050cc:	4603      	mov	r3, r0
 80050ce:	83fb      	strh	r3, [r7, #30]
 80050d0:	e0b4      	b.n	800523c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80050d2:	8bfb      	ldrh	r3, [r7, #30]
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7ff fd31 	bl	8004b3c <ptr_to_mem>
 80050da:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	791b      	ldrb	r3, [r3, #4]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f040 80a4 	bne.w	800522e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	881b      	ldrh	r3, [r3, #0]
 80050ea:	461a      	mov	r2, r3
 80050ec:	8bfb      	ldrh	r3, [r7, #30]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	f1a3 0208 	sub.w	r2, r3, #8
 80050f4:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80050f6:	429a      	cmp	r2, r3
 80050f8:	f0c0 8099 	bcc.w	800522e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	881b      	ldrh	r3, [r3, #0]
 8005100:	461a      	mov	r2, r3
 8005102:	8bfb      	ldrh	r3, [r7, #30]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	f1a3 0208 	sub.w	r2, r3, #8
 800510a:	8bbb      	ldrh	r3, [r7, #28]
 800510c:	3314      	adds	r3, #20
 800510e:	429a      	cmp	r2, r3
 8005110:	d333      	bcc.n	800517a <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8005112:	8bfa      	ldrh	r2, [r7, #30]
 8005114:	8bbb      	ldrh	r3, [r7, #28]
 8005116:	4413      	add	r3, r2
 8005118:	b29b      	uxth	r3, r3
 800511a:	3308      	adds	r3, #8
 800511c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800511e:	8a7b      	ldrh	r3, [r7, #18]
 8005120:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005124:	d106      	bne.n	8005134 <mem_malloc+0xb0>
 8005126:	4b4c      	ldr	r3, [pc, #304]	; (8005258 <mem_malloc+0x1d4>)
 8005128:	f240 3287 	movw	r2, #903	; 0x387
 800512c:	494b      	ldr	r1, [pc, #300]	; (800525c <mem_malloc+0x1d8>)
 800512e:	484c      	ldr	r0, [pc, #304]	; (8005260 <mem_malloc+0x1dc>)
 8005130:	f009 fec4 	bl	800eebc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8005134:	8a7b      	ldrh	r3, [r7, #18]
 8005136:	4618      	mov	r0, r3
 8005138:	f7ff fd00 	bl	8004b3c <ptr_to_mem>
 800513c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	881a      	ldrh	r2, [r3, #0]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	8bfa      	ldrh	r2, [r7, #30]
 8005150:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	8a7a      	ldrh	r2, [r7, #18]
 8005156:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	2201      	movs	r2, #1
 800515c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	881b      	ldrh	r3, [r3, #0]
 8005162:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005166:	d00b      	beq.n	8005180 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	881b      	ldrh	r3, [r3, #0]
 800516c:	4618      	mov	r0, r3
 800516e:	f7ff fce5 	bl	8004b3c <ptr_to_mem>
 8005172:	4602      	mov	r2, r0
 8005174:	8a7b      	ldrh	r3, [r7, #18]
 8005176:	8053      	strh	r3, [r2, #2]
 8005178:	e002      	b.n	8005180 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	2201      	movs	r2, #1
 800517e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8005180:	4b34      	ldr	r3, [pc, #208]	; (8005254 <mem_malloc+0x1d0>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	429a      	cmp	r2, r3
 8005188:	d127      	bne.n	80051da <mem_malloc+0x156>
          struct mem *cur = lfree;
 800518a:	4b32      	ldr	r3, [pc, #200]	; (8005254 <mem_malloc+0x1d0>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8005190:	e005      	b.n	800519e <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	881b      	ldrh	r3, [r3, #0]
 8005196:	4618      	mov	r0, r3
 8005198:	f7ff fcd0 	bl	8004b3c <ptr_to_mem>
 800519c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	791b      	ldrb	r3, [r3, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d004      	beq.n	80051b0 <mem_malloc+0x12c>
 80051a6:	4b2f      	ldr	r3, [pc, #188]	; (8005264 <mem_malloc+0x1e0>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	69ba      	ldr	r2, [r7, #24]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d1f0      	bne.n	8005192 <mem_malloc+0x10e>
          }
          lfree = cur;
 80051b0:	4a28      	ldr	r2, [pc, #160]	; (8005254 <mem_malloc+0x1d0>)
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80051b6:	4b27      	ldr	r3, [pc, #156]	; (8005254 <mem_malloc+0x1d0>)
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	4b2a      	ldr	r3, [pc, #168]	; (8005264 <mem_malloc+0x1e0>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d00b      	beq.n	80051da <mem_malloc+0x156>
 80051c2:	4b24      	ldr	r3, [pc, #144]	; (8005254 <mem_malloc+0x1d0>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	791b      	ldrb	r3, [r3, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d006      	beq.n	80051da <mem_malloc+0x156>
 80051cc:	4b22      	ldr	r3, [pc, #136]	; (8005258 <mem_malloc+0x1d4>)
 80051ce:	f240 32b5 	movw	r2, #949	; 0x3b5
 80051d2:	4925      	ldr	r1, [pc, #148]	; (8005268 <mem_malloc+0x1e4>)
 80051d4:	4822      	ldr	r0, [pc, #136]	; (8005260 <mem_malloc+0x1dc>)
 80051d6:	f009 fe71 	bl	800eebc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80051da:	8bba      	ldrh	r2, [r7, #28]
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	4413      	add	r3, r2
 80051e0:	3308      	adds	r3, #8
 80051e2:	4a20      	ldr	r2, [pc, #128]	; (8005264 <mem_malloc+0x1e0>)
 80051e4:	6812      	ldr	r2, [r2, #0]
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d906      	bls.n	80051f8 <mem_malloc+0x174>
 80051ea:	4b1b      	ldr	r3, [pc, #108]	; (8005258 <mem_malloc+0x1d4>)
 80051ec:	f240 32b9 	movw	r2, #953	; 0x3b9
 80051f0:	491e      	ldr	r1, [pc, #120]	; (800526c <mem_malloc+0x1e8>)
 80051f2:	481b      	ldr	r0, [pc, #108]	; (8005260 <mem_malloc+0x1dc>)
 80051f4:	f009 fe62 	bl	800eebc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	f003 0303 	and.w	r3, r3, #3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d006      	beq.n	8005210 <mem_malloc+0x18c>
 8005202:	4b15      	ldr	r3, [pc, #84]	; (8005258 <mem_malloc+0x1d4>)
 8005204:	f240 32bb 	movw	r2, #955	; 0x3bb
 8005208:	4919      	ldr	r1, [pc, #100]	; (8005270 <mem_malloc+0x1ec>)
 800520a:	4815      	ldr	r0, [pc, #84]	; (8005260 <mem_malloc+0x1dc>)
 800520c:	f009 fe56 	bl	800eebc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	f003 0303 	and.w	r3, r3, #3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d006      	beq.n	8005228 <mem_malloc+0x1a4>
 800521a:	4b0f      	ldr	r3, [pc, #60]	; (8005258 <mem_malloc+0x1d4>)
 800521c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8005220:	4914      	ldr	r1, [pc, #80]	; (8005274 <mem_malloc+0x1f0>)
 8005222:	480f      	ldr	r0, [pc, #60]	; (8005260 <mem_malloc+0x1dc>)
 8005224:	f009 fe4a 	bl	800eebc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	3308      	adds	r3, #8
 800522c:	e00e      	b.n	800524c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800522e:	8bfb      	ldrh	r3, [r7, #30]
 8005230:	4618      	mov	r0, r3
 8005232:	f7ff fc83 	bl	8004b3c <ptr_to_mem>
 8005236:	4603      	mov	r3, r0
 8005238:	881b      	ldrh	r3, [r3, #0]
 800523a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800523c:	8bfa      	ldrh	r2, [r7, #30]
 800523e:	8bbb      	ldrh	r3, [r7, #28]
 8005240:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8005244:	429a      	cmp	r2, r3
 8005246:	f4ff af44 	bcc.w	80050d2 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3720      	adds	r7, #32
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	200075b8 	.word	0x200075b8
 8005258:	08010120 	.word	0x08010120
 800525c:	080102c8 	.word	0x080102c8
 8005260:	08010168 	.word	0x08010168
 8005264:	200075b4 	.word	0x200075b4
 8005268:	080102dc 	.word	0x080102dc
 800526c:	080102f8 	.word	0x080102f8
 8005270:	08010328 	.word	0x08010328
 8005274:	08010358 	.word	0x08010358

08005278 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	2200      	movs	r2, #0
 8005286:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	3303      	adds	r3, #3
 800528e:	f023 0303 	bic.w	r3, r3, #3
 8005292:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005294:	2300      	movs	r3, #0
 8005296:	60fb      	str	r3, [r7, #12]
 8005298:	e011      	b.n	80052be <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	881b      	ldrh	r3, [r3, #0]
 80052b0:	461a      	mov	r2, r3
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	4413      	add	r3, r2
 80052b6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	3301      	adds	r3, #1
 80052bc:	60fb      	str	r3, [r7, #12]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	885b      	ldrh	r3, [r3, #2]
 80052c2:	461a      	mov	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	4293      	cmp	r3, r2
 80052c8:	dbe7      	blt.n	800529a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80052ca:	bf00      	nop
 80052cc:	bf00      	nop
 80052ce:	3714      	adds	r7, #20
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80052de:	2300      	movs	r3, #0
 80052e0:	80fb      	strh	r3, [r7, #6]
 80052e2:	e009      	b.n	80052f8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80052e4:	88fb      	ldrh	r3, [r7, #6]
 80052e6:	4a08      	ldr	r2, [pc, #32]	; (8005308 <memp_init+0x30>)
 80052e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052ec:	4618      	mov	r0, r3
 80052ee:	f7ff ffc3 	bl	8005278 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80052f2:	88fb      	ldrh	r3, [r7, #6]
 80052f4:	3301      	adds	r3, #1
 80052f6:	80fb      	strh	r3, [r7, #6]
 80052f8:	88fb      	ldrh	r3, [r7, #6]
 80052fa:	2b08      	cmp	r3, #8
 80052fc:	d9f2      	bls.n	80052e4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80052fe:	bf00      	nop
 8005300:	bf00      	nop
 8005302:	3708      	adds	r7, #8
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	08012b34 	.word	0x08012b34

0800530c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d012      	beq.n	8005348 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	6812      	ldr	r2, [r2, #0]
 800532a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f003 0303 	and.w	r3, r3, #3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d006      	beq.n	8005344 <do_memp_malloc_pool+0x38>
 8005336:	4b07      	ldr	r3, [pc, #28]	; (8005354 <do_memp_malloc_pool+0x48>)
 8005338:	f44f 728c 	mov.w	r2, #280	; 0x118
 800533c:	4906      	ldr	r1, [pc, #24]	; (8005358 <do_memp_malloc_pool+0x4c>)
 800533e:	4807      	ldr	r0, [pc, #28]	; (800535c <do_memp_malloc_pool+0x50>)
 8005340:	f009 fdbc 	bl	800eebc <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	e000      	b.n	800534a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3710      	adds	r7, #16
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	0801037c 	.word	0x0801037c
 8005358:	080103ac 	.word	0x080103ac
 800535c:	080103d0 	.word	0x080103d0

08005360 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d106      	bne.n	800537c <memp_malloc_pool+0x1c>
 800536e:	4b0a      	ldr	r3, [pc, #40]	; (8005398 <memp_malloc_pool+0x38>)
 8005370:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8005374:	4909      	ldr	r1, [pc, #36]	; (800539c <memp_malloc_pool+0x3c>)
 8005376:	480a      	ldr	r0, [pc, #40]	; (80053a0 <memp_malloc_pool+0x40>)
 8005378:	f009 fda0 	bl	800eebc <iprintf>
  if (desc == NULL) {
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <memp_malloc_pool+0x26>
    return NULL;
 8005382:	2300      	movs	r3, #0
 8005384:	e003      	b.n	800538e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f7ff ffc0 	bl	800530c <do_memp_malloc_pool>
 800538c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800538e:	4618      	mov	r0, r3
 8005390:	3708      	adds	r7, #8
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	0801037c 	.word	0x0801037c
 800539c:	080103f8 	.word	0x080103f8
 80053a0:	080103d0 	.word	0x080103d0

080053a4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	4603      	mov	r3, r0
 80053ac:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80053ae:	79fb      	ldrb	r3, [r7, #7]
 80053b0:	2b08      	cmp	r3, #8
 80053b2:	d908      	bls.n	80053c6 <memp_malloc+0x22>
 80053b4:	4b0a      	ldr	r3, [pc, #40]	; (80053e0 <memp_malloc+0x3c>)
 80053b6:	f240 1257 	movw	r2, #343	; 0x157
 80053ba:	490a      	ldr	r1, [pc, #40]	; (80053e4 <memp_malloc+0x40>)
 80053bc:	480a      	ldr	r0, [pc, #40]	; (80053e8 <memp_malloc+0x44>)
 80053be:	f009 fd7d 	bl	800eebc <iprintf>
 80053c2:	2300      	movs	r3, #0
 80053c4:	e008      	b.n	80053d8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80053c6:	79fb      	ldrb	r3, [r7, #7]
 80053c8:	4a08      	ldr	r2, [pc, #32]	; (80053ec <memp_malloc+0x48>)
 80053ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7ff ff9c 	bl	800530c <do_memp_malloc_pool>
 80053d4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80053d6:	68fb      	ldr	r3, [r7, #12]
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3710      	adds	r7, #16
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	0801037c 	.word	0x0801037c
 80053e4:	0801040c 	.word	0x0801040c
 80053e8:	080103d0 	.word	0x080103d0
 80053ec:	08012b34 	.word	0x08012b34

080053f0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	f003 0303 	and.w	r3, r3, #3
 8005400:	2b00      	cmp	r3, #0
 8005402:	d006      	beq.n	8005412 <do_memp_free_pool+0x22>
 8005404:	4b0a      	ldr	r3, [pc, #40]	; (8005430 <do_memp_free_pool+0x40>)
 8005406:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800540a:	490a      	ldr	r1, [pc, #40]	; (8005434 <do_memp_free_pool+0x44>)
 800540c:	480a      	ldr	r0, [pc, #40]	; (8005438 <do_memp_free_pool+0x48>)
 800540e:	f009 fd55 	bl	800eebc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8005428:	bf00      	nop
 800542a:	3710      	adds	r7, #16
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	0801037c 	.word	0x0801037c
 8005434:	0801042c 	.word	0x0801042c
 8005438:	080103d0 	.word	0x080103d0

0800543c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d106      	bne.n	800545a <memp_free_pool+0x1e>
 800544c:	4b0a      	ldr	r3, [pc, #40]	; (8005478 <memp_free_pool+0x3c>)
 800544e:	f240 1295 	movw	r2, #405	; 0x195
 8005452:	490a      	ldr	r1, [pc, #40]	; (800547c <memp_free_pool+0x40>)
 8005454:	480a      	ldr	r0, [pc, #40]	; (8005480 <memp_free_pool+0x44>)
 8005456:	f009 fd31 	bl	800eebc <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d007      	beq.n	8005470 <memp_free_pool+0x34>
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d004      	beq.n	8005470 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8005466:	6839      	ldr	r1, [r7, #0]
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f7ff ffc1 	bl	80053f0 <do_memp_free_pool>
 800546e:	e000      	b.n	8005472 <memp_free_pool+0x36>
    return;
 8005470:	bf00      	nop
}
 8005472:	3708      	adds	r7, #8
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	0801037c 	.word	0x0801037c
 800547c:	080103f8 	.word	0x080103f8
 8005480:	080103d0 	.word	0x080103d0

08005484 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
 800548a:	4603      	mov	r3, r0
 800548c:	6039      	str	r1, [r7, #0]
 800548e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8005490:	79fb      	ldrb	r3, [r7, #7]
 8005492:	2b08      	cmp	r3, #8
 8005494:	d907      	bls.n	80054a6 <memp_free+0x22>
 8005496:	4b0c      	ldr	r3, [pc, #48]	; (80054c8 <memp_free+0x44>)
 8005498:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800549c:	490b      	ldr	r1, [pc, #44]	; (80054cc <memp_free+0x48>)
 800549e:	480c      	ldr	r0, [pc, #48]	; (80054d0 <memp_free+0x4c>)
 80054a0:	f009 fd0c 	bl	800eebc <iprintf>
 80054a4:	e00c      	b.n	80054c0 <memp_free+0x3c>

  if (mem == NULL) {
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d008      	beq.n	80054be <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80054ac:	79fb      	ldrb	r3, [r7, #7]
 80054ae:	4a09      	ldr	r2, [pc, #36]	; (80054d4 <memp_free+0x50>)
 80054b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054b4:	6839      	ldr	r1, [r7, #0]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7ff ff9a 	bl	80053f0 <do_memp_free_pool>
 80054bc:	e000      	b.n	80054c0 <memp_free+0x3c>
    return;
 80054be:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80054c0:	3708      	adds	r7, #8
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	0801037c 	.word	0x0801037c
 80054cc:	0801044c 	.word	0x0801044c
 80054d0:	080103d0 	.word	0x080103d0
 80054d4:	08012b34 	.word	0x08012b34

080054d8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80054d8:	b480      	push	{r7}
 80054da:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80054dc:	bf00      	nop
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
	...

080054e8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
 80054f4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d108      	bne.n	800550e <netif_add+0x26>
 80054fc:	4b57      	ldr	r3, [pc, #348]	; (800565c <netif_add+0x174>)
 80054fe:	f240 1227 	movw	r2, #295	; 0x127
 8005502:	4957      	ldr	r1, [pc, #348]	; (8005660 <netif_add+0x178>)
 8005504:	4857      	ldr	r0, [pc, #348]	; (8005664 <netif_add+0x17c>)
 8005506:	f009 fcd9 	bl	800eebc <iprintf>
 800550a:	2300      	movs	r3, #0
 800550c:	e0a2      	b.n	8005654 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800550e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005510:	2b00      	cmp	r3, #0
 8005512:	d108      	bne.n	8005526 <netif_add+0x3e>
 8005514:	4b51      	ldr	r3, [pc, #324]	; (800565c <netif_add+0x174>)
 8005516:	f44f 7294 	mov.w	r2, #296	; 0x128
 800551a:	4953      	ldr	r1, [pc, #332]	; (8005668 <netif_add+0x180>)
 800551c:	4851      	ldr	r0, [pc, #324]	; (8005664 <netif_add+0x17c>)
 800551e:	f009 fccd 	bl	800eebc <iprintf>
 8005522:	2300      	movs	r3, #0
 8005524:	e096      	b.n	8005654 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d101      	bne.n	8005530 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800552c:	4b4f      	ldr	r3, [pc, #316]	; (800566c <netif_add+0x184>)
 800552e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d101      	bne.n	800553a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8005536:	4b4d      	ldr	r3, [pc, #308]	; (800566c <netif_add+0x184>)
 8005538:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8005540:	4b4a      	ldr	r3, [pc, #296]	; (800566c <netif_add+0x184>)
 8005542:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	4a45      	ldr	r2, [pc, #276]	; (8005670 <netif_add+0x188>)
 800555a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6a3a      	ldr	r2, [r7, #32]
 8005574:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8005576:	4b3f      	ldr	r3, [pc, #252]	; (8005674 <netif_add+0x18c>)
 8005578:	781a      	ldrb	r2, [r3, #0]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005584:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	68b9      	ldr	r1, [r7, #8]
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	f000 f913 	bl	80057b8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8005592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	4798      	blx	r3
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d001      	beq.n	80055a2 <netif_add+0xba>
    return NULL;
 800559e:	2300      	movs	r3, #0
 80055a0:	e058      	b.n	8005654 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80055a8:	2bff      	cmp	r3, #255	; 0xff
 80055aa:	d103      	bne.n	80055b4 <netif_add+0xcc>
        netif->num = 0;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80055b4:	2300      	movs	r3, #0
 80055b6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80055b8:	4b2f      	ldr	r3, [pc, #188]	; (8005678 <netif_add+0x190>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	617b      	str	r3, [r7, #20]
 80055be:	e02b      	b.n	8005618 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d106      	bne.n	80055d6 <netif_add+0xee>
 80055c8:	4b24      	ldr	r3, [pc, #144]	; (800565c <netif_add+0x174>)
 80055ca:	f240 128b 	movw	r2, #395	; 0x18b
 80055ce:	492b      	ldr	r1, [pc, #172]	; (800567c <netif_add+0x194>)
 80055d0:	4824      	ldr	r0, [pc, #144]	; (8005664 <netif_add+0x17c>)
 80055d2:	f009 fc73 	bl	800eebc <iprintf>
        num_netifs++;
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	3301      	adds	r3, #1
 80055da:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	2bff      	cmp	r3, #255	; 0xff
 80055e0:	dd06      	ble.n	80055f0 <netif_add+0x108>
 80055e2:	4b1e      	ldr	r3, [pc, #120]	; (800565c <netif_add+0x174>)
 80055e4:	f240 128d 	movw	r2, #397	; 0x18d
 80055e8:	4925      	ldr	r1, [pc, #148]	; (8005680 <netif_add+0x198>)
 80055ea:	481e      	ldr	r0, [pc, #120]	; (8005664 <netif_add+0x17c>)
 80055ec:	f009 fc66 	bl	800eebc <iprintf>
        if (netif2->num == netif->num) {
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d108      	bne.n	8005612 <netif_add+0x12a>
          netif->num++;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005606:	3301      	adds	r3, #1
 8005608:	b2da      	uxtb	r2, r3
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8005610:	e005      	b.n	800561e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	617b      	str	r3, [r7, #20]
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1d0      	bne.n	80055c0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d1be      	bne.n	80055a2 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800562a:	2bfe      	cmp	r3, #254	; 0xfe
 800562c:	d103      	bne.n	8005636 <netif_add+0x14e>
    netif_num = 0;
 800562e:	4b11      	ldr	r3, [pc, #68]	; (8005674 <netif_add+0x18c>)
 8005630:	2200      	movs	r2, #0
 8005632:	701a      	strb	r2, [r3, #0]
 8005634:	e006      	b.n	8005644 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800563c:	3301      	adds	r3, #1
 800563e:	b2da      	uxtb	r2, r3
 8005640:	4b0c      	ldr	r3, [pc, #48]	; (8005674 <netif_add+0x18c>)
 8005642:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8005644:	4b0c      	ldr	r3, [pc, #48]	; (8005678 <netif_add+0x190>)
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800564c:	4a0a      	ldr	r2, [pc, #40]	; (8005678 <netif_add+0x190>)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8005652:	68fb      	ldr	r3, [r7, #12]
}
 8005654:	4618      	mov	r0, r3
 8005656:	3718      	adds	r7, #24
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	08010468 	.word	0x08010468
 8005660:	080104fc 	.word	0x080104fc
 8005664:	080104b8 	.word	0x080104b8
 8005668:	08010518 	.word	0x08010518
 800566c:	08012b98 	.word	0x08012b98
 8005670:	08005a93 	.word	0x08005a93
 8005674:	2000a4b0 	.word	0x2000a4b0
 8005678:	2000a4a8 	.word	0x2000a4a8
 800567c:	0801053c 	.word	0x0801053c
 8005680:	08010550 	.word	0x08010550

08005684 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800568e:	6839      	ldr	r1, [r7, #0]
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f002 fbe5 	bl	8007e60 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8005696:	6839      	ldr	r1, [r7, #0]
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f007 f819 	bl	800c6d0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800569e:	bf00      	nop
 80056a0:	3708      	adds	r7, #8
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
	...

080056a8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b086      	sub	sp, #24
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d106      	bne.n	80056c8 <netif_do_set_ipaddr+0x20>
 80056ba:	4b1d      	ldr	r3, [pc, #116]	; (8005730 <netif_do_set_ipaddr+0x88>)
 80056bc:	f240 12cb 	movw	r2, #459	; 0x1cb
 80056c0:	491c      	ldr	r1, [pc, #112]	; (8005734 <netif_do_set_ipaddr+0x8c>)
 80056c2:	481d      	ldr	r0, [pc, #116]	; (8005738 <netif_do_set_ipaddr+0x90>)
 80056c4:	f009 fbfa 	bl	800eebc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d106      	bne.n	80056dc <netif_do_set_ipaddr+0x34>
 80056ce:	4b18      	ldr	r3, [pc, #96]	; (8005730 <netif_do_set_ipaddr+0x88>)
 80056d0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80056d4:	4917      	ldr	r1, [pc, #92]	; (8005734 <netif_do_set_ipaddr+0x8c>)
 80056d6:	4818      	ldr	r0, [pc, #96]	; (8005738 <netif_do_set_ipaddr+0x90>)
 80056d8:	f009 fbf0 	bl	800eebc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	3304      	adds	r3, #4
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d01c      	beq.n	8005724 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	3304      	adds	r3, #4
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80056fa:	f107 0314 	add.w	r3, r7, #20
 80056fe:	4619      	mov	r1, r3
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f7ff ffbf 	bl	8005684 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d002      	beq.n	8005712 <netif_do_set_ipaddr+0x6a>
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	e000      	b.n	8005714 <netif_do_set_ipaddr+0x6c>
 8005712:	2300      	movs	r3, #0
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8005718:	2101      	movs	r1, #1
 800571a:	68f8      	ldr	r0, [r7, #12]
 800571c:	f000 f8d2 	bl	80058c4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8005720:	2301      	movs	r3, #1
 8005722:	e000      	b.n	8005726 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3718      	adds	r7, #24
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	08010468 	.word	0x08010468
 8005734:	08010580 	.word	0x08010580
 8005738:	080104b8 	.word	0x080104b8

0800573c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800573c:	b480      	push	{r7}
 800573e:	b085      	sub	sp, #20
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	3308      	adds	r3, #8
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	429a      	cmp	r2, r3
 8005754:	d00a      	beq.n	800576c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d002      	beq.n	8005762 <netif_do_set_netmask+0x26>
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	e000      	b.n	8005764 <netif_do_set_netmask+0x28>
 8005762:	2300      	movs	r3, #0
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8005768:	2301      	movs	r3, #1
 800576a:	e000      	b.n	800576e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3714      	adds	r7, #20
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr

0800577a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800577a:	b480      	push	{r7}
 800577c:	b085      	sub	sp, #20
 800577e:	af00      	add	r7, sp, #0
 8005780:	60f8      	str	r0, [r7, #12]
 8005782:	60b9      	str	r1, [r7, #8]
 8005784:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	330c      	adds	r3, #12
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	429a      	cmp	r2, r3
 8005792:	d00a      	beq.n	80057aa <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d002      	beq.n	80057a0 <netif_do_set_gw+0x26>
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	e000      	b.n	80057a2 <netif_do_set_gw+0x28>
 80057a0:	2300      	movs	r3, #0
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80057a6:	2301      	movs	r3, #1
 80057a8:	e000      	b.n	80057ac <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3714      	adds	r7, #20
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b088      	sub	sp, #32
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
 80057c4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80057c6:	2300      	movs	r3, #0
 80057c8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80057ca:	2300      	movs	r3, #0
 80057cc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d101      	bne.n	80057d8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80057d4:	4b1c      	ldr	r3, [pc, #112]	; (8005848 <netif_set_addr+0x90>)
 80057d6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d101      	bne.n	80057e2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80057de:	4b1a      	ldr	r3, [pc, #104]	; (8005848 <netif_set_addr+0x90>)
 80057e0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d101      	bne.n	80057ec <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80057e8:	4b17      	ldr	r3, [pc, #92]	; (8005848 <netif_set_addr+0x90>)
 80057ea:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d003      	beq.n	80057fa <netif_set_addr+0x42>
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <netif_set_addr+0x46>
 80057fa:	2301      	movs	r3, #1
 80057fc:	e000      	b.n	8005800 <netif_set_addr+0x48>
 80057fe:	2300      	movs	r3, #0
 8005800:	617b      	str	r3, [r7, #20]
  if (remove) {
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d006      	beq.n	8005816 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005808:	f107 0310 	add.w	r3, r7, #16
 800580c:	461a      	mov	r2, r3
 800580e:	68b9      	ldr	r1, [r7, #8]
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f7ff ff49 	bl	80056a8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8005816:	69fa      	ldr	r2, [r7, #28]
 8005818:	6879      	ldr	r1, [r7, #4]
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f7ff ff8e 	bl	800573c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8005820:	69ba      	ldr	r2, [r7, #24]
 8005822:	6839      	ldr	r1, [r7, #0]
 8005824:	68f8      	ldr	r0, [r7, #12]
 8005826:	f7ff ffa8 	bl	800577a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d106      	bne.n	800583e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005830:	f107 0310 	add.w	r3, r7, #16
 8005834:	461a      	mov	r2, r3
 8005836:	68b9      	ldr	r1, [r7, #8]
 8005838:	68f8      	ldr	r0, [r7, #12]
 800583a:	f7ff ff35 	bl	80056a8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800583e:	bf00      	nop
 8005840:	3720      	adds	r7, #32
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	08012b98 	.word	0x08012b98

0800584c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8005854:	4a04      	ldr	r2, [pc, #16]	; (8005868 <netif_set_default+0x1c>)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800585a:	bf00      	nop
 800585c:	370c      	adds	r7, #12
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	2000a4ac 	.word	0x2000a4ac

0800586c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d107      	bne.n	800588a <netif_set_up+0x1e>
 800587a:	4b0f      	ldr	r3, [pc, #60]	; (80058b8 <netif_set_up+0x4c>)
 800587c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8005880:	490e      	ldr	r1, [pc, #56]	; (80058bc <netif_set_up+0x50>)
 8005882:	480f      	ldr	r0, [pc, #60]	; (80058c0 <netif_set_up+0x54>)
 8005884:	f009 fb1a 	bl	800eebc <iprintf>
 8005888:	e013      	b.n	80058b2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005890:	f003 0301 	and.w	r3, r3, #1
 8005894:	2b00      	cmp	r3, #0
 8005896:	d10c      	bne.n	80058b2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800589e:	f043 0301 	orr.w	r3, r3, #1
 80058a2:	b2da      	uxtb	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80058aa:	2103      	movs	r1, #3
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 f809 	bl	80058c4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80058b2:	3708      	adds	r7, #8
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	08010468 	.word	0x08010468
 80058bc:	080105f0 	.word	0x080105f0
 80058c0:	080104b8 	.word	0x080104b8

080058c4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	460b      	mov	r3, r1
 80058ce:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d106      	bne.n	80058e4 <netif_issue_reports+0x20>
 80058d6:	4b18      	ldr	r3, [pc, #96]	; (8005938 <netif_issue_reports+0x74>)
 80058d8:	f240 326d 	movw	r2, #877	; 0x36d
 80058dc:	4917      	ldr	r1, [pc, #92]	; (800593c <netif_issue_reports+0x78>)
 80058de:	4818      	ldr	r0, [pc, #96]	; (8005940 <netif_issue_reports+0x7c>)
 80058e0:	f009 faec 	bl	800eebc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80058ea:	f003 0304 	and.w	r3, r3, #4
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d01e      	beq.n	8005930 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80058f8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d017      	beq.n	8005930 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005900:	78fb      	ldrb	r3, [r7, #3]
 8005902:	f003 0301 	and.w	r3, r3, #1
 8005906:	2b00      	cmp	r3, #0
 8005908:	d013      	beq.n	8005932 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	3304      	adds	r3, #4
 800590e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00e      	beq.n	8005932 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800591a:	f003 0308 	and.w	r3, r3, #8
 800591e:	2b00      	cmp	r3, #0
 8005920:	d007      	beq.n	8005932 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	3304      	adds	r3, #4
 8005926:	4619      	mov	r1, r3
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f007 fe3b 	bl	800d5a4 <etharp_request>
 800592e:	e000      	b.n	8005932 <netif_issue_reports+0x6e>
    return;
 8005930:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8005932:	3708      	adds	r7, #8
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	08010468 	.word	0x08010468
 800593c:	0801060c 	.word	0x0801060c
 8005940:	080104b8 	.word	0x080104b8

08005944 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d107      	bne.n	8005962 <netif_set_down+0x1e>
 8005952:	4b12      	ldr	r3, [pc, #72]	; (800599c <netif_set_down+0x58>)
 8005954:	f240 329b 	movw	r2, #923	; 0x39b
 8005958:	4911      	ldr	r1, [pc, #68]	; (80059a0 <netif_set_down+0x5c>)
 800595a:	4812      	ldr	r0, [pc, #72]	; (80059a4 <netif_set_down+0x60>)
 800595c:	f009 faae 	bl	800eebc <iprintf>
 8005960:	e019      	b.n	8005996 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	2b00      	cmp	r3, #0
 800596e:	d012      	beq.n	8005996 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005976:	f023 0301 	bic.w	r3, r3, #1
 800597a:	b2da      	uxtb	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005988:	f003 0308 	and.w	r3, r3, #8
 800598c:	2b00      	cmp	r3, #0
 800598e:	d002      	beq.n	8005996 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f007 f9c5 	bl	800cd20 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8005996:	3708      	adds	r7, #8
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	08010468 	.word	0x08010468
 80059a0:	08010630 	.word	0x08010630
 80059a4:	080104b8 	.word	0x080104b8

080059a8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d107      	bne.n	80059c6 <netif_set_link_up+0x1e>
 80059b6:	4b13      	ldr	r3, [pc, #76]	; (8005a04 <netif_set_link_up+0x5c>)
 80059b8:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80059bc:	4912      	ldr	r1, [pc, #72]	; (8005a08 <netif_set_link_up+0x60>)
 80059be:	4813      	ldr	r0, [pc, #76]	; (8005a0c <netif_set_link_up+0x64>)
 80059c0:	f009 fa7c 	bl	800eebc <iprintf>
 80059c4:	e01b      	b.n	80059fe <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80059cc:	f003 0304 	and.w	r3, r3, #4
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d114      	bne.n	80059fe <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80059da:	f043 0304 	orr.w	r3, r3, #4
 80059de:	b2da      	uxtb	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80059e6:	2103      	movs	r1, #3
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f7ff ff6b 	bl	80058c4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	69db      	ldr	r3, [r3, #28]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d003      	beq.n	80059fe <netif_set_link_up+0x56>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80059fe:	3708      	adds	r7, #8
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	08010468 	.word	0x08010468
 8005a08:	08010650 	.word	0x08010650
 8005a0c:	080104b8 	.word	0x080104b8

08005a10 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d107      	bne.n	8005a2e <netif_set_link_down+0x1e>
 8005a1e:	4b11      	ldr	r3, [pc, #68]	; (8005a64 <netif_set_link_down+0x54>)
 8005a20:	f240 4206 	movw	r2, #1030	; 0x406
 8005a24:	4910      	ldr	r1, [pc, #64]	; (8005a68 <netif_set_link_down+0x58>)
 8005a26:	4811      	ldr	r0, [pc, #68]	; (8005a6c <netif_set_link_down+0x5c>)
 8005a28:	f009 fa48 	bl	800eebc <iprintf>
 8005a2c:	e017      	b.n	8005a5e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005a34:	f003 0304 	and.w	r3, r3, #4
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d010      	beq.n	8005a5e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005a42:	f023 0304 	bic.w	r3, r3, #4
 8005a46:	b2da      	uxtb	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	69db      	ldr	r3, [r3, #28]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d003      	beq.n	8005a5e <netif_set_link_down+0x4e>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	69db      	ldr	r3, [r3, #28]
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8005a5e:	3708      	adds	r7, #8
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	08010468 	.word	0x08010468
 8005a68:	08010674 	.word	0x08010674
 8005a6c:	080104b8 	.word	0x080104b8

08005a70 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d002      	beq.n	8005a86 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	683a      	ldr	r2, [r7, #0]
 8005a84:	61da      	str	r2, [r3, #28]
  }
}
 8005a86:	bf00      	nop
 8005a88:	370c      	adds	r7, #12
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr

08005a92 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8005a92:	b480      	push	{r7}
 8005a94:	b085      	sub	sp, #20
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	60f8      	str	r0, [r7, #12]
 8005a9a:	60b9      	str	r1, [r7, #8]
 8005a9c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8005a9e:	f06f 030b 	mvn.w	r3, #11
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3714      	adds	r7, #20
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
	...

08005ab0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8005aba:	79fb      	ldrb	r3, [r7, #7]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d013      	beq.n	8005ae8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8005ac0:	4b0d      	ldr	r3, [pc, #52]	; (8005af8 <netif_get_by_index+0x48>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	60fb      	str	r3, [r7, #12]
 8005ac6:	e00c      	b.n	8005ae2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ace:	3301      	adds	r3, #1
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	79fa      	ldrb	r2, [r7, #7]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d101      	bne.n	8005adc <netif_get_by_index+0x2c>
        return netif; /* found! */
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	e006      	b.n	8005aea <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	60fb      	str	r3, [r7, #12]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d1ef      	bne.n	8005ac8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3714      	adds	r7, #20
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	2000a4a8 	.word	0x2000a4a8

08005afc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8005b02:	4b0c      	ldr	r3, [pc, #48]	; (8005b34 <pbuf_free_ooseq+0x38>)
 8005b04:	2200      	movs	r2, #0
 8005b06:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005b08:	4b0b      	ldr	r3, [pc, #44]	; (8005b38 <pbuf_free_ooseq+0x3c>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	607b      	str	r3, [r7, #4]
 8005b0e:	e00a      	b.n	8005b26 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d003      	beq.n	8005b20 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f002 f9df 	bl	8007edc <tcp_free_ooseq>
      return;
 8005b1e:	e005      	b.n	8005b2c <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	607b      	str	r3, [r7, #4]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1f1      	bne.n	8005b10 <pbuf_free_ooseq+0x14>
    }
  }
}
 8005b2c:	3708      	adds	r7, #8
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	2000a4b1 	.word	0x2000a4b1
 8005b38:	2000a4c0 	.word	0x2000a4c0

08005b3c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005b40:	4b03      	ldr	r3, [pc, #12]	; (8005b50 <pbuf_pool_is_empty+0x14>)
 8005b42:	2201      	movs	r2, #1
 8005b44:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8005b46:	bf00      	nop
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr
 8005b50:	2000a4b1 	.word	0x2000a4b1

08005b54 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	4611      	mov	r1, r2
 8005b60:	461a      	mov	r2, r3
 8005b62:	460b      	mov	r3, r1
 8005b64:	80fb      	strh	r3, [r7, #6]
 8005b66:	4613      	mov	r3, r2
 8005b68:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	68ba      	ldr	r2, [r7, #8]
 8005b74:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	88fa      	ldrh	r2, [r7, #6]
 8005b7a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	88ba      	ldrh	r2, [r7, #4]
 8005b80:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8005b82:	8b3b      	ldrh	r3, [r7, #24]
 8005b84:	b2da      	uxtb	r2, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	7f3a      	ldrb	r2, [r7, #28]
 8005b8e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2201      	movs	r2, #1
 8005b94:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	73da      	strb	r2, [r3, #15]
}
 8005b9c:	bf00      	nop
 8005b9e:	3714      	adds	r7, #20
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b08c      	sub	sp, #48	; 0x30
 8005bac:	af02      	add	r7, sp, #8
 8005bae:	4603      	mov	r3, r0
 8005bb0:	71fb      	strb	r3, [r7, #7]
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	80bb      	strh	r3, [r7, #4]
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8005bba:	79fb      	ldrb	r3, [r7, #7]
 8005bbc:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8005bbe:	887b      	ldrh	r3, [r7, #2]
 8005bc0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005bc4:	d07f      	beq.n	8005cc6 <pbuf_alloc+0x11e>
 8005bc6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005bca:	f300 80c8 	bgt.w	8005d5e <pbuf_alloc+0x1b6>
 8005bce:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005bd2:	d010      	beq.n	8005bf6 <pbuf_alloc+0x4e>
 8005bd4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005bd8:	f300 80c1 	bgt.w	8005d5e <pbuf_alloc+0x1b6>
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d002      	beq.n	8005be6 <pbuf_alloc+0x3e>
 8005be0:	2b41      	cmp	r3, #65	; 0x41
 8005be2:	f040 80bc 	bne.w	8005d5e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8005be6:	887a      	ldrh	r2, [r7, #2]
 8005be8:	88bb      	ldrh	r3, [r7, #4]
 8005bea:	4619      	mov	r1, r3
 8005bec:	2000      	movs	r0, #0
 8005bee:	f000 f8d1 	bl	8005d94 <pbuf_alloc_reference>
 8005bf2:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8005bf4:	e0bd      	b.n	8005d72 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8005bfe:	88bb      	ldrh	r3, [r7, #4]
 8005c00:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005c02:	2008      	movs	r0, #8
 8005c04:	f7ff fbce 	bl	80053a4 <memp_malloc>
 8005c08:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d109      	bne.n	8005c24 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8005c10:	f7ff ff94 	bl	8005b3c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8005c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d002      	beq.n	8005c20 <pbuf_alloc+0x78>
            pbuf_free(p);
 8005c1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c1c:	f000 faa8 	bl	8006170 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8005c20:	2300      	movs	r3, #0
 8005c22:	e0a7      	b.n	8005d74 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005c24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005c26:	3303      	adds	r3, #3
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	f023 0303 	bic.w	r3, r3, #3
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	8b7a      	ldrh	r2, [r7, #26]
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	bf28      	it	cs
 8005c3c:	4613      	movcs	r3, r2
 8005c3e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8005c40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005c42:	3310      	adds	r3, #16
 8005c44:	693a      	ldr	r2, [r7, #16]
 8005c46:	4413      	add	r3, r2
 8005c48:	3303      	adds	r3, #3
 8005c4a:	f023 0303 	bic.w	r3, r3, #3
 8005c4e:	4618      	mov	r0, r3
 8005c50:	89f9      	ldrh	r1, [r7, #14]
 8005c52:	8b7a      	ldrh	r2, [r7, #26]
 8005c54:	2300      	movs	r3, #0
 8005c56:	9301      	str	r3, [sp, #4]
 8005c58:	887b      	ldrh	r3, [r7, #2]
 8005c5a:	9300      	str	r3, [sp, #0]
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	4601      	mov	r1, r0
 8005c60:	6938      	ldr	r0, [r7, #16]
 8005c62:	f7ff ff77 	bl	8005b54 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	f003 0303 	and.w	r3, r3, #3
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d006      	beq.n	8005c80 <pbuf_alloc+0xd8>
 8005c72:	4b42      	ldr	r3, [pc, #264]	; (8005d7c <pbuf_alloc+0x1d4>)
 8005c74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c78:	4941      	ldr	r1, [pc, #260]	; (8005d80 <pbuf_alloc+0x1d8>)
 8005c7a:	4842      	ldr	r0, [pc, #264]	; (8005d84 <pbuf_alloc+0x1dc>)
 8005c7c:	f009 f91e 	bl	800eebc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8005c80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005c82:	3303      	adds	r3, #3
 8005c84:	f023 0303 	bic.w	r3, r3, #3
 8005c88:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8005c8c:	d106      	bne.n	8005c9c <pbuf_alloc+0xf4>
 8005c8e:	4b3b      	ldr	r3, [pc, #236]	; (8005d7c <pbuf_alloc+0x1d4>)
 8005c90:	f44f 7281 	mov.w	r2, #258	; 0x102
 8005c94:	493c      	ldr	r1, [pc, #240]	; (8005d88 <pbuf_alloc+0x1e0>)
 8005c96:	483b      	ldr	r0, [pc, #236]	; (8005d84 <pbuf_alloc+0x1dc>)
 8005c98:	f009 f910 	bl	800eebc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8005c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d102      	bne.n	8005ca8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ca6:	e002      	b.n	8005cae <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	693a      	ldr	r2, [r7, #16]
 8005cac:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8005cb2:	8b7a      	ldrh	r2, [r7, #26]
 8005cb4:	89fb      	ldrh	r3, [r7, #14]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8005cbe:	8b7b      	ldrh	r3, [r7, #26]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d19e      	bne.n	8005c02 <pbuf_alloc+0x5a>
      break;
 8005cc4:	e055      	b.n	8005d72 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8005cc6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005cc8:	3303      	adds	r3, #3
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	f023 0303 	bic.w	r3, r3, #3
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	88bb      	ldrh	r3, [r7, #4]
 8005cd4:	3303      	adds	r3, #3
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	f023 0303 	bic.w	r3, r3, #3
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	4413      	add	r3, r2
 8005ce0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8005ce2:	8b3b      	ldrh	r3, [r7, #24]
 8005ce4:	3310      	adds	r3, #16
 8005ce6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005ce8:	8b3a      	ldrh	r2, [r7, #24]
 8005cea:	88bb      	ldrh	r3, [r7, #4]
 8005cec:	3303      	adds	r3, #3
 8005cee:	f023 0303 	bic.w	r3, r3, #3
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d306      	bcc.n	8005d04 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8005cf6:	8afa      	ldrh	r2, [r7, #22]
 8005cf8:	88bb      	ldrh	r3, [r7, #4]
 8005cfa:	3303      	adds	r3, #3
 8005cfc:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d201      	bcs.n	8005d08 <pbuf_alloc+0x160>
        return NULL;
 8005d04:	2300      	movs	r3, #0
 8005d06:	e035      	b.n	8005d74 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8005d08:	8afb      	ldrh	r3, [r7, #22]
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7ff f9ba 	bl	8005084 <mem_malloc>
 8005d10:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8005d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d101      	bne.n	8005d1c <pbuf_alloc+0x174>
        return NULL;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	e02b      	b.n	8005d74 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8005d1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005d1e:	3310      	adds	r3, #16
 8005d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d22:	4413      	add	r3, r2
 8005d24:	3303      	adds	r3, #3
 8005d26:	f023 0303 	bic.w	r3, r3, #3
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	88b9      	ldrh	r1, [r7, #4]
 8005d2e:	88ba      	ldrh	r2, [r7, #4]
 8005d30:	2300      	movs	r3, #0
 8005d32:	9301      	str	r3, [sp, #4]
 8005d34:	887b      	ldrh	r3, [r7, #2]
 8005d36:	9300      	str	r3, [sp, #0]
 8005d38:	460b      	mov	r3, r1
 8005d3a:	4601      	mov	r1, r0
 8005d3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d3e:	f7ff ff09 	bl	8005b54 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8005d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	f003 0303 	and.w	r3, r3, #3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d010      	beq.n	8005d70 <pbuf_alloc+0x1c8>
 8005d4e:	4b0b      	ldr	r3, [pc, #44]	; (8005d7c <pbuf_alloc+0x1d4>)
 8005d50:	f44f 7291 	mov.w	r2, #290	; 0x122
 8005d54:	490d      	ldr	r1, [pc, #52]	; (8005d8c <pbuf_alloc+0x1e4>)
 8005d56:	480b      	ldr	r0, [pc, #44]	; (8005d84 <pbuf_alloc+0x1dc>)
 8005d58:	f009 f8b0 	bl	800eebc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8005d5c:	e008      	b.n	8005d70 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005d5e:	4b07      	ldr	r3, [pc, #28]	; (8005d7c <pbuf_alloc+0x1d4>)
 8005d60:	f240 1227 	movw	r2, #295	; 0x127
 8005d64:	490a      	ldr	r1, [pc, #40]	; (8005d90 <pbuf_alloc+0x1e8>)
 8005d66:	4807      	ldr	r0, [pc, #28]	; (8005d84 <pbuf_alloc+0x1dc>)
 8005d68:	f009 f8a8 	bl	800eebc <iprintf>
      return NULL;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	e001      	b.n	8005d74 <pbuf_alloc+0x1cc>
      break;
 8005d70:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8005d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3728      	adds	r7, #40	; 0x28
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	08010698 	.word	0x08010698
 8005d80:	080106c8 	.word	0x080106c8
 8005d84:	080106f8 	.word	0x080106f8
 8005d88:	08010720 	.word	0x08010720
 8005d8c:	08010754 	.word	0x08010754
 8005d90:	08010780 	.word	0x08010780

08005d94 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b086      	sub	sp, #24
 8005d98:	af02      	add	r7, sp, #8
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	807b      	strh	r3, [r7, #2]
 8005da0:	4613      	mov	r3, r2
 8005da2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005da4:	883b      	ldrh	r3, [r7, #0]
 8005da6:	2b41      	cmp	r3, #65	; 0x41
 8005da8:	d009      	beq.n	8005dbe <pbuf_alloc_reference+0x2a>
 8005daa:	883b      	ldrh	r3, [r7, #0]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d006      	beq.n	8005dbe <pbuf_alloc_reference+0x2a>
 8005db0:	4b0f      	ldr	r3, [pc, #60]	; (8005df0 <pbuf_alloc_reference+0x5c>)
 8005db2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8005db6:	490f      	ldr	r1, [pc, #60]	; (8005df4 <pbuf_alloc_reference+0x60>)
 8005db8:	480f      	ldr	r0, [pc, #60]	; (8005df8 <pbuf_alloc_reference+0x64>)
 8005dba:	f009 f87f 	bl	800eebc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005dbe:	2007      	movs	r0, #7
 8005dc0:	f7ff faf0 	bl	80053a4 <memp_malloc>
 8005dc4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d101      	bne.n	8005dd0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	e00b      	b.n	8005de8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005dd0:	8879      	ldrh	r1, [r7, #2]
 8005dd2:	887a      	ldrh	r2, [r7, #2]
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	9301      	str	r3, [sp, #4]
 8005dd8:	883b      	ldrh	r3, [r7, #0]
 8005dda:	9300      	str	r3, [sp, #0]
 8005ddc:	460b      	mov	r3, r1
 8005dde:	6879      	ldr	r1, [r7, #4]
 8005de0:	68f8      	ldr	r0, [r7, #12]
 8005de2:	f7ff feb7 	bl	8005b54 <pbuf_init_alloced_pbuf>
  return p;
 8005de6:	68fb      	ldr	r3, [r7, #12]
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3710      	adds	r7, #16
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	08010698 	.word	0x08010698
 8005df4:	0801079c 	.word	0x0801079c
 8005df8:	080106f8 	.word	0x080106f8

08005dfc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b088      	sub	sp, #32
 8005e00:	af02      	add	r7, sp, #8
 8005e02:	607b      	str	r3, [r7, #4]
 8005e04:	4603      	mov	r3, r0
 8005e06:	73fb      	strb	r3, [r7, #15]
 8005e08:	460b      	mov	r3, r1
 8005e0a:	81bb      	strh	r3, [r7, #12]
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8005e10:	7bfb      	ldrb	r3, [r7, #15]
 8005e12:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005e14:	8a7b      	ldrh	r3, [r7, #18]
 8005e16:	3303      	adds	r3, #3
 8005e18:	f023 0203 	bic.w	r2, r3, #3
 8005e1c:	89bb      	ldrh	r3, [r7, #12]
 8005e1e:	441a      	add	r2, r3
 8005e20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d901      	bls.n	8005e2a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8005e26:	2300      	movs	r3, #0
 8005e28:	e018      	b.n	8005e5c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8005e2a:	6a3b      	ldr	r3, [r7, #32]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d007      	beq.n	8005e40 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005e30:	8a7b      	ldrh	r3, [r7, #18]
 8005e32:	3303      	adds	r3, #3
 8005e34:	f023 0303 	bic.w	r3, r3, #3
 8005e38:	6a3a      	ldr	r2, [r7, #32]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	617b      	str	r3, [r7, #20]
 8005e3e:	e001      	b.n	8005e44 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8005e40:	2300      	movs	r3, #0
 8005e42:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	89b9      	ldrh	r1, [r7, #12]
 8005e48:	89ba      	ldrh	r2, [r7, #12]
 8005e4a:	2302      	movs	r3, #2
 8005e4c:	9301      	str	r3, [sp, #4]
 8005e4e:	897b      	ldrh	r3, [r7, #10]
 8005e50:	9300      	str	r3, [sp, #0]
 8005e52:	460b      	mov	r3, r1
 8005e54:	6979      	ldr	r1, [r7, #20]
 8005e56:	f7ff fe7d 	bl	8005b54 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8005e5a:	687b      	ldr	r3, [r7, #4]
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3718      	adds	r7, #24
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	460b      	mov	r3, r1
 8005e6e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d106      	bne.n	8005e84 <pbuf_realloc+0x20>
 8005e76:	4b3a      	ldr	r3, [pc, #232]	; (8005f60 <pbuf_realloc+0xfc>)
 8005e78:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8005e7c:	4939      	ldr	r1, [pc, #228]	; (8005f64 <pbuf_realloc+0x100>)
 8005e7e:	483a      	ldr	r0, [pc, #232]	; (8005f68 <pbuf_realloc+0x104>)
 8005e80:	f009 f81c 	bl	800eebc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	891b      	ldrh	r3, [r3, #8]
 8005e88:	887a      	ldrh	r2, [r7, #2]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d263      	bcs.n	8005f56 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	891a      	ldrh	r2, [r3, #8]
 8005e92:	887b      	ldrh	r3, [r7, #2]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8005e98:	887b      	ldrh	r3, [r7, #2]
 8005e9a:	817b      	strh	r3, [r7, #10]
  q = p;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005ea0:	e018      	b.n	8005ed4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	895b      	ldrh	r3, [r3, #10]
 8005ea6:	897a      	ldrh	r2, [r7, #10]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	891a      	ldrh	r2, [r3, #8]
 8005eb0:	893b      	ldrh	r3, [r7, #8]
 8005eb2:	1ad3      	subs	r3, r2, r3
 8005eb4:	b29a      	uxth	r2, r3
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d106      	bne.n	8005ed4 <pbuf_realloc+0x70>
 8005ec6:	4b26      	ldr	r3, [pc, #152]	; (8005f60 <pbuf_realloc+0xfc>)
 8005ec8:	f240 12af 	movw	r2, #431	; 0x1af
 8005ecc:	4927      	ldr	r1, [pc, #156]	; (8005f6c <pbuf_realloc+0x108>)
 8005ece:	4826      	ldr	r0, [pc, #152]	; (8005f68 <pbuf_realloc+0x104>)
 8005ed0:	f008 fff4 	bl	800eebc <iprintf>
  while (rem_len > q->len) {
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	895b      	ldrh	r3, [r3, #10]
 8005ed8:	897a      	ldrh	r2, [r7, #10]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d8e1      	bhi.n	8005ea2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	7b1b      	ldrb	r3, [r3, #12]
 8005ee2:	f003 030f 	and.w	r3, r3, #15
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d121      	bne.n	8005f2e <pbuf_realloc+0xca>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	895b      	ldrh	r3, [r3, #10]
 8005eee:	897a      	ldrh	r2, [r7, #10]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d01c      	beq.n	8005f2e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	7b5b      	ldrb	r3, [r3, #13]
 8005ef8:	f003 0302 	and.w	r3, r3, #2
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d116      	bne.n	8005f2e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	685a      	ldr	r2, [r3, #4]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	b29a      	uxth	r2, r3
 8005f0a:	897b      	ldrh	r3, [r7, #10]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	4619      	mov	r1, r3
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f7fe ffba 	bl	8004e8c <mem_trim>
 8005f18:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d106      	bne.n	8005f2e <pbuf_realloc+0xca>
 8005f20:	4b0f      	ldr	r3, [pc, #60]	; (8005f60 <pbuf_realloc+0xfc>)
 8005f22:	f240 12bd 	movw	r2, #445	; 0x1bd
 8005f26:	4912      	ldr	r1, [pc, #72]	; (8005f70 <pbuf_realloc+0x10c>)
 8005f28:	480f      	ldr	r0, [pc, #60]	; (8005f68 <pbuf_realloc+0x104>)
 8005f2a:	f008 ffc7 	bl	800eebc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	897a      	ldrh	r2, [r7, #10]
 8005f32:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	895a      	ldrh	r2, [r3, #10]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d004      	beq.n	8005f4e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f000 f911 	bl	8006170 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	601a      	str	r2, [r3, #0]
 8005f54:	e000      	b.n	8005f58 <pbuf_realloc+0xf4>
    return;
 8005f56:	bf00      	nop

}
 8005f58:	3710      	adds	r7, #16
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	08010698 	.word	0x08010698
 8005f64:	080107b0 	.word	0x080107b0
 8005f68:	080106f8 	.word	0x080106f8
 8005f6c:	080107c8 	.word	0x080107c8
 8005f70:	080107e0 	.word	0x080107e0

08005f74 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b086      	sub	sp, #24
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	4613      	mov	r3, r2
 8005f80:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d106      	bne.n	8005f96 <pbuf_add_header_impl+0x22>
 8005f88:	4b2b      	ldr	r3, [pc, #172]	; (8006038 <pbuf_add_header_impl+0xc4>)
 8005f8a:	f240 12df 	movw	r2, #479	; 0x1df
 8005f8e:	492b      	ldr	r1, [pc, #172]	; (800603c <pbuf_add_header_impl+0xc8>)
 8005f90:	482b      	ldr	r0, [pc, #172]	; (8006040 <pbuf_add_header_impl+0xcc>)
 8005f92:	f008 ff93 	bl	800eebc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d003      	beq.n	8005fa4 <pbuf_add_header_impl+0x30>
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fa2:	d301      	bcc.n	8005fa8 <pbuf_add_header_impl+0x34>
    return 1;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e043      	b.n	8006030 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d101      	bne.n	8005fb2 <pbuf_add_header_impl+0x3e>
    return 0;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	e03e      	b.n	8006030 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	891a      	ldrh	r2, [r3, #8]
 8005fba:	8a7b      	ldrh	r3, [r7, #18]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	8a7a      	ldrh	r2, [r7, #18]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d901      	bls.n	8005fca <pbuf_add_header_impl+0x56>
    return 1;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e032      	b.n	8006030 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	7b1b      	ldrb	r3, [r3, #12]
 8005fce:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8005fd0:	8a3b      	ldrh	r3, [r7, #16]
 8005fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00c      	beq.n	8005ff4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	425b      	negs	r3, r3
 8005fe2:	4413      	add	r3, r2
 8005fe4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	3310      	adds	r3, #16
 8005fea:	697a      	ldr	r2, [r7, #20]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d20d      	bcs.n	800600c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e01d      	b.n	8006030 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8005ff4:	79fb      	ldrb	r3, [r7, #7]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d006      	beq.n	8006008 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	685a      	ldr	r2, [r3, #4]
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	425b      	negs	r3, r3
 8006002:	4413      	add	r3, r2
 8006004:	617b      	str	r3, [r7, #20]
 8006006:	e001      	b.n	800600c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8006008:	2301      	movs	r3, #1
 800600a:	e011      	b.n	8006030 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	895a      	ldrh	r2, [r3, #10]
 8006016:	8a7b      	ldrh	r3, [r7, #18]
 8006018:	4413      	add	r3, r2
 800601a:	b29a      	uxth	r2, r3
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	891a      	ldrh	r2, [r3, #8]
 8006024:	8a7b      	ldrh	r3, [r7, #18]
 8006026:	4413      	add	r3, r2
 8006028:	b29a      	uxth	r2, r3
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	811a      	strh	r2, [r3, #8]


  return 0;
 800602e:	2300      	movs	r3, #0
}
 8006030:	4618      	mov	r0, r3
 8006032:	3718      	adds	r7, #24
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	08010698 	.word	0x08010698
 800603c:	080107fc 	.word	0x080107fc
 8006040:	080106f8 	.word	0x080106f8

08006044 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800604e:	2200      	movs	r2, #0
 8006050:	6839      	ldr	r1, [r7, #0]
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f7ff ff8e 	bl	8005f74 <pbuf_add_header_impl>
 8006058:	4603      	mov	r3, r0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3708      	adds	r7, #8
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
	...

08006064 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d106      	bne.n	8006082 <pbuf_remove_header+0x1e>
 8006074:	4b20      	ldr	r3, [pc, #128]	; (80060f8 <pbuf_remove_header+0x94>)
 8006076:	f240 224b 	movw	r2, #587	; 0x24b
 800607a:	4920      	ldr	r1, [pc, #128]	; (80060fc <pbuf_remove_header+0x98>)
 800607c:	4820      	ldr	r0, [pc, #128]	; (8006100 <pbuf_remove_header+0x9c>)
 800607e:	f008 ff1d 	bl	800eebc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d003      	beq.n	8006090 <pbuf_remove_header+0x2c>
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800608e:	d301      	bcc.n	8006094 <pbuf_remove_header+0x30>
    return 1;
 8006090:	2301      	movs	r3, #1
 8006092:	e02c      	b.n	80060ee <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d101      	bne.n	800609e <pbuf_remove_header+0x3a>
    return 0;
 800609a:	2300      	movs	r3, #0
 800609c:	e027      	b.n	80060ee <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	895b      	ldrh	r3, [r3, #10]
 80060a6:	89fa      	ldrh	r2, [r7, #14]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d908      	bls.n	80060be <pbuf_remove_header+0x5a>
 80060ac:	4b12      	ldr	r3, [pc, #72]	; (80060f8 <pbuf_remove_header+0x94>)
 80060ae:	f240 2255 	movw	r2, #597	; 0x255
 80060b2:	4914      	ldr	r1, [pc, #80]	; (8006104 <pbuf_remove_header+0xa0>)
 80060b4:	4812      	ldr	r0, [pc, #72]	; (8006100 <pbuf_remove_header+0x9c>)
 80060b6:	f008 ff01 	bl	800eebc <iprintf>
 80060ba:	2301      	movs	r3, #1
 80060bc:	e017      	b.n	80060ee <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	685a      	ldr	r2, [r3, #4]
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	441a      	add	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	895a      	ldrh	r2, [r3, #10]
 80060d4:	89fb      	ldrh	r3, [r7, #14]
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	b29a      	uxth	r2, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	891a      	ldrh	r2, [r3, #8]
 80060e2:	89fb      	ldrh	r3, [r7, #14]
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	08010698 	.word	0x08010698
 80060fc:	080107fc 	.word	0x080107fc
 8006100:	080106f8 	.word	0x080106f8
 8006104:	08010808 	.word	0x08010808

08006108 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	460b      	mov	r3, r1
 8006112:	807b      	strh	r3, [r7, #2]
 8006114:	4613      	mov	r3, r2
 8006116:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8006118:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800611c:	2b00      	cmp	r3, #0
 800611e:	da08      	bge.n	8006132 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8006120:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006124:	425b      	negs	r3, r3
 8006126:	4619      	mov	r1, r3
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f7ff ff9b 	bl	8006064 <pbuf_remove_header>
 800612e:	4603      	mov	r3, r0
 8006130:	e007      	b.n	8006142 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8006132:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006136:	787a      	ldrb	r2, [r7, #1]
 8006138:	4619      	mov	r1, r3
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f7ff ff1a 	bl	8005f74 <pbuf_add_header_impl>
 8006140:	4603      	mov	r3, r0
  }
}
 8006142:	4618      	mov	r0, r3
 8006144:	3708      	adds	r7, #8
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	b082      	sub	sp, #8
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
 8006152:	460b      	mov	r3, r1
 8006154:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8006156:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800615a:	2201      	movs	r2, #1
 800615c:	4619      	mov	r1, r3
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f7ff ffd2 	bl	8006108 <pbuf_header_impl>
 8006164:	4603      	mov	r3, r0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3708      	adds	r7, #8
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
	...

08006170 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b086      	sub	sp, #24
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10b      	bne.n	8006196 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d106      	bne.n	8006192 <pbuf_free+0x22>
 8006184:	4b38      	ldr	r3, [pc, #224]	; (8006268 <pbuf_free+0xf8>)
 8006186:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800618a:	4938      	ldr	r1, [pc, #224]	; (800626c <pbuf_free+0xfc>)
 800618c:	4838      	ldr	r0, [pc, #224]	; (8006270 <pbuf_free+0x100>)
 800618e:	f008 fe95 	bl	800eebc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8006192:	2300      	movs	r3, #0
 8006194:	e063      	b.n	800625e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8006196:	2300      	movs	r3, #0
 8006198:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800619a:	e05c      	b.n	8006256 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	7b9b      	ldrb	r3, [r3, #14]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d106      	bne.n	80061b2 <pbuf_free+0x42>
 80061a4:	4b30      	ldr	r3, [pc, #192]	; (8006268 <pbuf_free+0xf8>)
 80061a6:	f240 22f1 	movw	r2, #753	; 0x2f1
 80061aa:	4932      	ldr	r1, [pc, #200]	; (8006274 <pbuf_free+0x104>)
 80061ac:	4830      	ldr	r0, [pc, #192]	; (8006270 <pbuf_free+0x100>)
 80061ae:	f008 fe85 	bl	800eebc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	7b9b      	ldrb	r3, [r3, #14]
 80061b6:	3b01      	subs	r3, #1
 80061b8:	b2da      	uxtb	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	739a      	strb	r2, [r3, #14]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	7b9b      	ldrb	r3, [r3, #14]
 80061c2:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80061c4:	7dbb      	ldrb	r3, [r7, #22]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d143      	bne.n	8006252 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	7b1b      	ldrb	r3, [r3, #12]
 80061d4:	f003 030f 	and.w	r3, r3, #15
 80061d8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	7b5b      	ldrb	r3, [r3, #13]
 80061de:	f003 0302 	and.w	r3, r3, #2
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d011      	beq.n	800620a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d106      	bne.n	8006200 <pbuf_free+0x90>
 80061f2:	4b1d      	ldr	r3, [pc, #116]	; (8006268 <pbuf_free+0xf8>)
 80061f4:	f240 22ff 	movw	r2, #767	; 0x2ff
 80061f8:	491f      	ldr	r1, [pc, #124]	; (8006278 <pbuf_free+0x108>)
 80061fa:	481d      	ldr	r0, [pc, #116]	; (8006270 <pbuf_free+0x100>)
 80061fc:	f008 fe5e 	bl	800eebc <iprintf>
        pc->custom_free_function(p);
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	4798      	blx	r3
 8006208:	e01d      	b.n	8006246 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800620a:	7bfb      	ldrb	r3, [r7, #15]
 800620c:	2b02      	cmp	r3, #2
 800620e:	d104      	bne.n	800621a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8006210:	6879      	ldr	r1, [r7, #4]
 8006212:	2008      	movs	r0, #8
 8006214:	f7ff f936 	bl	8005484 <memp_free>
 8006218:	e015      	b.n	8006246 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800621a:	7bfb      	ldrb	r3, [r7, #15]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d104      	bne.n	800622a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8006220:	6879      	ldr	r1, [r7, #4]
 8006222:	2007      	movs	r0, #7
 8006224:	f7ff f92e 	bl	8005484 <memp_free>
 8006228:	e00d      	b.n	8006246 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800622a:	7bfb      	ldrb	r3, [r7, #15]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d103      	bne.n	8006238 <pbuf_free+0xc8>
          mem_free(p);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f7fe fdc1 	bl	8004db8 <mem_free>
 8006236:	e006      	b.n	8006246 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8006238:	4b0b      	ldr	r3, [pc, #44]	; (8006268 <pbuf_free+0xf8>)
 800623a:	f240 320f 	movw	r2, #783	; 0x30f
 800623e:	490f      	ldr	r1, [pc, #60]	; (800627c <pbuf_free+0x10c>)
 8006240:	480b      	ldr	r0, [pc, #44]	; (8006270 <pbuf_free+0x100>)
 8006242:	f008 fe3b 	bl	800eebc <iprintf>
        }
      }
      count++;
 8006246:	7dfb      	ldrb	r3, [r7, #23]
 8006248:	3301      	adds	r3, #1
 800624a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	607b      	str	r3, [r7, #4]
 8006250:	e001      	b.n	8006256 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8006252:	2300      	movs	r3, #0
 8006254:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d19f      	bne.n	800619c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800625c:	7dfb      	ldrb	r3, [r7, #23]
}
 800625e:	4618      	mov	r0, r3
 8006260:	3718      	adds	r7, #24
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	08010698 	.word	0x08010698
 800626c:	080107fc 	.word	0x080107fc
 8006270:	080106f8 	.word	0x080106f8
 8006274:	08010828 	.word	0x08010828
 8006278:	08010840 	.word	0x08010840
 800627c:	08010864 	.word	0x08010864

08006280 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8006280:	b480      	push	{r7}
 8006282:	b085      	sub	sp, #20
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8006288:	2300      	movs	r3, #0
 800628a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800628c:	e005      	b.n	800629a <pbuf_clen+0x1a>
    ++len;
 800628e:	89fb      	ldrh	r3, [r7, #14]
 8006290:	3301      	adds	r3, #1
 8006292:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1f6      	bne.n	800628e <pbuf_clen+0xe>
  }
  return len;
 80062a0:	89fb      	ldrh	r3, [r7, #14]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3714      	adds	r7, #20
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr
	...

080062b0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d010      	beq.n	80062e0 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	7b9b      	ldrb	r3, [r3, #14]
 80062c2:	3301      	adds	r3, #1
 80062c4:	b2da      	uxtb	r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	7b9b      	ldrb	r3, [r3, #14]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d106      	bne.n	80062e0 <pbuf_ref+0x30>
 80062d2:	4b05      	ldr	r3, [pc, #20]	; (80062e8 <pbuf_ref+0x38>)
 80062d4:	f240 3242 	movw	r2, #834	; 0x342
 80062d8:	4904      	ldr	r1, [pc, #16]	; (80062ec <pbuf_ref+0x3c>)
 80062da:	4805      	ldr	r0, [pc, #20]	; (80062f0 <pbuf_ref+0x40>)
 80062dc:	f008 fdee 	bl	800eebc <iprintf>
  }
}
 80062e0:	bf00      	nop
 80062e2:	3708      	adds	r7, #8
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	08010698 	.word	0x08010698
 80062ec:	08010878 	.word	0x08010878
 80062f0:	080106f8 	.word	0x080106f8

080062f4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d002      	beq.n	800630a <pbuf_cat+0x16>
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d107      	bne.n	800631a <pbuf_cat+0x26>
 800630a:	4b20      	ldr	r3, [pc, #128]	; (800638c <pbuf_cat+0x98>)
 800630c:	f240 3259 	movw	r2, #857	; 0x359
 8006310:	491f      	ldr	r1, [pc, #124]	; (8006390 <pbuf_cat+0x9c>)
 8006312:	4820      	ldr	r0, [pc, #128]	; (8006394 <pbuf_cat+0xa0>)
 8006314:	f008 fdd2 	bl	800eebc <iprintf>
 8006318:	e034      	b.n	8006384 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	60fb      	str	r3, [r7, #12]
 800631e:	e00a      	b.n	8006336 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	891a      	ldrh	r2, [r3, #8]
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	891b      	ldrh	r3, [r3, #8]
 8006328:	4413      	add	r3, r2
 800632a:	b29a      	uxth	r2, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	60fb      	str	r3, [r7, #12]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d1f0      	bne.n	8006320 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	891a      	ldrh	r2, [r3, #8]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	895b      	ldrh	r3, [r3, #10]
 8006346:	429a      	cmp	r2, r3
 8006348:	d006      	beq.n	8006358 <pbuf_cat+0x64>
 800634a:	4b10      	ldr	r3, [pc, #64]	; (800638c <pbuf_cat+0x98>)
 800634c:	f240 3262 	movw	r2, #866	; 0x362
 8006350:	4911      	ldr	r1, [pc, #68]	; (8006398 <pbuf_cat+0xa4>)
 8006352:	4810      	ldr	r0, [pc, #64]	; (8006394 <pbuf_cat+0xa0>)
 8006354:	f008 fdb2 	bl	800eebc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d006      	beq.n	800636e <pbuf_cat+0x7a>
 8006360:	4b0a      	ldr	r3, [pc, #40]	; (800638c <pbuf_cat+0x98>)
 8006362:	f240 3263 	movw	r2, #867	; 0x363
 8006366:	490d      	ldr	r1, [pc, #52]	; (800639c <pbuf_cat+0xa8>)
 8006368:	480a      	ldr	r0, [pc, #40]	; (8006394 <pbuf_cat+0xa0>)
 800636a:	f008 fda7 	bl	800eebc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	891a      	ldrh	r2, [r3, #8]
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	891b      	ldrh	r3, [r3, #8]
 8006376:	4413      	add	r3, r2
 8006378:	b29a      	uxth	r2, r3
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	683a      	ldr	r2, [r7, #0]
 8006382:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	08010698 	.word	0x08010698
 8006390:	0801088c 	.word	0x0801088c
 8006394:	080106f8 	.word	0x080106f8
 8006398:	080108c4 	.word	0x080108c4
 800639c:	080108f4 	.word	0x080108f4

080063a0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80063aa:	6839      	ldr	r1, [r7, #0]
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f7ff ffa1 	bl	80062f4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80063b2:	6838      	ldr	r0, [r7, #0]
 80063b4:	f7ff ff7c 	bl	80062b0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80063b8:	bf00      	nop
 80063ba:	3708      	adds	r7, #8
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b086      	sub	sp, #24
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80063ca:	2300      	movs	r3, #0
 80063cc:	617b      	str	r3, [r7, #20]
 80063ce:	2300      	movs	r3, #0
 80063d0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d008      	beq.n	80063ea <pbuf_copy+0x2a>
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d005      	beq.n	80063ea <pbuf_copy+0x2a>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	891a      	ldrh	r2, [r3, #8]
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	891b      	ldrh	r3, [r3, #8]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d209      	bcs.n	80063fe <pbuf_copy+0x3e>
 80063ea:	4b57      	ldr	r3, [pc, #348]	; (8006548 <pbuf_copy+0x188>)
 80063ec:	f240 32c9 	movw	r2, #969	; 0x3c9
 80063f0:	4956      	ldr	r1, [pc, #344]	; (800654c <pbuf_copy+0x18c>)
 80063f2:	4857      	ldr	r0, [pc, #348]	; (8006550 <pbuf_copy+0x190>)
 80063f4:	f008 fd62 	bl	800eebc <iprintf>
 80063f8:	f06f 030f 	mvn.w	r3, #15
 80063fc:	e09f      	b.n	800653e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	895b      	ldrh	r3, [r3, #10]
 8006402:	461a      	mov	r2, r3
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	1ad2      	subs	r2, r2, r3
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	895b      	ldrh	r3, [r3, #10]
 800640c:	4619      	mov	r1, r3
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	1acb      	subs	r3, r1, r3
 8006412:	429a      	cmp	r2, r3
 8006414:	d306      	bcc.n	8006424 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	895b      	ldrh	r3, [r3, #10]
 800641a:	461a      	mov	r2, r3
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	60fb      	str	r3, [r7, #12]
 8006422:	e005      	b.n	8006430 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	895b      	ldrh	r3, [r3, #10]
 8006428:	461a      	mov	r2, r3
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685a      	ldr	r2, [r3, #4]
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	18d0      	adds	r0, r2, r3
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	685a      	ldr	r2, [r3, #4]
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	4413      	add	r3, r2
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	4619      	mov	r1, r3
 8006444:	f008 fe61 	bl	800f10a <memcpy>
    offset_to += len;
 8006448:	697a      	ldr	r2, [r7, #20]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	4413      	add	r3, r2
 800644e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8006450:	693a      	ldr	r2, [r7, #16]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	4413      	add	r3, r2
 8006456:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	895b      	ldrh	r3, [r3, #10]
 800645c:	461a      	mov	r2, r3
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	4293      	cmp	r3, r2
 8006462:	d906      	bls.n	8006472 <pbuf_copy+0xb2>
 8006464:	4b38      	ldr	r3, [pc, #224]	; (8006548 <pbuf_copy+0x188>)
 8006466:	f240 32d9 	movw	r2, #985	; 0x3d9
 800646a:	493a      	ldr	r1, [pc, #232]	; (8006554 <pbuf_copy+0x194>)
 800646c:	4838      	ldr	r0, [pc, #224]	; (8006550 <pbuf_copy+0x190>)
 800646e:	f008 fd25 	bl	800eebc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	895b      	ldrh	r3, [r3, #10]
 8006476:	461a      	mov	r2, r3
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	4293      	cmp	r3, r2
 800647c:	d906      	bls.n	800648c <pbuf_copy+0xcc>
 800647e:	4b32      	ldr	r3, [pc, #200]	; (8006548 <pbuf_copy+0x188>)
 8006480:	f240 32da 	movw	r2, #986	; 0x3da
 8006484:	4934      	ldr	r1, [pc, #208]	; (8006558 <pbuf_copy+0x198>)
 8006486:	4832      	ldr	r0, [pc, #200]	; (8006550 <pbuf_copy+0x190>)
 8006488:	f008 fd18 	bl	800eebc <iprintf>
    if (offset_from >= p_from->len) {
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	895b      	ldrh	r3, [r3, #10]
 8006490:	461a      	mov	r2, r3
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	4293      	cmp	r3, r2
 8006496:	d304      	bcc.n	80064a2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8006498:	2300      	movs	r3, #0
 800649a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	895b      	ldrh	r3, [r3, #10]
 80064a6:	461a      	mov	r2, r3
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d114      	bne.n	80064d8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80064ae:	2300      	movs	r3, #0
 80064b0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d10c      	bne.n	80064d8 <pbuf_copy+0x118>
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d009      	beq.n	80064d8 <pbuf_copy+0x118>
 80064c4:	4b20      	ldr	r3, [pc, #128]	; (8006548 <pbuf_copy+0x188>)
 80064c6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80064ca:	4924      	ldr	r1, [pc, #144]	; (800655c <pbuf_copy+0x19c>)
 80064cc:	4820      	ldr	r0, [pc, #128]	; (8006550 <pbuf_copy+0x190>)
 80064ce:	f008 fcf5 	bl	800eebc <iprintf>
 80064d2:	f06f 030f 	mvn.w	r3, #15
 80064d6:	e032      	b.n	800653e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d013      	beq.n	8006506 <pbuf_copy+0x146>
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	895a      	ldrh	r2, [r3, #10]
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	891b      	ldrh	r3, [r3, #8]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d10d      	bne.n	8006506 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d009      	beq.n	8006506 <pbuf_copy+0x146>
 80064f2:	4b15      	ldr	r3, [pc, #84]	; (8006548 <pbuf_copy+0x188>)
 80064f4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80064f8:	4919      	ldr	r1, [pc, #100]	; (8006560 <pbuf_copy+0x1a0>)
 80064fa:	4815      	ldr	r0, [pc, #84]	; (8006550 <pbuf_copy+0x190>)
 80064fc:	f008 fcde 	bl	800eebc <iprintf>
 8006500:	f06f 0305 	mvn.w	r3, #5
 8006504:	e01b      	b.n	800653e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d013      	beq.n	8006534 <pbuf_copy+0x174>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	895a      	ldrh	r2, [r3, #10]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	891b      	ldrh	r3, [r3, #8]
 8006514:	429a      	cmp	r2, r3
 8006516:	d10d      	bne.n	8006534 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d009      	beq.n	8006534 <pbuf_copy+0x174>
 8006520:	4b09      	ldr	r3, [pc, #36]	; (8006548 <pbuf_copy+0x188>)
 8006522:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8006526:	490e      	ldr	r1, [pc, #56]	; (8006560 <pbuf_copy+0x1a0>)
 8006528:	4809      	ldr	r0, [pc, #36]	; (8006550 <pbuf_copy+0x190>)
 800652a:	f008 fcc7 	bl	800eebc <iprintf>
 800652e:	f06f 0305 	mvn.w	r3, #5
 8006532:	e004      	b.n	800653e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	f47f af61 	bne.w	80063fe <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3718      	adds	r7, #24
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	08010698 	.word	0x08010698
 800654c:	08010940 	.word	0x08010940
 8006550:	080106f8 	.word	0x080106f8
 8006554:	08010970 	.word	0x08010970
 8006558:	08010988 	.word	0x08010988
 800655c:	080109a4 	.word	0x080109a4
 8006560:	080109b4 	.word	0x080109b4

08006564 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b088      	sub	sp, #32
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	4611      	mov	r1, r2
 8006570:	461a      	mov	r2, r3
 8006572:	460b      	mov	r3, r1
 8006574:	80fb      	strh	r3, [r7, #6]
 8006576:	4613      	mov	r3, r2
 8006578:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800657a:	2300      	movs	r3, #0
 800657c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800657e:	2300      	movs	r3, #0
 8006580:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d108      	bne.n	800659a <pbuf_copy_partial+0x36>
 8006588:	4b2b      	ldr	r3, [pc, #172]	; (8006638 <pbuf_copy_partial+0xd4>)
 800658a:	f240 420a 	movw	r2, #1034	; 0x40a
 800658e:	492b      	ldr	r1, [pc, #172]	; (800663c <pbuf_copy_partial+0xd8>)
 8006590:	482b      	ldr	r0, [pc, #172]	; (8006640 <pbuf_copy_partial+0xdc>)
 8006592:	f008 fc93 	bl	800eebc <iprintf>
 8006596:	2300      	movs	r3, #0
 8006598:	e04a      	b.n	8006630 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d108      	bne.n	80065b2 <pbuf_copy_partial+0x4e>
 80065a0:	4b25      	ldr	r3, [pc, #148]	; (8006638 <pbuf_copy_partial+0xd4>)
 80065a2:	f240 420b 	movw	r2, #1035	; 0x40b
 80065a6:	4927      	ldr	r1, [pc, #156]	; (8006644 <pbuf_copy_partial+0xe0>)
 80065a8:	4825      	ldr	r0, [pc, #148]	; (8006640 <pbuf_copy_partial+0xdc>)
 80065aa:	f008 fc87 	bl	800eebc <iprintf>
 80065ae:	2300      	movs	r3, #0
 80065b0:	e03e      	b.n	8006630 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	61fb      	str	r3, [r7, #28]
 80065b6:	e034      	b.n	8006622 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80065b8:	88bb      	ldrh	r3, [r7, #4]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00a      	beq.n	80065d4 <pbuf_copy_partial+0x70>
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	895b      	ldrh	r3, [r3, #10]
 80065c2:	88ba      	ldrh	r2, [r7, #4]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d305      	bcc.n	80065d4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	895b      	ldrh	r3, [r3, #10]
 80065cc:	88ba      	ldrh	r2, [r7, #4]
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	80bb      	strh	r3, [r7, #4]
 80065d2:	e023      	b.n	800661c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	895a      	ldrh	r2, [r3, #10]
 80065d8:	88bb      	ldrh	r3, [r7, #4]
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80065de:	8b3a      	ldrh	r2, [r7, #24]
 80065e0:	88fb      	ldrh	r3, [r7, #6]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d901      	bls.n	80065ea <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80065e6:	88fb      	ldrh	r3, [r7, #6]
 80065e8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80065ea:	8b7b      	ldrh	r3, [r7, #26]
 80065ec:	68ba      	ldr	r2, [r7, #8]
 80065ee:	18d0      	adds	r0, r2, r3
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	685a      	ldr	r2, [r3, #4]
 80065f4:	88bb      	ldrh	r3, [r7, #4]
 80065f6:	4413      	add	r3, r2
 80065f8:	8b3a      	ldrh	r2, [r7, #24]
 80065fa:	4619      	mov	r1, r3
 80065fc:	f008 fd85 	bl	800f10a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006600:	8afa      	ldrh	r2, [r7, #22]
 8006602:	8b3b      	ldrh	r3, [r7, #24]
 8006604:	4413      	add	r3, r2
 8006606:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8006608:	8b7a      	ldrh	r2, [r7, #26]
 800660a:	8b3b      	ldrh	r3, [r7, #24]
 800660c:	4413      	add	r3, r2
 800660e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8006610:	88fa      	ldrh	r2, [r7, #6]
 8006612:	8b3b      	ldrh	r3, [r7, #24]
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8006618:	2300      	movs	r3, #0
 800661a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	61fb      	str	r3, [r7, #28]
 8006622:	88fb      	ldrh	r3, [r7, #6]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d002      	beq.n	800662e <pbuf_copy_partial+0xca>
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1c4      	bne.n	80065b8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800662e:	8afb      	ldrh	r3, [r7, #22]
}
 8006630:	4618      	mov	r0, r3
 8006632:	3720      	adds	r7, #32
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	08010698 	.word	0x08010698
 800663c:	080109e0 	.word	0x080109e0
 8006640:	080106f8 	.word	0x080106f8
 8006644:	08010a00 	.word	0x08010a00

08006648 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b088      	sub	sp, #32
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	4613      	mov	r3, r2
 8006654:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8006656:	88fb      	ldrh	r3, [r7, #6]
 8006658:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800665a:	2300      	movs	r3, #0
 800665c:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d109      	bne.n	8006678 <pbuf_take+0x30>
 8006664:	4b3a      	ldr	r3, [pc, #232]	; (8006750 <pbuf_take+0x108>)
 8006666:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800666a:	493a      	ldr	r1, [pc, #232]	; (8006754 <pbuf_take+0x10c>)
 800666c:	483a      	ldr	r0, [pc, #232]	; (8006758 <pbuf_take+0x110>)
 800666e:	f008 fc25 	bl	800eebc <iprintf>
 8006672:	f06f 030f 	mvn.w	r3, #15
 8006676:	e067      	b.n	8006748 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d109      	bne.n	8006692 <pbuf_take+0x4a>
 800667e:	4b34      	ldr	r3, [pc, #208]	; (8006750 <pbuf_take+0x108>)
 8006680:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8006684:	4935      	ldr	r1, [pc, #212]	; (800675c <pbuf_take+0x114>)
 8006686:	4834      	ldr	r0, [pc, #208]	; (8006758 <pbuf_take+0x110>)
 8006688:	f008 fc18 	bl	800eebc <iprintf>
 800668c:	f06f 030f 	mvn.w	r3, #15
 8006690:	e05a      	b.n	8006748 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	891b      	ldrh	r3, [r3, #8]
 8006696:	88fa      	ldrh	r2, [r7, #6]
 8006698:	429a      	cmp	r2, r3
 800669a:	d909      	bls.n	80066b0 <pbuf_take+0x68>
 800669c:	4b2c      	ldr	r3, [pc, #176]	; (8006750 <pbuf_take+0x108>)
 800669e:	f240 42b5 	movw	r2, #1205	; 0x4b5
 80066a2:	492f      	ldr	r1, [pc, #188]	; (8006760 <pbuf_take+0x118>)
 80066a4:	482c      	ldr	r0, [pc, #176]	; (8006758 <pbuf_take+0x110>)
 80066a6:	f008 fc09 	bl	800eebc <iprintf>
 80066aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066ae:	e04b      	b.n	8006748 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d007      	beq.n	80066c6 <pbuf_take+0x7e>
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d004      	beq.n	80066c6 <pbuf_take+0x7e>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	891b      	ldrh	r3, [r3, #8]
 80066c0:	88fa      	ldrh	r2, [r7, #6]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d902      	bls.n	80066cc <pbuf_take+0x84>
    return ERR_ARG;
 80066c6:	f06f 030f 	mvn.w	r3, #15
 80066ca:	e03d      	b.n	8006748 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	61fb      	str	r3, [r7, #28]
 80066d0:	e028      	b.n	8006724 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d106      	bne.n	80066e6 <pbuf_take+0x9e>
 80066d8:	4b1d      	ldr	r3, [pc, #116]	; (8006750 <pbuf_take+0x108>)
 80066da:	f240 42bd 	movw	r2, #1213	; 0x4bd
 80066de:	4921      	ldr	r1, [pc, #132]	; (8006764 <pbuf_take+0x11c>)
 80066e0:	481d      	ldr	r0, [pc, #116]	; (8006758 <pbuf_take+0x110>)
 80066e2:	f008 fbeb 	bl	800eebc <iprintf>
    buf_copy_len = total_copy_len;
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	895b      	ldrh	r3, [r3, #10]
 80066ee:	461a      	mov	r2, r3
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d902      	bls.n	80066fc <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	895b      	ldrh	r3, [r3, #10]
 80066fa:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	6858      	ldr	r0, [r3, #4]
 8006700:	68ba      	ldr	r2, [r7, #8]
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	4413      	add	r3, r2
 8006706:	69ba      	ldr	r2, [r7, #24]
 8006708:	4619      	mov	r1, r3
 800670a:	f008 fcfe 	bl	800f10a <memcpy>
    total_copy_len -= buf_copy_len;
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	4413      	add	r3, r2
 800671c:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	61fb      	str	r3, [r7, #28]
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d1d3      	bne.n	80066d2 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d103      	bne.n	8006738 <pbuf_take+0xf0>
 8006730:	88fb      	ldrh	r3, [r7, #6]
 8006732:	693a      	ldr	r2, [r7, #16]
 8006734:	429a      	cmp	r2, r3
 8006736:	d006      	beq.n	8006746 <pbuf_take+0xfe>
 8006738:	4b05      	ldr	r3, [pc, #20]	; (8006750 <pbuf_take+0x108>)
 800673a:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800673e:	490a      	ldr	r1, [pc, #40]	; (8006768 <pbuf_take+0x120>)
 8006740:	4805      	ldr	r0, [pc, #20]	; (8006758 <pbuf_take+0x110>)
 8006742:	f008 fbbb 	bl	800eebc <iprintf>
  return ERR_OK;
 8006746:	2300      	movs	r3, #0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3720      	adds	r7, #32
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}
 8006750:	08010698 	.word	0x08010698
 8006754:	08010a70 	.word	0x08010a70
 8006758:	080106f8 	.word	0x080106f8
 800675c:	08010a88 	.word	0x08010a88
 8006760:	08010aa4 	.word	0x08010aa4
 8006764:	08010ac4 	.word	0x08010ac4
 8006768:	08010adc 	.word	0x08010adc

0800676c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	4603      	mov	r3, r0
 8006774:	603a      	str	r2, [r7, #0]
 8006776:	71fb      	strb	r3, [r7, #7]
 8006778:	460b      	mov	r3, r1
 800677a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	8919      	ldrh	r1, [r3, #8]
 8006780:	88ba      	ldrh	r2, [r7, #4]
 8006782:	79fb      	ldrb	r3, [r7, #7]
 8006784:	4618      	mov	r0, r3
 8006786:	f7ff fa0f 	bl	8005ba8 <pbuf_alloc>
 800678a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d101      	bne.n	8006796 <pbuf_clone+0x2a>
    return NULL;
 8006792:	2300      	movs	r3, #0
 8006794:	e011      	b.n	80067ba <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8006796:	6839      	ldr	r1, [r7, #0]
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f7ff fe11 	bl	80063c0 <pbuf_copy>
 800679e:	4603      	mov	r3, r0
 80067a0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80067a2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d006      	beq.n	80067b8 <pbuf_clone+0x4c>
 80067aa:	4b06      	ldr	r3, [pc, #24]	; (80067c4 <pbuf_clone+0x58>)
 80067ac:	f240 5224 	movw	r2, #1316	; 0x524
 80067b0:	4905      	ldr	r1, [pc, #20]	; (80067c8 <pbuf_clone+0x5c>)
 80067b2:	4806      	ldr	r0, [pc, #24]	; (80067cc <pbuf_clone+0x60>)
 80067b4:	f008 fb82 	bl	800eebc <iprintf>
  return q;
 80067b8:	68fb      	ldr	r3, [r7, #12]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	08010698 	.word	0x08010698
 80067c8:	08010b0c 	.word	0x08010b0c
 80067cc:	080106f8 	.word	0x080106f8

080067d0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80067d4:	f008 fa72 	bl	800ecbc <rand>
 80067d8:	4603      	mov	r3, r0
 80067da:	b29b      	uxth	r3, r3
 80067dc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80067e6:	b29a      	uxth	r2, r3
 80067e8:	4b01      	ldr	r3, [pc, #4]	; (80067f0 <tcp_init+0x20>)
 80067ea:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80067ec:	bf00      	nop
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	20000020 	.word	0x20000020

080067f4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	7d1b      	ldrb	r3, [r3, #20]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d105      	bne.n	8006810 <tcp_free+0x1c>
 8006804:	4b06      	ldr	r3, [pc, #24]	; (8006820 <tcp_free+0x2c>)
 8006806:	22d4      	movs	r2, #212	; 0xd4
 8006808:	4906      	ldr	r1, [pc, #24]	; (8006824 <tcp_free+0x30>)
 800680a:	4807      	ldr	r0, [pc, #28]	; (8006828 <tcp_free+0x34>)
 800680c:	f008 fb56 	bl	800eebc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8006810:	6879      	ldr	r1, [r7, #4]
 8006812:	2001      	movs	r0, #1
 8006814:	f7fe fe36 	bl	8005484 <memp_free>
}
 8006818:	bf00      	nop
 800681a:	3708      	adds	r7, #8
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}
 8006820:	08010b98 	.word	0x08010b98
 8006824:	08010bc8 	.word	0x08010bc8
 8006828:	08010bdc 	.word	0x08010bdc

0800682c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b082      	sub	sp, #8
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	7d1b      	ldrb	r3, [r3, #20]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d105      	bne.n	8006848 <tcp_free_listen+0x1c>
 800683c:	4b06      	ldr	r3, [pc, #24]	; (8006858 <tcp_free_listen+0x2c>)
 800683e:	22df      	movs	r2, #223	; 0xdf
 8006840:	4906      	ldr	r1, [pc, #24]	; (800685c <tcp_free_listen+0x30>)
 8006842:	4807      	ldr	r0, [pc, #28]	; (8006860 <tcp_free_listen+0x34>)
 8006844:	f008 fb3a 	bl	800eebc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006848:	6879      	ldr	r1, [r7, #4]
 800684a:	2002      	movs	r0, #2
 800684c:	f7fe fe1a 	bl	8005484 <memp_free>
}
 8006850:	bf00      	nop
 8006852:	3708      	adds	r7, #8
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}
 8006858:	08010b98 	.word	0x08010b98
 800685c:	08010c04 	.word	0x08010c04
 8006860:	08010bdc 	.word	0x08010bdc

08006864 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8006868:	f000 fea2 	bl	80075b0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800686c:	4b07      	ldr	r3, [pc, #28]	; (800688c <tcp_tmr+0x28>)
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	3301      	adds	r3, #1
 8006872:	b2da      	uxtb	r2, r3
 8006874:	4b05      	ldr	r3, [pc, #20]	; (800688c <tcp_tmr+0x28>)
 8006876:	701a      	strb	r2, [r3, #0]
 8006878:	4b04      	ldr	r3, [pc, #16]	; (800688c <tcp_tmr+0x28>)
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	f003 0301 	and.w	r3, r3, #1
 8006880:	2b00      	cmp	r3, #0
 8006882:	d001      	beq.n	8006888 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8006884:	f000 fb54 	bl	8006f30 <tcp_slowtmr>
  }
}
 8006888:	bf00      	nop
 800688a:	bd80      	pop	{r7, pc}
 800688c:	2000a4c9 	.word	0x2000a4c9

08006890 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d105      	bne.n	80068ac <tcp_remove_listener+0x1c>
 80068a0:	4b0d      	ldr	r3, [pc, #52]	; (80068d8 <tcp_remove_listener+0x48>)
 80068a2:	22ff      	movs	r2, #255	; 0xff
 80068a4:	490d      	ldr	r1, [pc, #52]	; (80068dc <tcp_remove_listener+0x4c>)
 80068a6:	480e      	ldr	r0, [pc, #56]	; (80068e0 <tcp_remove_listener+0x50>)
 80068a8:	f008 fb08 	bl	800eebc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	60fb      	str	r3, [r7, #12]
 80068b0:	e00a      	b.n	80068c8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068b6:	683a      	ldr	r2, [r7, #0]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d102      	bne.n	80068c2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	60fb      	str	r3, [r7, #12]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1f1      	bne.n	80068b2 <tcp_remove_listener+0x22>
    }
  }
}
 80068ce:	bf00      	nop
 80068d0:	bf00      	nop
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	08010b98 	.word	0x08010b98
 80068dc:	08010c20 	.word	0x08010c20
 80068e0:	08010bdc 	.word	0x08010bdc

080068e4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d106      	bne.n	8006900 <tcp_listen_closed+0x1c>
 80068f2:	4b14      	ldr	r3, [pc, #80]	; (8006944 <tcp_listen_closed+0x60>)
 80068f4:	f240 1211 	movw	r2, #273	; 0x111
 80068f8:	4913      	ldr	r1, [pc, #76]	; (8006948 <tcp_listen_closed+0x64>)
 80068fa:	4814      	ldr	r0, [pc, #80]	; (800694c <tcp_listen_closed+0x68>)
 80068fc:	f008 fade 	bl	800eebc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	7d1b      	ldrb	r3, [r3, #20]
 8006904:	2b01      	cmp	r3, #1
 8006906:	d006      	beq.n	8006916 <tcp_listen_closed+0x32>
 8006908:	4b0e      	ldr	r3, [pc, #56]	; (8006944 <tcp_listen_closed+0x60>)
 800690a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800690e:	4910      	ldr	r1, [pc, #64]	; (8006950 <tcp_listen_closed+0x6c>)
 8006910:	480e      	ldr	r0, [pc, #56]	; (800694c <tcp_listen_closed+0x68>)
 8006912:	f008 fad3 	bl	800eebc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006916:	2301      	movs	r3, #1
 8006918:	60fb      	str	r3, [r7, #12]
 800691a:	e00b      	b.n	8006934 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800691c:	4a0d      	ldr	r2, [pc, #52]	; (8006954 <tcp_listen_closed+0x70>)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	6879      	ldr	r1, [r7, #4]
 8006928:	4618      	mov	r0, r3
 800692a:	f7ff ffb1 	bl	8006890 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	3301      	adds	r3, #1
 8006932:	60fb      	str	r3, [r7, #12]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2b03      	cmp	r3, #3
 8006938:	d9f0      	bls.n	800691c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800693a:	bf00      	nop
 800693c:	bf00      	nop
 800693e:	3710      	adds	r7, #16
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}
 8006944:	08010b98 	.word	0x08010b98
 8006948:	08010c48 	.word	0x08010c48
 800694c:	08010bdc 	.word	0x08010bdc
 8006950:	08010c54 	.word	0x08010c54
 8006954:	08012b70 	.word	0x08012b70

08006958 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8006958:	b5b0      	push	{r4, r5, r7, lr}
 800695a:	b088      	sub	sp, #32
 800695c:	af04      	add	r7, sp, #16
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	460b      	mov	r3, r1
 8006962:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d106      	bne.n	8006978 <tcp_close_shutdown+0x20>
 800696a:	4b63      	ldr	r3, [pc, #396]	; (8006af8 <tcp_close_shutdown+0x1a0>)
 800696c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8006970:	4962      	ldr	r1, [pc, #392]	; (8006afc <tcp_close_shutdown+0x1a4>)
 8006972:	4863      	ldr	r0, [pc, #396]	; (8006b00 <tcp_close_shutdown+0x1a8>)
 8006974:	f008 faa2 	bl	800eebc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006978:	78fb      	ldrb	r3, [r7, #3]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d066      	beq.n	8006a4c <tcp_close_shutdown+0xf4>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	7d1b      	ldrb	r3, [r3, #20]
 8006982:	2b04      	cmp	r3, #4
 8006984:	d003      	beq.n	800698e <tcp_close_shutdown+0x36>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	7d1b      	ldrb	r3, [r3, #20]
 800698a:	2b07      	cmp	r3, #7
 800698c:	d15e      	bne.n	8006a4c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006992:	2b00      	cmp	r3, #0
 8006994:	d104      	bne.n	80069a0 <tcp_close_shutdown+0x48>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800699a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800699e:	d055      	beq.n	8006a4c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	8b5b      	ldrh	r3, [r3, #26]
 80069a4:	f003 0310 	and.w	r3, r3, #16
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d106      	bne.n	80069ba <tcp_close_shutdown+0x62>
 80069ac:	4b52      	ldr	r3, [pc, #328]	; (8006af8 <tcp_close_shutdown+0x1a0>)
 80069ae:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80069b2:	4954      	ldr	r1, [pc, #336]	; (8006b04 <tcp_close_shutdown+0x1ac>)
 80069b4:	4852      	ldr	r0, [pc, #328]	; (8006b00 <tcp_close_shutdown+0x1a8>)
 80069b6:	f008 fa81 	bl	800eebc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80069c2:	687d      	ldr	r5, [r7, #4]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	3304      	adds	r3, #4
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	8ad2      	ldrh	r2, [r2, #22]
 80069cc:	6879      	ldr	r1, [r7, #4]
 80069ce:	8b09      	ldrh	r1, [r1, #24]
 80069d0:	9102      	str	r1, [sp, #8]
 80069d2:	9201      	str	r2, [sp, #4]
 80069d4:	9300      	str	r3, [sp, #0]
 80069d6:	462b      	mov	r3, r5
 80069d8:	4622      	mov	r2, r4
 80069da:	4601      	mov	r1, r0
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f004 fe91 	bl	800b704 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f001 f8c6 	bl	8007b74 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80069e8:	4b47      	ldr	r3, [pc, #284]	; (8006b08 <tcp_close_shutdown+0x1b0>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d105      	bne.n	80069fe <tcp_close_shutdown+0xa6>
 80069f2:	4b45      	ldr	r3, [pc, #276]	; (8006b08 <tcp_close_shutdown+0x1b0>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	4a43      	ldr	r2, [pc, #268]	; (8006b08 <tcp_close_shutdown+0x1b0>)
 80069fa:	6013      	str	r3, [r2, #0]
 80069fc:	e013      	b.n	8006a26 <tcp_close_shutdown+0xce>
 80069fe:	4b42      	ldr	r3, [pc, #264]	; (8006b08 <tcp_close_shutdown+0x1b0>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	60fb      	str	r3, [r7, #12]
 8006a04:	e00c      	b.n	8006a20 <tcp_close_shutdown+0xc8>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d104      	bne.n	8006a1a <tcp_close_shutdown+0xc2>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	68da      	ldr	r2, [r3, #12]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	60da      	str	r2, [r3, #12]
 8006a18:	e005      	b.n	8006a26 <tcp_close_shutdown+0xce>
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	60fb      	str	r3, [r7, #12]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1ef      	bne.n	8006a06 <tcp_close_shutdown+0xae>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	60da      	str	r2, [r3, #12]
 8006a2c:	4b37      	ldr	r3, [pc, #220]	; (8006b0c <tcp_close_shutdown+0x1b4>)
 8006a2e:	2201      	movs	r2, #1
 8006a30:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8006a32:	4b37      	ldr	r3, [pc, #220]	; (8006b10 <tcp_close_shutdown+0x1b8>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d102      	bne.n	8006a42 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006a3c:	f003 fd5e 	bl	800a4fc <tcp_trigger_input_pcb_close>
 8006a40:	e002      	b.n	8006a48 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f7ff fed6 	bl	80067f4 <tcp_free>
      }
      return ERR_OK;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	e050      	b.n	8006aee <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	7d1b      	ldrb	r3, [r3, #20]
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d03b      	beq.n	8006acc <tcp_close_shutdown+0x174>
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	dc44      	bgt.n	8006ae2 <tcp_close_shutdown+0x18a>
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d002      	beq.n	8006a62 <tcp_close_shutdown+0x10a>
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d02a      	beq.n	8006ab6 <tcp_close_shutdown+0x15e>
 8006a60:	e03f      	b.n	8006ae2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	8adb      	ldrh	r3, [r3, #22]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d021      	beq.n	8006aae <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006a6a:	4b2a      	ldr	r3, [pc, #168]	; (8006b14 <tcp_close_shutdown+0x1bc>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d105      	bne.n	8006a80 <tcp_close_shutdown+0x128>
 8006a74:	4b27      	ldr	r3, [pc, #156]	; (8006b14 <tcp_close_shutdown+0x1bc>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	4a26      	ldr	r2, [pc, #152]	; (8006b14 <tcp_close_shutdown+0x1bc>)
 8006a7c:	6013      	str	r3, [r2, #0]
 8006a7e:	e013      	b.n	8006aa8 <tcp_close_shutdown+0x150>
 8006a80:	4b24      	ldr	r3, [pc, #144]	; (8006b14 <tcp_close_shutdown+0x1bc>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	60bb      	str	r3, [r7, #8]
 8006a86:	e00c      	b.n	8006aa2 <tcp_close_shutdown+0x14a>
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d104      	bne.n	8006a9c <tcp_close_shutdown+0x144>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	68da      	ldr	r2, [r3, #12]
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	60da      	str	r2, [r3, #12]
 8006a9a:	e005      	b.n	8006aa8 <tcp_close_shutdown+0x150>
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	60bb      	str	r3, [r7, #8]
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d1ef      	bne.n	8006a88 <tcp_close_shutdown+0x130>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f7ff fea0 	bl	80067f4 <tcp_free>
      break;
 8006ab4:	e01a      	b.n	8006aec <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f7ff ff14 	bl	80068e4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006abc:	6879      	ldr	r1, [r7, #4]
 8006abe:	4816      	ldr	r0, [pc, #88]	; (8006b18 <tcp_close_shutdown+0x1c0>)
 8006ac0:	f001 f8a8 	bl	8007c14 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f7ff feb1 	bl	800682c <tcp_free_listen>
      break;
 8006aca:	e00f      	b.n	8006aec <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006acc:	6879      	ldr	r1, [r7, #4]
 8006ace:	480e      	ldr	r0, [pc, #56]	; (8006b08 <tcp_close_shutdown+0x1b0>)
 8006ad0:	f001 f8a0 	bl	8007c14 <tcp_pcb_remove>
 8006ad4:	4b0d      	ldr	r3, [pc, #52]	; (8006b0c <tcp_close_shutdown+0x1b4>)
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f7ff fe8a 	bl	80067f4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8006ae0:	e004      	b.n	8006aec <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 f81a 	bl	8006b1c <tcp_close_shutdown_fin>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	e000      	b.n	8006aee <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3710      	adds	r7, #16
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bdb0      	pop	{r4, r5, r7, pc}
 8006af6:	bf00      	nop
 8006af8:	08010b98 	.word	0x08010b98
 8006afc:	08010c6c 	.word	0x08010c6c
 8006b00:	08010bdc 	.word	0x08010bdc
 8006b04:	08010c8c 	.word	0x08010c8c
 8006b08:	2000a4c0 	.word	0x2000a4c0
 8006b0c:	2000a4c8 	.word	0x2000a4c8
 8006b10:	2000a500 	.word	0x2000a500
 8006b14:	2000a4b8 	.word	0x2000a4b8
 8006b18:	2000a4bc 	.word	0x2000a4bc

08006b1c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d106      	bne.n	8006b38 <tcp_close_shutdown_fin+0x1c>
 8006b2a:	4b2e      	ldr	r3, [pc, #184]	; (8006be4 <tcp_close_shutdown_fin+0xc8>)
 8006b2c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8006b30:	492d      	ldr	r1, [pc, #180]	; (8006be8 <tcp_close_shutdown_fin+0xcc>)
 8006b32:	482e      	ldr	r0, [pc, #184]	; (8006bec <tcp_close_shutdown_fin+0xd0>)
 8006b34:	f008 f9c2 	bl	800eebc <iprintf>

  switch (pcb->state) {
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	7d1b      	ldrb	r3, [r3, #20]
 8006b3c:	2b07      	cmp	r3, #7
 8006b3e:	d020      	beq.n	8006b82 <tcp_close_shutdown_fin+0x66>
 8006b40:	2b07      	cmp	r3, #7
 8006b42:	dc2b      	bgt.n	8006b9c <tcp_close_shutdown_fin+0x80>
 8006b44:	2b03      	cmp	r3, #3
 8006b46:	d002      	beq.n	8006b4e <tcp_close_shutdown_fin+0x32>
 8006b48:	2b04      	cmp	r3, #4
 8006b4a:	d00d      	beq.n	8006b68 <tcp_close_shutdown_fin+0x4c>
 8006b4c:	e026      	b.n	8006b9c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f003 fee6 	bl	800a920 <tcp_send_fin>
 8006b54:	4603      	mov	r3, r0
 8006b56:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006b58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d11f      	bne.n	8006ba0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2205      	movs	r2, #5
 8006b64:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006b66:	e01b      	b.n	8006ba0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f003 fed9 	bl	800a920 <tcp_send_fin>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d114      	bne.n	8006ba4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2205      	movs	r2, #5
 8006b7e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006b80:	e010      	b.n	8006ba4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f003 fecc 	bl	800a920 <tcp_send_fin>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006b8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d109      	bne.n	8006ba8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2209      	movs	r2, #9
 8006b98:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006b9a:	e005      	b.n	8006ba8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	e01c      	b.n	8006bda <tcp_close_shutdown_fin+0xbe>
      break;
 8006ba0:	bf00      	nop
 8006ba2:	e002      	b.n	8006baa <tcp_close_shutdown_fin+0x8e>
      break;
 8006ba4:	bf00      	nop
 8006ba6:	e000      	b.n	8006baa <tcp_close_shutdown_fin+0x8e>
      break;
 8006ba8:	bf00      	nop
  }

  if (err == ERR_OK) {
 8006baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d103      	bne.n	8006bba <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f003 fff2 	bl	800ab9c <tcp_output>
 8006bb8:	e00d      	b.n	8006bd6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8006bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bc2:	d108      	bne.n	8006bd6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	8b5b      	ldrh	r3, [r3, #26]
 8006bc8:	f043 0308 	orr.w	r3, r3, #8
 8006bcc:	b29a      	uxth	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	e001      	b.n	8006bda <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8006bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	08010b98 	.word	0x08010b98
 8006be8:	08010c48 	.word	0x08010c48
 8006bec:	08010bdc 	.word	0x08010bdc

08006bf0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b082      	sub	sp, #8
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d109      	bne.n	8006c12 <tcp_close+0x22>
 8006bfe:	4b0f      	ldr	r3, [pc, #60]	; (8006c3c <tcp_close+0x4c>)
 8006c00:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8006c04:	490e      	ldr	r1, [pc, #56]	; (8006c40 <tcp_close+0x50>)
 8006c06:	480f      	ldr	r0, [pc, #60]	; (8006c44 <tcp_close+0x54>)
 8006c08:	f008 f958 	bl	800eebc <iprintf>
 8006c0c:	f06f 030f 	mvn.w	r3, #15
 8006c10:	e00f      	b.n	8006c32 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	7d1b      	ldrb	r3, [r3, #20]
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d006      	beq.n	8006c28 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	8b5b      	ldrh	r3, [r3, #26]
 8006c1e:	f043 0310 	orr.w	r3, r3, #16
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006c28:	2101      	movs	r1, #1
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f7ff fe94 	bl	8006958 <tcp_close_shutdown>
 8006c30:	4603      	mov	r3, r0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3708      	adds	r7, #8
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	08010b98 	.word	0x08010b98
 8006c40:	08010ca8 	.word	0x08010ca8
 8006c44:	08010bdc 	.word	0x08010bdc

08006c48 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b08e      	sub	sp, #56	; 0x38
 8006c4c:	af04      	add	r7, sp, #16
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d107      	bne.n	8006c68 <tcp_abandon+0x20>
 8006c58:	4b52      	ldr	r3, [pc, #328]	; (8006da4 <tcp_abandon+0x15c>)
 8006c5a:	f240 223d 	movw	r2, #573	; 0x23d
 8006c5e:	4952      	ldr	r1, [pc, #328]	; (8006da8 <tcp_abandon+0x160>)
 8006c60:	4852      	ldr	r0, [pc, #328]	; (8006dac <tcp_abandon+0x164>)
 8006c62:	f008 f92b 	bl	800eebc <iprintf>
 8006c66:	e099      	b.n	8006d9c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	7d1b      	ldrb	r3, [r3, #20]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d106      	bne.n	8006c7e <tcp_abandon+0x36>
 8006c70:	4b4c      	ldr	r3, [pc, #304]	; (8006da4 <tcp_abandon+0x15c>)
 8006c72:	f44f 7210 	mov.w	r2, #576	; 0x240
 8006c76:	494e      	ldr	r1, [pc, #312]	; (8006db0 <tcp_abandon+0x168>)
 8006c78:	484c      	ldr	r0, [pc, #304]	; (8006dac <tcp_abandon+0x164>)
 8006c7a:	f008 f91f 	bl	800eebc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	7d1b      	ldrb	r3, [r3, #20]
 8006c82:	2b0a      	cmp	r3, #10
 8006c84:	d107      	bne.n	8006c96 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8006c86:	6879      	ldr	r1, [r7, #4]
 8006c88:	484a      	ldr	r0, [pc, #296]	; (8006db4 <tcp_abandon+0x16c>)
 8006c8a:	f000 ffc3 	bl	8007c14 <tcp_pcb_remove>
    tcp_free(pcb);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f7ff fdb0 	bl	80067f4 <tcp_free>
 8006c94:	e082      	b.n	8006d9c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8006c96:	2300      	movs	r3, #0
 8006c98:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ca2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cb0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	691b      	ldr	r3, [r3, #16]
 8006cb6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	7d1b      	ldrb	r3, [r3, #20]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d126      	bne.n	8006d0e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	8adb      	ldrh	r3, [r3, #22]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d02e      	beq.n	8006d26 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006cc8:	4b3b      	ldr	r3, [pc, #236]	; (8006db8 <tcp_abandon+0x170>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d105      	bne.n	8006cde <tcp_abandon+0x96>
 8006cd2:	4b39      	ldr	r3, [pc, #228]	; (8006db8 <tcp_abandon+0x170>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	4a37      	ldr	r2, [pc, #220]	; (8006db8 <tcp_abandon+0x170>)
 8006cda:	6013      	str	r3, [r2, #0]
 8006cdc:	e013      	b.n	8006d06 <tcp_abandon+0xbe>
 8006cde:	4b36      	ldr	r3, [pc, #216]	; (8006db8 <tcp_abandon+0x170>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	61fb      	str	r3, [r7, #28]
 8006ce4:	e00c      	b.n	8006d00 <tcp_abandon+0xb8>
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d104      	bne.n	8006cfa <tcp_abandon+0xb2>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	68da      	ldr	r2, [r3, #12]
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	60da      	str	r2, [r3, #12]
 8006cf8:	e005      	b.n	8006d06 <tcp_abandon+0xbe>
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	61fb      	str	r3, [r7, #28]
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d1ef      	bne.n	8006ce6 <tcp_abandon+0x9e>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	60da      	str	r2, [r3, #12]
 8006d0c:	e00b      	b.n	8006d26 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	8adb      	ldrh	r3, [r3, #22]
 8006d16:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006d18:	6879      	ldr	r1, [r7, #4]
 8006d1a:	4828      	ldr	r0, [pc, #160]	; (8006dbc <tcp_abandon+0x174>)
 8006d1c:	f000 ff7a 	bl	8007c14 <tcp_pcb_remove>
 8006d20:	4b27      	ldr	r3, [pc, #156]	; (8006dc0 <tcp_abandon+0x178>)
 8006d22:	2201      	movs	r2, #1
 8006d24:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d004      	beq.n	8006d38 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d32:	4618      	mov	r0, r3
 8006d34:	f000 fd1c 	bl	8007770 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d004      	beq.n	8006d4a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d44:	4618      	mov	r0, r3
 8006d46:	f000 fd13 	bl	8007770 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d004      	beq.n	8006d5c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d56:	4618      	mov	r0, r3
 8006d58:	f000 fd0a 	bl	8007770 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8006d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d00e      	beq.n	8006d80 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006d62:	6879      	ldr	r1, [r7, #4]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	3304      	adds	r3, #4
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	8b12      	ldrh	r2, [r2, #24]
 8006d6c:	9202      	str	r2, [sp, #8]
 8006d6e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006d70:	9201      	str	r2, [sp, #4]
 8006d72:	9300      	str	r3, [sp, #0]
 8006d74:	460b      	mov	r3, r1
 8006d76:	697a      	ldr	r2, [r7, #20]
 8006d78:	69b9      	ldr	r1, [r7, #24]
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f004 fcc2 	bl	800b704 <tcp_rst>
    }
    last_state = pcb->state;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	7d1b      	ldrb	r3, [r3, #20]
 8006d84:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f7ff fd34 	bl	80067f4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d004      	beq.n	8006d9c <tcp_abandon+0x154>
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	f06f 010c 	mvn.w	r1, #12
 8006d98:	68f8      	ldr	r0, [r7, #12]
 8006d9a:	4798      	blx	r3
  }
}
 8006d9c:	3728      	adds	r7, #40	; 0x28
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop
 8006da4:	08010b98 	.word	0x08010b98
 8006da8:	08010cdc 	.word	0x08010cdc
 8006dac:	08010bdc 	.word	0x08010bdc
 8006db0:	08010cf8 	.word	0x08010cf8
 8006db4:	2000a4c4 	.word	0x2000a4c4
 8006db8:	2000a4b8 	.word	0x2000a4b8
 8006dbc:	2000a4c0 	.word	0x2000a4c0
 8006dc0:	2000a4c8 	.word	0x2000a4c8

08006dc4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8006dcc:	2101      	movs	r1, #1
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f7ff ff3a 	bl	8006c48 <tcp_abandon>
}
 8006dd4:	bf00      	nop
 8006dd6:	3708      	adds	r7, #8
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d106      	bne.n	8006df8 <tcp_update_rcv_ann_wnd+0x1c>
 8006dea:	4b25      	ldr	r3, [pc, #148]	; (8006e80 <tcp_update_rcv_ann_wnd+0xa4>)
 8006dec:	f240 32a6 	movw	r2, #934	; 0x3a6
 8006df0:	4924      	ldr	r1, [pc, #144]	; (8006e84 <tcp_update_rcv_ann_wnd+0xa8>)
 8006df2:	4825      	ldr	r0, [pc, #148]	; (8006e88 <tcp_update_rcv_ann_wnd+0xac>)
 8006df4:	f008 f862 	bl	800eebc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006e00:	4413      	add	r3, r2
 8006e02:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8006e0c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8006e10:	bf28      	it	cs
 8006e12:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8006e16:	b292      	uxth	r2, r2
 8006e18:	4413      	add	r3, r2
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	db08      	blt.n	8006e34 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	e020      	b.n	8006e76 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	dd03      	ble.n	8006e4a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006e48:	e014      	b.n	8006e74 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e5c:	d306      	bcc.n	8006e6c <tcp_update_rcv_ann_wnd+0x90>
 8006e5e:	4b08      	ldr	r3, [pc, #32]	; (8006e80 <tcp_update_rcv_ann_wnd+0xa4>)
 8006e60:	f240 32b6 	movw	r2, #950	; 0x3b6
 8006e64:	4909      	ldr	r1, [pc, #36]	; (8006e8c <tcp_update_rcv_ann_wnd+0xb0>)
 8006e66:	4808      	ldr	r0, [pc, #32]	; (8006e88 <tcp_update_rcv_ann_wnd+0xac>)
 8006e68:	f008 f828 	bl	800eebc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8006e74:	2300      	movs	r3, #0
  }
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3710      	adds	r7, #16
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	08010b98 	.word	0x08010b98
 8006e84:	08010df4 	.word	0x08010df4
 8006e88:	08010bdc 	.word	0x08010bdc
 8006e8c:	08010e18 	.word	0x08010e18

08006e90 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	460b      	mov	r3, r1
 8006e9a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d107      	bne.n	8006eb2 <tcp_recved+0x22>
 8006ea2:	4b1f      	ldr	r3, [pc, #124]	; (8006f20 <tcp_recved+0x90>)
 8006ea4:	f240 32cf 	movw	r2, #975	; 0x3cf
 8006ea8:	491e      	ldr	r1, [pc, #120]	; (8006f24 <tcp_recved+0x94>)
 8006eaa:	481f      	ldr	r0, [pc, #124]	; (8006f28 <tcp_recved+0x98>)
 8006eac:	f008 f806 	bl	800eebc <iprintf>
 8006eb0:	e032      	b.n	8006f18 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	7d1b      	ldrb	r3, [r3, #20]
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d106      	bne.n	8006ec8 <tcp_recved+0x38>
 8006eba:	4b19      	ldr	r3, [pc, #100]	; (8006f20 <tcp_recved+0x90>)
 8006ebc:	f240 32d2 	movw	r2, #978	; 0x3d2
 8006ec0:	491a      	ldr	r1, [pc, #104]	; (8006f2c <tcp_recved+0x9c>)
 8006ec2:	4819      	ldr	r0, [pc, #100]	; (8006f28 <tcp_recved+0x98>)
 8006ec4:	f007 fffa 	bl	800eebc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006ecc:	887b      	ldrh	r3, [r7, #2]
 8006ece:	4413      	add	r3, r2
 8006ed0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8006ed2:	89fb      	ldrh	r3, [r7, #14]
 8006ed4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006ed8:	d804      	bhi.n	8006ee4 <tcp_recved+0x54>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ede:	89fa      	ldrh	r2, [r7, #14]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d204      	bcs.n	8006eee <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006eea:	851a      	strh	r2, [r3, #40]	; 0x28
 8006eec:	e002      	b.n	8006ef4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	89fa      	ldrh	r2, [r7, #14]
 8006ef2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f7ff ff71 	bl	8006ddc <tcp_update_rcv_ann_wnd>
 8006efa:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8006f02:	d309      	bcc.n	8006f18 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	8b5b      	ldrh	r3, [r3, #26]
 8006f08:	f043 0302 	orr.w	r3, r3, #2
 8006f0c:	b29a      	uxth	r2, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f003 fe42 	bl	800ab9c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	08010b98 	.word	0x08010b98
 8006f24:	08010e34 	.word	0x08010e34
 8006f28:	08010bdc 	.word	0x08010bdc
 8006f2c:	08010e4c 	.word	0x08010e4c

08006f30 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8006f30:	b5b0      	push	{r4, r5, r7, lr}
 8006f32:	b090      	sub	sp, #64	; 0x40
 8006f34:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8006f36:	2300      	movs	r3, #0
 8006f38:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8006f3c:	4b94      	ldr	r3, [pc, #592]	; (8007190 <tcp_slowtmr+0x260>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	3301      	adds	r3, #1
 8006f42:	4a93      	ldr	r2, [pc, #588]	; (8007190 <tcp_slowtmr+0x260>)
 8006f44:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8006f46:	4b93      	ldr	r3, [pc, #588]	; (8007194 <tcp_slowtmr+0x264>)
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	b2da      	uxtb	r2, r3
 8006f4e:	4b91      	ldr	r3, [pc, #580]	; (8007194 <tcp_slowtmr+0x264>)
 8006f50:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8006f52:	2300      	movs	r3, #0
 8006f54:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8006f56:	4b90      	ldr	r3, [pc, #576]	; (8007198 <tcp_slowtmr+0x268>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8006f5c:	e29d      	b.n	800749a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f60:	7d1b      	ldrb	r3, [r3, #20]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d106      	bne.n	8006f74 <tcp_slowtmr+0x44>
 8006f66:	4b8d      	ldr	r3, [pc, #564]	; (800719c <tcp_slowtmr+0x26c>)
 8006f68:	f240 42be 	movw	r2, #1214	; 0x4be
 8006f6c:	498c      	ldr	r1, [pc, #560]	; (80071a0 <tcp_slowtmr+0x270>)
 8006f6e:	488d      	ldr	r0, [pc, #564]	; (80071a4 <tcp_slowtmr+0x274>)
 8006f70:	f007 ffa4 	bl	800eebc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8006f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f76:	7d1b      	ldrb	r3, [r3, #20]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d106      	bne.n	8006f8a <tcp_slowtmr+0x5a>
 8006f7c:	4b87      	ldr	r3, [pc, #540]	; (800719c <tcp_slowtmr+0x26c>)
 8006f7e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8006f82:	4989      	ldr	r1, [pc, #548]	; (80071a8 <tcp_slowtmr+0x278>)
 8006f84:	4887      	ldr	r0, [pc, #540]	; (80071a4 <tcp_slowtmr+0x274>)
 8006f86:	f007 ff99 	bl	800eebc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8006f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f8c:	7d1b      	ldrb	r3, [r3, #20]
 8006f8e:	2b0a      	cmp	r3, #10
 8006f90:	d106      	bne.n	8006fa0 <tcp_slowtmr+0x70>
 8006f92:	4b82      	ldr	r3, [pc, #520]	; (800719c <tcp_slowtmr+0x26c>)
 8006f94:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8006f98:	4984      	ldr	r1, [pc, #528]	; (80071ac <tcp_slowtmr+0x27c>)
 8006f9a:	4882      	ldr	r0, [pc, #520]	; (80071a4 <tcp_slowtmr+0x274>)
 8006f9c:	f007 ff8e 	bl	800eebc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8006fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa2:	7f9a      	ldrb	r2, [r3, #30]
 8006fa4:	4b7b      	ldr	r3, [pc, #492]	; (8007194 <tcp_slowtmr+0x264>)
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d105      	bne.n	8006fb8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8006fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fae:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8006fb6:	e270      	b.n	800749a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8006fb8:	4b76      	ldr	r3, [pc, #472]	; (8007194 <tcp_slowtmr+0x264>)
 8006fba:	781a      	ldrb	r2, [r3, #0]
 8006fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fbe:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8006fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fce:	7d1b      	ldrb	r3, [r3, #20]
 8006fd0:	2b02      	cmp	r3, #2
 8006fd2:	d10a      	bne.n	8006fea <tcp_slowtmr+0xba>
 8006fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006fda:	2b05      	cmp	r3, #5
 8006fdc:	d905      	bls.n	8006fea <tcp_slowtmr+0xba>
      ++pcb_remove;
 8006fde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006fe8:	e11e      	b.n	8007228 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8006fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006ff0:	2b0b      	cmp	r3, #11
 8006ff2:	d905      	bls.n	8007000 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8006ff4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006ffe:	e113      	b.n	8007228 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8007000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007002:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007006:	2b00      	cmp	r3, #0
 8007008:	d075      	beq.n	80070f6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800700a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800700c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800700e:	2b00      	cmp	r3, #0
 8007010:	d006      	beq.n	8007020 <tcp_slowtmr+0xf0>
 8007012:	4b62      	ldr	r3, [pc, #392]	; (800719c <tcp_slowtmr+0x26c>)
 8007014:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8007018:	4965      	ldr	r1, [pc, #404]	; (80071b0 <tcp_slowtmr+0x280>)
 800701a:	4862      	ldr	r0, [pc, #392]	; (80071a4 <tcp_slowtmr+0x274>)
 800701c:	f007 ff4e 	bl	800eebc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8007020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007022:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007024:	2b00      	cmp	r3, #0
 8007026:	d106      	bne.n	8007036 <tcp_slowtmr+0x106>
 8007028:	4b5c      	ldr	r3, [pc, #368]	; (800719c <tcp_slowtmr+0x26c>)
 800702a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800702e:	4961      	ldr	r1, [pc, #388]	; (80071b4 <tcp_slowtmr+0x284>)
 8007030:	485c      	ldr	r0, [pc, #368]	; (80071a4 <tcp_slowtmr+0x274>)
 8007032:	f007 ff43 	bl	800eebc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8007036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007038:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800703c:	2b0b      	cmp	r3, #11
 800703e:	d905      	bls.n	800704c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8007040:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007044:	3301      	adds	r3, #1
 8007046:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800704a:	e0ed      	b.n	8007228 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800704c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800704e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007052:	3b01      	subs	r3, #1
 8007054:	4a58      	ldr	r2, [pc, #352]	; (80071b8 <tcp_slowtmr+0x288>)
 8007056:	5cd3      	ldrb	r3, [r2, r3]
 8007058:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800705a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007060:	7c7a      	ldrb	r2, [r7, #17]
 8007062:	429a      	cmp	r2, r3
 8007064:	d907      	bls.n	8007076 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8007066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007068:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800706c:	3301      	adds	r3, #1
 800706e:	b2da      	uxtb	r2, r3
 8007070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007072:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8007076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007078:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800707c:	7c7a      	ldrb	r2, [r7, #17]
 800707e:	429a      	cmp	r2, r3
 8007080:	f200 80d2 	bhi.w	8007228 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8007084:	2301      	movs	r3, #1
 8007086:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8007088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800708a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800708e:	2b00      	cmp	r3, #0
 8007090:	d108      	bne.n	80070a4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8007092:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007094:	f004 fc2a 	bl	800b8ec <tcp_zero_window_probe>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d014      	beq.n	80070c8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800709e:	2300      	movs	r3, #0
 80070a0:	623b      	str	r3, [r7, #32]
 80070a2:	e011      	b.n	80070c8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80070a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80070aa:	4619      	mov	r1, r3
 80070ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070ae:	f003 faef 	bl	800a690 <tcp_split_unsent_seg>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d107      	bne.n	80070c8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80070b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070ba:	f003 fd6f 	bl	800ab9c <tcp_output>
 80070be:	4603      	mov	r3, r0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d101      	bne.n	80070c8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80070c4:	2300      	movs	r3, #0
 80070c6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80070c8:	6a3b      	ldr	r3, [r7, #32]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	f000 80ac 	beq.w	8007228 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80070d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d2:	2200      	movs	r2, #0
 80070d4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80070d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070da:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80070de:	2b06      	cmp	r3, #6
 80070e0:	f200 80a2 	bhi.w	8007228 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80070e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80070ea:	3301      	adds	r3, #1
 80070ec:	b2da      	uxtb	r2, r3
 80070ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80070f4:	e098      	b.n	8007228 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80070f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	db0f      	blt.n	8007120 <tcp_slowtmr+0x1f0>
 8007100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007102:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007106:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800710a:	4293      	cmp	r3, r2
 800710c:	d008      	beq.n	8007120 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800710e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007110:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007114:	b29b      	uxth	r3, r3
 8007116:	3301      	adds	r3, #1
 8007118:	b29b      	uxth	r3, r3
 800711a:	b21a      	sxth	r2, r3
 800711c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800711e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8007120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007122:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8007126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007128:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800712c:	429a      	cmp	r2, r3
 800712e:	db7b      	blt.n	8007228 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8007130:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007132:	f004 f827 	bl	800b184 <tcp_rexmit_rto_prepare>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d007      	beq.n	800714c <tcp_slowtmr+0x21c>
 800713c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800713e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007140:	2b00      	cmp	r3, #0
 8007142:	d171      	bne.n	8007228 <tcp_slowtmr+0x2f8>
 8007144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007148:	2b00      	cmp	r3, #0
 800714a:	d06d      	beq.n	8007228 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800714c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800714e:	7d1b      	ldrb	r3, [r3, #20]
 8007150:	2b02      	cmp	r3, #2
 8007152:	d03a      	beq.n	80071ca <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8007154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007156:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800715a:	2b0c      	cmp	r3, #12
 800715c:	bf28      	it	cs
 800715e:	230c      	movcs	r3, #12
 8007160:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007164:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007168:	10db      	asrs	r3, r3, #3
 800716a:	b21b      	sxth	r3, r3
 800716c:	461a      	mov	r2, r3
 800716e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007170:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007174:	4413      	add	r3, r2
 8007176:	7efa      	ldrb	r2, [r7, #27]
 8007178:	4910      	ldr	r1, [pc, #64]	; (80071bc <tcp_slowtmr+0x28c>)
 800717a:	5c8a      	ldrb	r2, [r1, r2]
 800717c:	4093      	lsls	r3, r2
 800717e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8007186:	4293      	cmp	r3, r2
 8007188:	dc1a      	bgt.n	80071c0 <tcp_slowtmr+0x290>
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	b21a      	sxth	r2, r3
 800718e:	e019      	b.n	80071c4 <tcp_slowtmr+0x294>
 8007190:	2000a4b4 	.word	0x2000a4b4
 8007194:	2000a4ca 	.word	0x2000a4ca
 8007198:	2000a4c0 	.word	0x2000a4c0
 800719c:	08010b98 	.word	0x08010b98
 80071a0:	08010edc 	.word	0x08010edc
 80071a4:	08010bdc 	.word	0x08010bdc
 80071a8:	08010f08 	.word	0x08010f08
 80071ac:	08010f34 	.word	0x08010f34
 80071b0:	08010f64 	.word	0x08010f64
 80071b4:	08010f98 	.word	0x08010f98
 80071b8:	08012b68 	.word	0x08012b68
 80071bc:	08012b58 	.word	0x08012b58
 80071c0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80071c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80071ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071cc:	2200      	movs	r2, #0
 80071ce:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80071d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80071d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80071dc:	4293      	cmp	r3, r2
 80071de:	bf28      	it	cs
 80071e0:	4613      	movcs	r3, r2
 80071e2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80071e4:	8a7b      	ldrh	r3, [r7, #18]
 80071e6:	085b      	lsrs	r3, r3, #1
 80071e8:	b29a      	uxth	r2, r3
 80071ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80071f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80071f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80071fa:	005b      	lsls	r3, r3, #1
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	429a      	cmp	r2, r3
 8007200:	d206      	bcs.n	8007210 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8007202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007204:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007206:	005b      	lsls	r3, r3, #1
 8007208:	b29a      	uxth	r2, r3
 800720a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800720c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8007210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007212:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007216:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800721a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800721c:	2200      	movs	r2, #0
 800721e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8007222:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007224:	f004 f81e 	bl	800b264 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8007228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800722a:	7d1b      	ldrb	r3, [r3, #20]
 800722c:	2b06      	cmp	r3, #6
 800722e:	d111      	bne.n	8007254 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8007230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007232:	8b5b      	ldrh	r3, [r3, #26]
 8007234:	f003 0310 	and.w	r3, r3, #16
 8007238:	2b00      	cmp	r3, #0
 800723a:	d00b      	beq.n	8007254 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800723c:	4b9c      	ldr	r3, [pc, #624]	; (80074b0 <tcp_slowtmr+0x580>)
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007242:	6a1b      	ldr	r3, [r3, #32]
 8007244:	1ad3      	subs	r3, r2, r3
 8007246:	2b28      	cmp	r3, #40	; 0x28
 8007248:	d904      	bls.n	8007254 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800724a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800724e:	3301      	adds	r3, #1
 8007250:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007256:	7a5b      	ldrb	r3, [r3, #9]
 8007258:	f003 0308 	and.w	r3, r3, #8
 800725c:	2b00      	cmp	r3, #0
 800725e:	d04a      	beq.n	80072f6 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8007260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007262:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007264:	2b04      	cmp	r3, #4
 8007266:	d003      	beq.n	8007270 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8007268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800726a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800726c:	2b07      	cmp	r3, #7
 800726e:	d142      	bne.n	80072f6 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007270:	4b8f      	ldr	r3, [pc, #572]	; (80074b0 <tcp_slowtmr+0x580>)
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007276:	6a1b      	ldr	r3, [r3, #32]
 8007278:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800727a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800727c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007280:	4b8c      	ldr	r3, [pc, #560]	; (80074b4 <tcp_slowtmr+0x584>)
 8007282:	440b      	add	r3, r1
 8007284:	498c      	ldr	r1, [pc, #560]	; (80074b8 <tcp_slowtmr+0x588>)
 8007286:	fba1 1303 	umull	r1, r3, r1, r3
 800728a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800728c:	429a      	cmp	r2, r3
 800728e:	d90a      	bls.n	80072a6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8007290:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007294:	3301      	adds	r3, #1
 8007296:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800729a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800729e:	3301      	adds	r3, #1
 80072a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80072a4:	e027      	b.n	80072f6 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80072a6:	4b82      	ldr	r3, [pc, #520]	; (80074b0 <tcp_slowtmr+0x580>)
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ac:	6a1b      	ldr	r3, [r3, #32]
 80072ae:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80072b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80072b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80072bc:	4618      	mov	r0, r3
 80072be:	4b7f      	ldr	r3, [pc, #508]	; (80074bc <tcp_slowtmr+0x58c>)
 80072c0:	fb00 f303 	mul.w	r3, r0, r3
 80072c4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80072c6:	497c      	ldr	r1, [pc, #496]	; (80074b8 <tcp_slowtmr+0x588>)
 80072c8:	fba1 1303 	umull	r1, r3, r1, r3
 80072cc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d911      	bls.n	80072f6 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 80072d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072d4:	f004 faca 	bl	800b86c <tcp_keepalive>
 80072d8:	4603      	mov	r3, r0
 80072da:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80072de:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d107      	bne.n	80072f6 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 80072e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80072ec:	3301      	adds	r3, #1
 80072ee:	b2da      	uxtb	r2, r3
 80072f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80072f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d011      	beq.n	8007322 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80072fe:	4b6c      	ldr	r3, [pc, #432]	; (80074b0 <tcp_slowtmr+0x580>)
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007304:	6a1b      	ldr	r3, [r3, #32]
 8007306:	1ad2      	subs	r2, r2, r3
 8007308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800730a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800730e:	4619      	mov	r1, r3
 8007310:	460b      	mov	r3, r1
 8007312:	005b      	lsls	r3, r3, #1
 8007314:	440b      	add	r3, r1
 8007316:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8007318:	429a      	cmp	r2, r3
 800731a:	d302      	bcc.n	8007322 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800731c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800731e:	f000 fddd 	bl	8007edc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8007322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007324:	7d1b      	ldrb	r3, [r3, #20]
 8007326:	2b03      	cmp	r3, #3
 8007328:	d10b      	bne.n	8007342 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800732a:	4b61      	ldr	r3, [pc, #388]	; (80074b0 <tcp_slowtmr+0x580>)
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007330:	6a1b      	ldr	r3, [r3, #32]
 8007332:	1ad3      	subs	r3, r2, r3
 8007334:	2b28      	cmp	r3, #40	; 0x28
 8007336:	d904      	bls.n	8007342 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8007338:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800733c:	3301      	adds	r3, #1
 800733e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8007342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007344:	7d1b      	ldrb	r3, [r3, #20]
 8007346:	2b09      	cmp	r3, #9
 8007348:	d10b      	bne.n	8007362 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800734a:	4b59      	ldr	r3, [pc, #356]	; (80074b0 <tcp_slowtmr+0x580>)
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007350:	6a1b      	ldr	r3, [r3, #32]
 8007352:	1ad3      	subs	r3, r2, r3
 8007354:	2bf0      	cmp	r3, #240	; 0xf0
 8007356:	d904      	bls.n	8007362 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8007358:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800735c:	3301      	adds	r3, #1
 800735e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007362:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007366:	2b00      	cmp	r3, #0
 8007368:	d060      	beq.n	800742c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800736a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800736c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007370:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8007372:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007374:	f000 fbfe 	bl	8007b74 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8007378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737a:	2b00      	cmp	r3, #0
 800737c:	d010      	beq.n	80073a0 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800737e:	4b50      	ldr	r3, [pc, #320]	; (80074c0 <tcp_slowtmr+0x590>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007384:	429a      	cmp	r2, r3
 8007386:	d106      	bne.n	8007396 <tcp_slowtmr+0x466>
 8007388:	4b4e      	ldr	r3, [pc, #312]	; (80074c4 <tcp_slowtmr+0x594>)
 800738a:	f240 526d 	movw	r2, #1389	; 0x56d
 800738e:	494e      	ldr	r1, [pc, #312]	; (80074c8 <tcp_slowtmr+0x598>)
 8007390:	484e      	ldr	r0, [pc, #312]	; (80074cc <tcp_slowtmr+0x59c>)
 8007392:	f007 fd93 	bl	800eebc <iprintf>
        prev->next = pcb->next;
 8007396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007398:	68da      	ldr	r2, [r3, #12]
 800739a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739c:	60da      	str	r2, [r3, #12]
 800739e:	e00f      	b.n	80073c0 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80073a0:	4b47      	ldr	r3, [pc, #284]	; (80074c0 <tcp_slowtmr+0x590>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d006      	beq.n	80073b8 <tcp_slowtmr+0x488>
 80073aa:	4b46      	ldr	r3, [pc, #280]	; (80074c4 <tcp_slowtmr+0x594>)
 80073ac:	f240 5271 	movw	r2, #1393	; 0x571
 80073b0:	4947      	ldr	r1, [pc, #284]	; (80074d0 <tcp_slowtmr+0x5a0>)
 80073b2:	4846      	ldr	r0, [pc, #280]	; (80074cc <tcp_slowtmr+0x59c>)
 80073b4:	f007 fd82 	bl	800eebc <iprintf>
        tcp_active_pcbs = pcb->next;
 80073b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ba:	68db      	ldr	r3, [r3, #12]
 80073bc:	4a40      	ldr	r2, [pc, #256]	; (80074c0 <tcp_slowtmr+0x590>)
 80073be:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80073c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d013      	beq.n	80073f0 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80073c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ca:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80073cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ce:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80073d0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80073d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d4:	3304      	adds	r3, #4
 80073d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073d8:	8ad2      	ldrh	r2, [r2, #22]
 80073da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80073dc:	8b09      	ldrh	r1, [r1, #24]
 80073de:	9102      	str	r1, [sp, #8]
 80073e0:	9201      	str	r2, [sp, #4]
 80073e2:	9300      	str	r3, [sp, #0]
 80073e4:	462b      	mov	r3, r5
 80073e6:	4622      	mov	r2, r4
 80073e8:	4601      	mov	r1, r0
 80073ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80073ec:	f004 f98a 	bl	800b704 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80073f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f2:	691b      	ldr	r3, [r3, #16]
 80073f4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80073f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f8:	7d1b      	ldrb	r3, [r3, #20]
 80073fa:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80073fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073fe:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8007400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007406:	6838      	ldr	r0, [r7, #0]
 8007408:	f7ff f9f4 	bl	80067f4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800740c:	4b31      	ldr	r3, [pc, #196]	; (80074d4 <tcp_slowtmr+0x5a4>)
 800740e:	2200      	movs	r2, #0
 8007410:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d004      	beq.n	8007422 <tcp_slowtmr+0x4f2>
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f06f 010c 	mvn.w	r1, #12
 800741e:	68b8      	ldr	r0, [r7, #8]
 8007420:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8007422:	4b2c      	ldr	r3, [pc, #176]	; (80074d4 <tcp_slowtmr+0x5a4>)
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d037      	beq.n	800749a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800742a:	e592      	b.n	8006f52 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800742c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800742e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8007436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007438:	7f1b      	ldrb	r3, [r3, #28]
 800743a:	3301      	adds	r3, #1
 800743c:	b2da      	uxtb	r2, r3
 800743e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007440:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8007442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007444:	7f1a      	ldrb	r2, [r3, #28]
 8007446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007448:	7f5b      	ldrb	r3, [r3, #29]
 800744a:	429a      	cmp	r2, r3
 800744c:	d325      	bcc.n	800749a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800744e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007450:	2200      	movs	r2, #0
 8007452:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8007454:	4b1f      	ldr	r3, [pc, #124]	; (80074d4 <tcp_slowtmr+0x5a4>)
 8007456:	2200      	movs	r2, #0
 8007458:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800745a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00b      	beq.n	800747c <tcp_slowtmr+0x54c>
 8007464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007466:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800746a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800746c:	6912      	ldr	r2, [r2, #16]
 800746e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007470:	4610      	mov	r0, r2
 8007472:	4798      	blx	r3
 8007474:	4603      	mov	r3, r0
 8007476:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800747a:	e002      	b.n	8007482 <tcp_slowtmr+0x552>
 800747c:	2300      	movs	r3, #0
 800747e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8007482:	4b14      	ldr	r3, [pc, #80]	; (80074d4 <tcp_slowtmr+0x5a4>)
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d000      	beq.n	800748c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800748a:	e562      	b.n	8006f52 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800748c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007490:	2b00      	cmp	r3, #0
 8007492:	d102      	bne.n	800749a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8007494:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007496:	f003 fb81 	bl	800ab9c <tcp_output>
  while (pcb != NULL) {
 800749a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800749c:	2b00      	cmp	r3, #0
 800749e:	f47f ad5e 	bne.w	8006f5e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80074a2:	2300      	movs	r3, #0
 80074a4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80074a6:	4b0c      	ldr	r3, [pc, #48]	; (80074d8 <tcp_slowtmr+0x5a8>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80074ac:	e069      	b.n	8007582 <tcp_slowtmr+0x652>
 80074ae:	bf00      	nop
 80074b0:	2000a4b4 	.word	0x2000a4b4
 80074b4:	000a4cb8 	.word	0x000a4cb8
 80074b8:	10624dd3 	.word	0x10624dd3
 80074bc:	000124f8 	.word	0x000124f8
 80074c0:	2000a4c0 	.word	0x2000a4c0
 80074c4:	08010b98 	.word	0x08010b98
 80074c8:	08010fd0 	.word	0x08010fd0
 80074cc:	08010bdc 	.word	0x08010bdc
 80074d0:	08010ffc 	.word	0x08010ffc
 80074d4:	2000a4c8 	.word	0x2000a4c8
 80074d8:	2000a4c4 	.word	0x2000a4c4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80074dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074de:	7d1b      	ldrb	r3, [r3, #20]
 80074e0:	2b0a      	cmp	r3, #10
 80074e2:	d006      	beq.n	80074f2 <tcp_slowtmr+0x5c2>
 80074e4:	4b2b      	ldr	r3, [pc, #172]	; (8007594 <tcp_slowtmr+0x664>)
 80074e6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80074ea:	492b      	ldr	r1, [pc, #172]	; (8007598 <tcp_slowtmr+0x668>)
 80074ec:	482b      	ldr	r0, [pc, #172]	; (800759c <tcp_slowtmr+0x66c>)
 80074ee:	f007 fce5 	bl	800eebc <iprintf>
    pcb_remove = 0;
 80074f2:	2300      	movs	r3, #0
 80074f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80074f8:	4b29      	ldr	r3, [pc, #164]	; (80075a0 <tcp_slowtmr+0x670>)
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fe:	6a1b      	ldr	r3, [r3, #32]
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	2bf0      	cmp	r3, #240	; 0xf0
 8007504:	d904      	bls.n	8007510 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8007506:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800750a:	3301      	adds	r3, #1
 800750c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007510:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007514:	2b00      	cmp	r3, #0
 8007516:	d02f      	beq.n	8007578 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8007518:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800751a:	f000 fb2b 	bl	8007b74 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800751e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007520:	2b00      	cmp	r3, #0
 8007522:	d010      	beq.n	8007546 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007524:	4b1f      	ldr	r3, [pc, #124]	; (80075a4 <tcp_slowtmr+0x674>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800752a:	429a      	cmp	r2, r3
 800752c:	d106      	bne.n	800753c <tcp_slowtmr+0x60c>
 800752e:	4b19      	ldr	r3, [pc, #100]	; (8007594 <tcp_slowtmr+0x664>)
 8007530:	f240 52af 	movw	r2, #1455	; 0x5af
 8007534:	491c      	ldr	r1, [pc, #112]	; (80075a8 <tcp_slowtmr+0x678>)
 8007536:	4819      	ldr	r0, [pc, #100]	; (800759c <tcp_slowtmr+0x66c>)
 8007538:	f007 fcc0 	bl	800eebc <iprintf>
        prev->next = pcb->next;
 800753c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800753e:	68da      	ldr	r2, [r3, #12]
 8007540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007542:	60da      	str	r2, [r3, #12]
 8007544:	e00f      	b.n	8007566 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8007546:	4b17      	ldr	r3, [pc, #92]	; (80075a4 <tcp_slowtmr+0x674>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800754c:	429a      	cmp	r2, r3
 800754e:	d006      	beq.n	800755e <tcp_slowtmr+0x62e>
 8007550:	4b10      	ldr	r3, [pc, #64]	; (8007594 <tcp_slowtmr+0x664>)
 8007552:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8007556:	4915      	ldr	r1, [pc, #84]	; (80075ac <tcp_slowtmr+0x67c>)
 8007558:	4810      	ldr	r0, [pc, #64]	; (800759c <tcp_slowtmr+0x66c>)
 800755a:	f007 fcaf 	bl	800eebc <iprintf>
        tcp_tw_pcbs = pcb->next;
 800755e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	4a10      	ldr	r2, [pc, #64]	; (80075a4 <tcp_slowtmr+0x674>)
 8007564:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8007566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007568:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800756a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007570:	69f8      	ldr	r0, [r7, #28]
 8007572:	f7ff f93f 	bl	80067f4 <tcp_free>
 8007576:	e004      	b.n	8007582 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8007578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800757a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800757c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007584:	2b00      	cmp	r3, #0
 8007586:	d1a9      	bne.n	80074dc <tcp_slowtmr+0x5ac>
    }
  }
}
 8007588:	bf00      	nop
 800758a:	bf00      	nop
 800758c:	3730      	adds	r7, #48	; 0x30
 800758e:	46bd      	mov	sp, r7
 8007590:	bdb0      	pop	{r4, r5, r7, pc}
 8007592:	bf00      	nop
 8007594:	08010b98 	.word	0x08010b98
 8007598:	08011028 	.word	0x08011028
 800759c:	08010bdc 	.word	0x08010bdc
 80075a0:	2000a4b4 	.word	0x2000a4b4
 80075a4:	2000a4c4 	.word	0x2000a4c4
 80075a8:	08011058 	.word	0x08011058
 80075ac:	08011080 	.word	0x08011080

080075b0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80075b6:	4b2d      	ldr	r3, [pc, #180]	; (800766c <tcp_fasttmr+0xbc>)
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	3301      	adds	r3, #1
 80075bc:	b2da      	uxtb	r2, r3
 80075be:	4b2b      	ldr	r3, [pc, #172]	; (800766c <tcp_fasttmr+0xbc>)
 80075c0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80075c2:	4b2b      	ldr	r3, [pc, #172]	; (8007670 <tcp_fasttmr+0xc0>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80075c8:	e048      	b.n	800765c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	7f9a      	ldrb	r2, [r3, #30]
 80075ce:	4b27      	ldr	r3, [pc, #156]	; (800766c <tcp_fasttmr+0xbc>)
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d03f      	beq.n	8007656 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80075d6:	4b25      	ldr	r3, [pc, #148]	; (800766c <tcp_fasttmr+0xbc>)
 80075d8:	781a      	ldrb	r2, [r3, #0]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	8b5b      	ldrh	r3, [r3, #26]
 80075e2:	f003 0301 	and.w	r3, r3, #1
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d010      	beq.n	800760c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	8b5b      	ldrh	r3, [r3, #26]
 80075ee:	f043 0302 	orr.w	r3, r3, #2
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f003 facf 	bl	800ab9c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	8b5b      	ldrh	r3, [r3, #26]
 8007602:	f023 0303 	bic.w	r3, r3, #3
 8007606:	b29a      	uxth	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	8b5b      	ldrh	r3, [r3, #26]
 8007610:	f003 0308 	and.w	r3, r3, #8
 8007614:	2b00      	cmp	r3, #0
 8007616:	d009      	beq.n	800762c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	8b5b      	ldrh	r3, [r3, #26]
 800761c:	f023 0308 	bic.w	r3, r3, #8
 8007620:	b29a      	uxth	r2, r3
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f7ff fa78 	bl	8006b1c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007636:	2b00      	cmp	r3, #0
 8007638:	d00a      	beq.n	8007650 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800763a:	4b0e      	ldr	r3, [pc, #56]	; (8007674 <tcp_fasttmr+0xc4>)
 800763c:	2200      	movs	r2, #0
 800763e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f000 f819 	bl	8007678 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007646:	4b0b      	ldr	r3, [pc, #44]	; (8007674 <tcp_fasttmr+0xc4>)
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d000      	beq.n	8007650 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800764e:	e7b8      	b.n	80075c2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	607b      	str	r3, [r7, #4]
 8007654:	e002      	b.n	800765c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d1b3      	bne.n	80075ca <tcp_fasttmr+0x1a>
    }
  }
}
 8007662:	bf00      	nop
 8007664:	bf00      	nop
 8007666:	3708      	adds	r7, #8
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}
 800766c:	2000a4ca 	.word	0x2000a4ca
 8007670:	2000a4c0 	.word	0x2000a4c0
 8007674:	2000a4c8 	.word	0x2000a4c8

08007678 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8007678:	b590      	push	{r4, r7, lr}
 800767a:	b085      	sub	sp, #20
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d109      	bne.n	800769a <tcp_process_refused_data+0x22>
 8007686:	4b37      	ldr	r3, [pc, #220]	; (8007764 <tcp_process_refused_data+0xec>)
 8007688:	f240 6209 	movw	r2, #1545	; 0x609
 800768c:	4936      	ldr	r1, [pc, #216]	; (8007768 <tcp_process_refused_data+0xf0>)
 800768e:	4837      	ldr	r0, [pc, #220]	; (800776c <tcp_process_refused_data+0xf4>)
 8007690:	f007 fc14 	bl	800eebc <iprintf>
 8007694:	f06f 030f 	mvn.w	r3, #15
 8007698:	e060      	b.n	800775c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800769e:	7b5b      	ldrb	r3, [r3, #13]
 80076a0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076a6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d00b      	beq.n	80076d0 <tcp_process_refused_data+0x58>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6918      	ldr	r0, [r3, #16]
 80076c2:	2300      	movs	r3, #0
 80076c4:	68ba      	ldr	r2, [r7, #8]
 80076c6:	6879      	ldr	r1, [r7, #4]
 80076c8:	47a0      	blx	r4
 80076ca:	4603      	mov	r3, r0
 80076cc:	73fb      	strb	r3, [r7, #15]
 80076ce:	e007      	b.n	80076e0 <tcp_process_refused_data+0x68>
 80076d0:	2300      	movs	r3, #0
 80076d2:	68ba      	ldr	r2, [r7, #8]
 80076d4:	6879      	ldr	r1, [r7, #4]
 80076d6:	2000      	movs	r0, #0
 80076d8:	f000 f8a4 	bl	8007824 <tcp_recv_null>
 80076dc:	4603      	mov	r3, r0
 80076de:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80076e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d12a      	bne.n	800773e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80076e8:	7bbb      	ldrb	r3, [r7, #14]
 80076ea:	f003 0320 	and.w	r3, r3, #32
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d033      	beq.n	800775a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076f6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80076fa:	d005      	beq.n	8007708 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007700:	3301      	adds	r3, #1
 8007702:	b29a      	uxth	r2, r3
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800770e:	2b00      	cmp	r3, #0
 8007710:	d00b      	beq.n	800772a <tcp_process_refused_data+0xb2>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6918      	ldr	r0, [r3, #16]
 800771c:	2300      	movs	r3, #0
 800771e:	2200      	movs	r2, #0
 8007720:	6879      	ldr	r1, [r7, #4]
 8007722:	47a0      	blx	r4
 8007724:	4603      	mov	r3, r0
 8007726:	73fb      	strb	r3, [r7, #15]
 8007728:	e001      	b.n	800772e <tcp_process_refused_data+0xb6>
 800772a:	2300      	movs	r3, #0
 800772c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800772e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007732:	f113 0f0d 	cmn.w	r3, #13
 8007736:	d110      	bne.n	800775a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8007738:	f06f 030c 	mvn.w	r3, #12
 800773c:	e00e      	b.n	800775c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800773e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007742:	f113 0f0d 	cmn.w	r3, #13
 8007746:	d102      	bne.n	800774e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8007748:	f06f 030c 	mvn.w	r3, #12
 800774c:	e006      	b.n	800775c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	68ba      	ldr	r2, [r7, #8]
 8007752:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8007754:	f06f 0304 	mvn.w	r3, #4
 8007758:	e000      	b.n	800775c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	3714      	adds	r7, #20
 8007760:	46bd      	mov	sp, r7
 8007762:	bd90      	pop	{r4, r7, pc}
 8007764:	08010b98 	.word	0x08010b98
 8007768:	080110a8 	.word	0x080110a8
 800776c:	08010bdc 	.word	0x08010bdc

08007770 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8007778:	e007      	b.n	800778a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 f80a 	bl	800779a <tcp_seg_free>
    seg = next;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d1f4      	bne.n	800777a <tcp_segs_free+0xa>
  }
}
 8007790:	bf00      	nop
 8007792:	bf00      	nop
 8007794:	3710      	adds	r7, #16
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800779a:	b580      	push	{r7, lr}
 800779c:	b082      	sub	sp, #8
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00c      	beq.n	80077c2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d004      	beq.n	80077ba <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	4618      	mov	r0, r3
 80077b6:	f7fe fcdb 	bl	8006170 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80077ba:	6879      	ldr	r1, [r7, #4]
 80077bc:	2003      	movs	r0, #3
 80077be:	f7fd fe61 	bl	8005484 <memp_free>
  }
}
 80077c2:	bf00      	nop
 80077c4:	3708      	adds	r7, #8
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
	...

080077cc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d106      	bne.n	80077e8 <tcp_seg_copy+0x1c>
 80077da:	4b0f      	ldr	r3, [pc, #60]	; (8007818 <tcp_seg_copy+0x4c>)
 80077dc:	f240 6282 	movw	r2, #1666	; 0x682
 80077e0:	490e      	ldr	r1, [pc, #56]	; (800781c <tcp_seg_copy+0x50>)
 80077e2:	480f      	ldr	r0, [pc, #60]	; (8007820 <tcp_seg_copy+0x54>)
 80077e4:	f007 fb6a 	bl	800eebc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80077e8:	2003      	movs	r0, #3
 80077ea:	f7fd fddb 	bl	80053a4 <memp_malloc>
 80077ee:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d101      	bne.n	80077fa <tcp_seg_copy+0x2e>
    return NULL;
 80077f6:	2300      	movs	r3, #0
 80077f8:	e00a      	b.n	8007810 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80077fa:	2210      	movs	r2, #16
 80077fc:	6879      	ldr	r1, [r7, #4]
 80077fe:	68f8      	ldr	r0, [r7, #12]
 8007800:	f007 fc83 	bl	800f10a <memcpy>
  pbuf_ref(cseg->p);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	4618      	mov	r0, r3
 800780a:	f7fe fd51 	bl	80062b0 <pbuf_ref>
  return cseg;
 800780e:	68fb      	ldr	r3, [r7, #12]
}
 8007810:	4618      	mov	r0, r3
 8007812:	3710      	adds	r7, #16
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}
 8007818:	08010b98 	.word	0x08010b98
 800781c:	080110ec 	.word	0x080110ec
 8007820:	08010bdc 	.word	0x08010bdc

08007824 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	60f8      	str	r0, [r7, #12]
 800782c:	60b9      	str	r1, [r7, #8]
 800782e:	607a      	str	r2, [r7, #4]
 8007830:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d109      	bne.n	800784c <tcp_recv_null+0x28>
 8007838:	4b12      	ldr	r3, [pc, #72]	; (8007884 <tcp_recv_null+0x60>)
 800783a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800783e:	4912      	ldr	r1, [pc, #72]	; (8007888 <tcp_recv_null+0x64>)
 8007840:	4812      	ldr	r0, [pc, #72]	; (800788c <tcp_recv_null+0x68>)
 8007842:	f007 fb3b 	bl	800eebc <iprintf>
 8007846:	f06f 030f 	mvn.w	r3, #15
 800784a:	e016      	b.n	800787a <tcp_recv_null+0x56>

  if (p != NULL) {
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d009      	beq.n	8007866 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	891b      	ldrh	r3, [r3, #8]
 8007856:	4619      	mov	r1, r3
 8007858:	68b8      	ldr	r0, [r7, #8]
 800785a:	f7ff fb19 	bl	8006e90 <tcp_recved>
    pbuf_free(p);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f7fe fc86 	bl	8006170 <pbuf_free>
 8007864:	e008      	b.n	8007878 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8007866:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d104      	bne.n	8007878 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800786e:	68b8      	ldr	r0, [r7, #8]
 8007870:	f7ff f9be 	bl	8006bf0 <tcp_close>
 8007874:	4603      	mov	r3, r0
 8007876:	e000      	b.n	800787a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8007878:	2300      	movs	r3, #0
}
 800787a:	4618      	mov	r0, r3
 800787c:	3710      	adds	r7, #16
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	08010b98 	.word	0x08010b98
 8007888:	08011108 	.word	0x08011108
 800788c:	08010bdc 	.word	0x08010bdc

08007890 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b086      	sub	sp, #24
 8007894:	af00      	add	r7, sp, #0
 8007896:	4603      	mov	r3, r0
 8007898:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800789a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	db01      	blt.n	80078a6 <tcp_kill_prio+0x16>
 80078a2:	79fb      	ldrb	r3, [r7, #7]
 80078a4:	e000      	b.n	80078a8 <tcp_kill_prio+0x18>
 80078a6:	237f      	movs	r3, #127	; 0x7f
 80078a8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80078aa:	7afb      	ldrb	r3, [r7, #11]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d034      	beq.n	800791a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80078b0:	7afb      	ldrb	r3, [r7, #11]
 80078b2:	3b01      	subs	r3, #1
 80078b4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80078b6:	2300      	movs	r3, #0
 80078b8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80078ba:	2300      	movs	r3, #0
 80078bc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80078be:	4b19      	ldr	r3, [pc, #100]	; (8007924 <tcp_kill_prio+0x94>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	617b      	str	r3, [r7, #20]
 80078c4:	e01f      	b.n	8007906 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	7d5b      	ldrb	r3, [r3, #21]
 80078ca:	7afa      	ldrb	r2, [r7, #11]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d80c      	bhi.n	80078ea <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80078d4:	7afa      	ldrb	r2, [r7, #11]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d112      	bne.n	8007900 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80078da:	4b13      	ldr	r3, [pc, #76]	; (8007928 <tcp_kill_prio+0x98>)
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	6a1b      	ldr	r3, [r3, #32]
 80078e2:	1ad3      	subs	r3, r2, r3
 80078e4:	68fa      	ldr	r2, [r7, #12]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d80a      	bhi.n	8007900 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80078ea:	4b0f      	ldr	r3, [pc, #60]	; (8007928 <tcp_kill_prio+0x98>)
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	6a1b      	ldr	r3, [r3, #32]
 80078f2:	1ad3      	subs	r3, r2, r3
 80078f4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	7d5b      	ldrb	r3, [r3, #21]
 80078fe:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	617b      	str	r3, [r7, #20]
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d1dc      	bne.n	80078c6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d004      	beq.n	800791c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007912:	6938      	ldr	r0, [r7, #16]
 8007914:	f7ff fa56 	bl	8006dc4 <tcp_abort>
 8007918:	e000      	b.n	800791c <tcp_kill_prio+0x8c>
    return;
 800791a:	bf00      	nop
  }
}
 800791c:	3718      	adds	r7, #24
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
 8007922:	bf00      	nop
 8007924:	2000a4c0 	.word	0x2000a4c0
 8007928:	2000a4b4 	.word	0x2000a4b4

0800792c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b086      	sub	sp, #24
 8007930:	af00      	add	r7, sp, #0
 8007932:	4603      	mov	r3, r0
 8007934:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007936:	79fb      	ldrb	r3, [r7, #7]
 8007938:	2b08      	cmp	r3, #8
 800793a:	d009      	beq.n	8007950 <tcp_kill_state+0x24>
 800793c:	79fb      	ldrb	r3, [r7, #7]
 800793e:	2b09      	cmp	r3, #9
 8007940:	d006      	beq.n	8007950 <tcp_kill_state+0x24>
 8007942:	4b1a      	ldr	r3, [pc, #104]	; (80079ac <tcp_kill_state+0x80>)
 8007944:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8007948:	4919      	ldr	r1, [pc, #100]	; (80079b0 <tcp_kill_state+0x84>)
 800794a:	481a      	ldr	r0, [pc, #104]	; (80079b4 <tcp_kill_state+0x88>)
 800794c:	f007 fab6 	bl	800eebc <iprintf>

  inactivity = 0;
 8007950:	2300      	movs	r3, #0
 8007952:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007954:	2300      	movs	r3, #0
 8007956:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007958:	4b17      	ldr	r3, [pc, #92]	; (80079b8 <tcp_kill_state+0x8c>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	617b      	str	r3, [r7, #20]
 800795e:	e017      	b.n	8007990 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	7d1b      	ldrb	r3, [r3, #20]
 8007964:	79fa      	ldrb	r2, [r7, #7]
 8007966:	429a      	cmp	r2, r3
 8007968:	d10f      	bne.n	800798a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800796a:	4b14      	ldr	r3, [pc, #80]	; (80079bc <tcp_kill_state+0x90>)
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	6a1b      	ldr	r3, [r3, #32]
 8007972:	1ad3      	subs	r3, r2, r3
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	429a      	cmp	r2, r3
 8007978:	d807      	bhi.n	800798a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800797a:	4b10      	ldr	r3, [pc, #64]	; (80079bc <tcp_kill_state+0x90>)
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	6a1b      	ldr	r3, [r3, #32]
 8007982:	1ad3      	subs	r3, r2, r3
 8007984:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	68db      	ldr	r3, [r3, #12]
 800798e:	617b      	str	r3, [r7, #20]
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d1e4      	bne.n	8007960 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d003      	beq.n	80079a4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800799c:	2100      	movs	r1, #0
 800799e:	6938      	ldr	r0, [r7, #16]
 80079a0:	f7ff f952 	bl	8006c48 <tcp_abandon>
  }
}
 80079a4:	bf00      	nop
 80079a6:	3718      	adds	r7, #24
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	08010b98 	.word	0x08010b98
 80079b0:	08011124 	.word	0x08011124
 80079b4:	08010bdc 	.word	0x08010bdc
 80079b8:	2000a4c0 	.word	0x2000a4c0
 80079bc:	2000a4b4 	.word	0x2000a4b4

080079c0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80079c6:	2300      	movs	r3, #0
 80079c8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80079ca:	2300      	movs	r3, #0
 80079cc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80079ce:	4b12      	ldr	r3, [pc, #72]	; (8007a18 <tcp_kill_timewait+0x58>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	60fb      	str	r3, [r7, #12]
 80079d4:	e012      	b.n	80079fc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80079d6:	4b11      	ldr	r3, [pc, #68]	; (8007a1c <tcp_kill_timewait+0x5c>)
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6a1b      	ldr	r3, [r3, #32]
 80079de:	1ad3      	subs	r3, r2, r3
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d807      	bhi.n	80079f6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80079e6:	4b0d      	ldr	r3, [pc, #52]	; (8007a1c <tcp_kill_timewait+0x5c>)
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	6a1b      	ldr	r3, [r3, #32]
 80079ee:	1ad3      	subs	r3, r2, r3
 80079f0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	60fb      	str	r3, [r7, #12]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d1e9      	bne.n	80079d6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d002      	beq.n	8007a0e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007a08:	68b8      	ldr	r0, [r7, #8]
 8007a0a:	f7ff f9db 	bl	8006dc4 <tcp_abort>
  }
}
 8007a0e:	bf00      	nop
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	2000a4c4 	.word	0x2000a4c4
 8007a1c:	2000a4b4 	.word	0x2000a4b4

08007a20 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8007a26:	4b10      	ldr	r3, [pc, #64]	; (8007a68 <tcp_handle_closepend+0x48>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007a2c:	e014      	b.n	8007a58 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	8b5b      	ldrh	r3, [r3, #26]
 8007a38:	f003 0308 	and.w	r3, r3, #8
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d009      	beq.n	8007a54 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	8b5b      	ldrh	r3, [r3, #26]
 8007a44:	f023 0308 	bic.w	r3, r3, #8
 8007a48:	b29a      	uxth	r2, r3
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f7ff f864 	bl	8006b1c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d1e7      	bne.n	8007a2e <tcp_handle_closepend+0xe>
  }
}
 8007a5e:	bf00      	nop
 8007a60:	bf00      	nop
 8007a62:	3708      	adds	r7, #8
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	2000a4c0 	.word	0x2000a4c0

08007a6c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b084      	sub	sp, #16
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	4603      	mov	r3, r0
 8007a74:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007a76:	2001      	movs	r0, #1
 8007a78:	f7fd fc94 	bl	80053a4 <memp_malloc>
 8007a7c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d126      	bne.n	8007ad2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8007a84:	f7ff ffcc 	bl	8007a20 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8007a88:	f7ff ff9a 	bl	80079c0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007a8c:	2001      	movs	r0, #1
 8007a8e:	f7fd fc89 	bl	80053a4 <memp_malloc>
 8007a92:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d11b      	bne.n	8007ad2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8007a9a:	2009      	movs	r0, #9
 8007a9c:	f7ff ff46 	bl	800792c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007aa0:	2001      	movs	r0, #1
 8007aa2:	f7fd fc7f 	bl	80053a4 <memp_malloc>
 8007aa6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d111      	bne.n	8007ad2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8007aae:	2008      	movs	r0, #8
 8007ab0:	f7ff ff3c 	bl	800792c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007ab4:	2001      	movs	r0, #1
 8007ab6:	f7fd fc75 	bl	80053a4 <memp_malloc>
 8007aba:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d107      	bne.n	8007ad2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8007ac2:	79fb      	ldrb	r3, [r7, #7]
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f7ff fee3 	bl	8007890 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007aca:	2001      	movs	r0, #1
 8007acc:	f7fd fc6a 	bl	80053a4 <memp_malloc>
 8007ad0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d03f      	beq.n	8007b58 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007ad8:	229c      	movs	r2, #156	; 0x9c
 8007ada:	2100      	movs	r1, #0
 8007adc:	68f8      	ldr	r0, [r7, #12]
 8007ade:	f007 fa8c 	bl	800effa <memset>
    pcb->prio = prio;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	79fa      	ldrb	r2, [r7, #7]
 8007ae6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007aee:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007af8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	22ff      	movs	r2, #255	; 0xff
 8007b06:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007b0e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2206      	movs	r2, #6
 8007b14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2206      	movs	r2, #6
 8007b1c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b24:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2201      	movs	r2, #1
 8007b2a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8007b2e:	4b0d      	ldr	r3, [pc, #52]	; (8007b64 <tcp_alloc+0xf8>)
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8007b36:	4b0c      	ldr	r3, [pc, #48]	; (8007b68 <tcp_alloc+0xfc>)
 8007b38:	781a      	ldrb	r2, [r3, #0]
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007b44:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	4a08      	ldr	r2, [pc, #32]	; (8007b6c <tcp_alloc+0x100>)
 8007b4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	4a07      	ldr	r2, [pc, #28]	; (8007b70 <tcp_alloc+0x104>)
 8007b54:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8007b58:	68fb      	ldr	r3, [r7, #12]
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3710      	adds	r7, #16
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop
 8007b64:	2000a4b4 	.word	0x2000a4b4
 8007b68:	2000a4ca 	.word	0x2000a4ca
 8007b6c:	08007825 	.word	0x08007825
 8007b70:	006ddd00 	.word	0x006ddd00

08007b74 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d107      	bne.n	8007b92 <tcp_pcb_purge+0x1e>
 8007b82:	4b21      	ldr	r3, [pc, #132]	; (8007c08 <tcp_pcb_purge+0x94>)
 8007b84:	f640 0251 	movw	r2, #2129	; 0x851
 8007b88:	4920      	ldr	r1, [pc, #128]	; (8007c0c <tcp_pcb_purge+0x98>)
 8007b8a:	4821      	ldr	r0, [pc, #132]	; (8007c10 <tcp_pcb_purge+0x9c>)
 8007b8c:	f007 f996 	bl	800eebc <iprintf>
 8007b90:	e037      	b.n	8007c02 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	7d1b      	ldrb	r3, [r3, #20]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d033      	beq.n	8007c02 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8007b9e:	2b0a      	cmp	r3, #10
 8007ba0:	d02f      	beq.n	8007c02 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d02b      	beq.n	8007c02 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d007      	beq.n	8007bc2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f7fe fada 	bl	8006170 <pbuf_free>
      pcb->refused_data = NULL;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d002      	beq.n	8007bd0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 f986 	bl	8007edc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007bd6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f7ff fdc7 	bl	8007770 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7ff fdc2 	bl	8007770 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	66da      	str	r2, [r3, #108]	; 0x6c
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8007c02:	3708      	adds	r7, #8
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	08010b98 	.word	0x08010b98
 8007c0c:	080111e4 	.word	0x080111e4
 8007c10:	08010bdc 	.word	0x08010bdc

08007c14 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d106      	bne.n	8007c32 <tcp_pcb_remove+0x1e>
 8007c24:	4b3e      	ldr	r3, [pc, #248]	; (8007d20 <tcp_pcb_remove+0x10c>)
 8007c26:	f640 0283 	movw	r2, #2179	; 0x883
 8007c2a:	493e      	ldr	r1, [pc, #248]	; (8007d24 <tcp_pcb_remove+0x110>)
 8007c2c:	483e      	ldr	r0, [pc, #248]	; (8007d28 <tcp_pcb_remove+0x114>)
 8007c2e:	f007 f945 	bl	800eebc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d106      	bne.n	8007c46 <tcp_pcb_remove+0x32>
 8007c38:	4b39      	ldr	r3, [pc, #228]	; (8007d20 <tcp_pcb_remove+0x10c>)
 8007c3a:	f640 0284 	movw	r2, #2180	; 0x884
 8007c3e:	493b      	ldr	r1, [pc, #236]	; (8007d2c <tcp_pcb_remove+0x118>)
 8007c40:	4839      	ldr	r0, [pc, #228]	; (8007d28 <tcp_pcb_remove+0x114>)
 8007c42:	f007 f93b 	bl	800eebc <iprintf>

  TCP_RMV(pcblist, pcb);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	683a      	ldr	r2, [r7, #0]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d105      	bne.n	8007c5c <tcp_pcb_remove+0x48>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	68da      	ldr	r2, [r3, #12]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	601a      	str	r2, [r3, #0]
 8007c5a:	e013      	b.n	8007c84 <tcp_pcb_remove+0x70>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	60fb      	str	r3, [r7, #12]
 8007c62:	e00c      	b.n	8007c7e <tcp_pcb_remove+0x6a>
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	683a      	ldr	r2, [r7, #0]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d104      	bne.n	8007c78 <tcp_pcb_remove+0x64>
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	68da      	ldr	r2, [r3, #12]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	60da      	str	r2, [r3, #12]
 8007c76:	e005      	b.n	8007c84 <tcp_pcb_remove+0x70>
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	60fb      	str	r3, [r7, #12]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d1ef      	bne.n	8007c64 <tcp_pcb_remove+0x50>
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	2200      	movs	r2, #0
 8007c88:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8007c8a:	6838      	ldr	r0, [r7, #0]
 8007c8c:	f7ff ff72 	bl	8007b74 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	7d1b      	ldrb	r3, [r3, #20]
 8007c94:	2b0a      	cmp	r3, #10
 8007c96:	d013      	beq.n	8007cc0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d00f      	beq.n	8007cc0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	8b5b      	ldrh	r3, [r3, #26]
 8007ca4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d009      	beq.n	8007cc0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	8b5b      	ldrh	r3, [r3, #26]
 8007cb0:	f043 0302 	orr.w	r3, r3, #2
 8007cb4:	b29a      	uxth	r2, r3
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007cba:	6838      	ldr	r0, [r7, #0]
 8007cbc:	f002 ff6e 	bl	800ab9c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	7d1b      	ldrb	r3, [r3, #20]
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d020      	beq.n	8007d0a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d006      	beq.n	8007cde <tcp_pcb_remove+0xca>
 8007cd0:	4b13      	ldr	r3, [pc, #76]	; (8007d20 <tcp_pcb_remove+0x10c>)
 8007cd2:	f640 0293 	movw	r2, #2195	; 0x893
 8007cd6:	4916      	ldr	r1, [pc, #88]	; (8007d30 <tcp_pcb_remove+0x11c>)
 8007cd8:	4813      	ldr	r0, [pc, #76]	; (8007d28 <tcp_pcb_remove+0x114>)
 8007cda:	f007 f8ef 	bl	800eebc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d006      	beq.n	8007cf4 <tcp_pcb_remove+0xe0>
 8007ce6:	4b0e      	ldr	r3, [pc, #56]	; (8007d20 <tcp_pcb_remove+0x10c>)
 8007ce8:	f640 0294 	movw	r2, #2196	; 0x894
 8007cec:	4911      	ldr	r1, [pc, #68]	; (8007d34 <tcp_pcb_remove+0x120>)
 8007cee:	480e      	ldr	r0, [pc, #56]	; (8007d28 <tcp_pcb_remove+0x114>)
 8007cf0:	f007 f8e4 	bl	800eebc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d006      	beq.n	8007d0a <tcp_pcb_remove+0xf6>
 8007cfc:	4b08      	ldr	r3, [pc, #32]	; (8007d20 <tcp_pcb_remove+0x10c>)
 8007cfe:	f640 0296 	movw	r2, #2198	; 0x896
 8007d02:	490d      	ldr	r1, [pc, #52]	; (8007d38 <tcp_pcb_remove+0x124>)
 8007d04:	4808      	ldr	r0, [pc, #32]	; (8007d28 <tcp_pcb_remove+0x114>)
 8007d06:	f007 f8d9 	bl	800eebc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	2200      	movs	r2, #0
 8007d14:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8007d16:	bf00      	nop
 8007d18:	3710      	adds	r7, #16
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	08010b98 	.word	0x08010b98
 8007d24:	08011200 	.word	0x08011200
 8007d28:	08010bdc 	.word	0x08010bdc
 8007d2c:	0801121c 	.word	0x0801121c
 8007d30:	0801123c 	.word	0x0801123c
 8007d34:	08011254 	.word	0x08011254
 8007d38:	08011270 	.word	0x08011270

08007d3c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d106      	bne.n	8007d58 <tcp_next_iss+0x1c>
 8007d4a:	4b0a      	ldr	r3, [pc, #40]	; (8007d74 <tcp_next_iss+0x38>)
 8007d4c:	f640 02af 	movw	r2, #2223	; 0x8af
 8007d50:	4909      	ldr	r1, [pc, #36]	; (8007d78 <tcp_next_iss+0x3c>)
 8007d52:	480a      	ldr	r0, [pc, #40]	; (8007d7c <tcp_next_iss+0x40>)
 8007d54:	f007 f8b2 	bl	800eebc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8007d58:	4b09      	ldr	r3, [pc, #36]	; (8007d80 <tcp_next_iss+0x44>)
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	4b09      	ldr	r3, [pc, #36]	; (8007d84 <tcp_next_iss+0x48>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4413      	add	r3, r2
 8007d62:	4a07      	ldr	r2, [pc, #28]	; (8007d80 <tcp_next_iss+0x44>)
 8007d64:	6013      	str	r3, [r2, #0]
  return iss;
 8007d66:	4b06      	ldr	r3, [pc, #24]	; (8007d80 <tcp_next_iss+0x44>)
 8007d68:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3708      	adds	r7, #8
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	08010b98 	.word	0x08010b98
 8007d78:	08011288 	.word	0x08011288
 8007d7c:	08010bdc 	.word	0x08010bdc
 8007d80:	20000024 	.word	0x20000024
 8007d84:	2000a4b4 	.word	0x2000a4b4

08007d88 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b086      	sub	sp, #24
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	4603      	mov	r3, r0
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	607a      	str	r2, [r7, #4]
 8007d94:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d106      	bne.n	8007daa <tcp_eff_send_mss_netif+0x22>
 8007d9c:	4b14      	ldr	r3, [pc, #80]	; (8007df0 <tcp_eff_send_mss_netif+0x68>)
 8007d9e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8007da2:	4914      	ldr	r1, [pc, #80]	; (8007df4 <tcp_eff_send_mss_netif+0x6c>)
 8007da4:	4814      	ldr	r0, [pc, #80]	; (8007df8 <tcp_eff_send_mss_netif+0x70>)
 8007da6:	f007 f889 	bl	800eebc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d101      	bne.n	8007db4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8007db0:	89fb      	ldrh	r3, [r7, #14]
 8007db2:	e019      	b.n	8007de8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007db8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8007dba:	8afb      	ldrh	r3, [r7, #22]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d012      	beq.n	8007de6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8007dc0:	2328      	movs	r3, #40	; 0x28
 8007dc2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8007dc4:	8afa      	ldrh	r2, [r7, #22]
 8007dc6:	8abb      	ldrh	r3, [r7, #20]
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d904      	bls.n	8007dd6 <tcp_eff_send_mss_netif+0x4e>
 8007dcc:	8afa      	ldrh	r2, [r7, #22]
 8007dce:	8abb      	ldrh	r3, [r7, #20]
 8007dd0:	1ad3      	subs	r3, r2, r3
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	e000      	b.n	8007dd8 <tcp_eff_send_mss_netif+0x50>
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8007dda:	8a7a      	ldrh	r2, [r7, #18]
 8007ddc:	89fb      	ldrh	r3, [r7, #14]
 8007dde:	4293      	cmp	r3, r2
 8007de0:	bf28      	it	cs
 8007de2:	4613      	movcs	r3, r2
 8007de4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8007de6:	89fb      	ldrh	r3, [r7, #14]
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3718      	adds	r7, #24
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	08010b98 	.word	0x08010b98
 8007df4:	080112a4 	.word	0x080112a4
 8007df8:	08010bdc 	.word	0x08010bdc

08007dfc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d119      	bne.n	8007e44 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8007e10:	4b10      	ldr	r3, [pc, #64]	; (8007e54 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8007e12:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8007e16:	4910      	ldr	r1, [pc, #64]	; (8007e58 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8007e18:	4810      	ldr	r0, [pc, #64]	; (8007e5c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8007e1a:	f007 f84f 	bl	800eebc <iprintf>

  while (pcb != NULL) {
 8007e1e:	e011      	b.n	8007e44 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d108      	bne.n	8007e3e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8007e32:	68f8      	ldr	r0, [r7, #12]
 8007e34:	f7fe ffc6 	bl	8006dc4 <tcp_abort>
      pcb = next;
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	60fb      	str	r3, [r7, #12]
 8007e3c:	e002      	b.n	8007e44 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	68db      	ldr	r3, [r3, #12]
 8007e42:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d1ea      	bne.n	8007e20 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8007e4a:	bf00      	nop
 8007e4c:	bf00      	nop
 8007e4e:	3710      	adds	r7, #16
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	08010b98 	.word	0x08010b98
 8007e58:	080112cc 	.word	0x080112cc
 8007e5c:	08010bdc 	.word	0x08010bdc

08007e60 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d02a      	beq.n	8007ec6 <tcp_netif_ip_addr_changed+0x66>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d026      	beq.n	8007ec6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007e78:	4b15      	ldr	r3, [pc, #84]	; (8007ed0 <tcp_netif_ip_addr_changed+0x70>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f7ff ffbc 	bl	8007dfc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8007e84:	4b13      	ldr	r3, [pc, #76]	; (8007ed4 <tcp_netif_ip_addr_changed+0x74>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4619      	mov	r1, r3
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f7ff ffb6 	bl	8007dfc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d017      	beq.n	8007ec6 <tcp_netif_ip_addr_changed+0x66>
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d013      	beq.n	8007ec6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007e9e:	4b0e      	ldr	r3, [pc, #56]	; (8007ed8 <tcp_netif_ip_addr_changed+0x78>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	60fb      	str	r3, [r7, #12]
 8007ea4:	e00c      	b.n	8007ec0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d103      	bne.n	8007eba <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	68db      	ldr	r3, [r3, #12]
 8007ebe:	60fb      	str	r3, [r7, #12]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d1ef      	bne.n	8007ea6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8007ec6:	bf00      	nop
 8007ec8:	3710      	adds	r7, #16
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	2000a4c0 	.word	0x2000a4c0
 8007ed4:	2000a4b8 	.word	0x2000a4b8
 8007ed8:	2000a4bc 	.word	0x2000a4bc

08007edc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d007      	beq.n	8007efc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f7ff fc3d 	bl	8007770 <tcp_segs_free>
    pcb->ooseq = NULL;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8007efc:	bf00      	nop
 8007efe:	3708      	adds	r7, #8
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8007f04:	b590      	push	{r4, r7, lr}
 8007f06:	b08d      	sub	sp, #52	; 0x34
 8007f08:	af04      	add	r7, sp, #16
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d105      	bne.n	8007f20 <tcp_input+0x1c>
 8007f14:	4b9b      	ldr	r3, [pc, #620]	; (8008184 <tcp_input+0x280>)
 8007f16:	2283      	movs	r2, #131	; 0x83
 8007f18:	499b      	ldr	r1, [pc, #620]	; (8008188 <tcp_input+0x284>)
 8007f1a:	489c      	ldr	r0, [pc, #624]	; (800818c <tcp_input+0x288>)
 8007f1c:	f006 ffce 	bl	800eebc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	4a9a      	ldr	r2, [pc, #616]	; (8008190 <tcp_input+0x28c>)
 8007f26:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	895b      	ldrh	r3, [r3, #10]
 8007f2c:	2b13      	cmp	r3, #19
 8007f2e:	f240 83d1 	bls.w	80086d4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007f32:	4b98      	ldr	r3, [pc, #608]	; (8008194 <tcp_input+0x290>)
 8007f34:	695b      	ldr	r3, [r3, #20]
 8007f36:	4a97      	ldr	r2, [pc, #604]	; (8008194 <tcp_input+0x290>)
 8007f38:	6812      	ldr	r2, [r2, #0]
 8007f3a:	4611      	mov	r1, r2
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f005 ff67 	bl	800de10 <ip4_addr_isbroadcast_u32>
 8007f42:	4603      	mov	r3, r0
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	f040 83c7 	bne.w	80086d8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8007f4a:	4b92      	ldr	r3, [pc, #584]	; (8008194 <tcp_input+0x290>)
 8007f4c:	695b      	ldr	r3, [r3, #20]
 8007f4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007f52:	2be0      	cmp	r3, #224	; 0xe0
 8007f54:	f000 83c0 	beq.w	80086d8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8007f58:	4b8d      	ldr	r3, [pc, #564]	; (8008190 <tcp_input+0x28c>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	899b      	ldrh	r3, [r3, #12]
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	4618      	mov	r0, r3
 8007f62:	f7fc fda7 	bl	8004ab4 <lwip_htons>
 8007f66:	4603      	mov	r3, r0
 8007f68:	0b1b      	lsrs	r3, r3, #12
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8007f72:	7cbb      	ldrb	r3, [r7, #18]
 8007f74:	2b13      	cmp	r3, #19
 8007f76:	f240 83b1 	bls.w	80086dc <tcp_input+0x7d8>
 8007f7a:	7cbb      	ldrb	r3, [r7, #18]
 8007f7c:	b29a      	uxth	r2, r3
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	891b      	ldrh	r3, [r3, #8]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	f200 83aa 	bhi.w	80086dc <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8007f88:	7cbb      	ldrb	r3, [r7, #18]
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	3b14      	subs	r3, #20
 8007f8e:	b29a      	uxth	r2, r3
 8007f90:	4b81      	ldr	r3, [pc, #516]	; (8008198 <tcp_input+0x294>)
 8007f92:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8007f94:	4b81      	ldr	r3, [pc, #516]	; (800819c <tcp_input+0x298>)
 8007f96:	2200      	movs	r2, #0
 8007f98:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	895a      	ldrh	r2, [r3, #10]
 8007f9e:	7cbb      	ldrb	r3, [r7, #18]
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d309      	bcc.n	8007fba <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8007fa6:	4b7c      	ldr	r3, [pc, #496]	; (8008198 <tcp_input+0x294>)
 8007fa8:	881a      	ldrh	r2, [r3, #0]
 8007faa:	4b7d      	ldr	r3, [pc, #500]	; (80081a0 <tcp_input+0x29c>)
 8007fac:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8007fae:	7cbb      	ldrb	r3, [r7, #18]
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f7fe f856 	bl	8006064 <pbuf_remove_header>
 8007fb8:	e04e      	b.n	8008058 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d105      	bne.n	8007fce <tcp_input+0xca>
 8007fc2:	4b70      	ldr	r3, [pc, #448]	; (8008184 <tcp_input+0x280>)
 8007fc4:	22c2      	movs	r2, #194	; 0xc2
 8007fc6:	4977      	ldr	r1, [pc, #476]	; (80081a4 <tcp_input+0x2a0>)
 8007fc8:	4870      	ldr	r0, [pc, #448]	; (800818c <tcp_input+0x288>)
 8007fca:	f006 ff77 	bl	800eebc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8007fce:	2114      	movs	r1, #20
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f7fe f847 	bl	8006064 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	895a      	ldrh	r2, [r3, #10]
 8007fda:	4b71      	ldr	r3, [pc, #452]	; (80081a0 <tcp_input+0x29c>)
 8007fdc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8007fde:	4b6e      	ldr	r3, [pc, #440]	; (8008198 <tcp_input+0x294>)
 8007fe0:	881a      	ldrh	r2, [r3, #0]
 8007fe2:	4b6f      	ldr	r3, [pc, #444]	; (80081a0 <tcp_input+0x29c>)
 8007fe4:	881b      	ldrh	r3, [r3, #0]
 8007fe6:	1ad3      	subs	r3, r2, r3
 8007fe8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8007fea:	4b6d      	ldr	r3, [pc, #436]	; (80081a0 <tcp_input+0x29c>)
 8007fec:	881b      	ldrh	r3, [r3, #0]
 8007fee:	4619      	mov	r1, r3
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f7fe f837 	bl	8006064 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	895b      	ldrh	r3, [r3, #10]
 8007ffc:	8a3a      	ldrh	r2, [r7, #16]
 8007ffe:	429a      	cmp	r2, r3
 8008000:	f200 836e 	bhi.w	80086e0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	4a64      	ldr	r2, [pc, #400]	; (800819c <tcp_input+0x298>)
 800800c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	8a3a      	ldrh	r2, [r7, #16]
 8008014:	4611      	mov	r1, r2
 8008016:	4618      	mov	r0, r3
 8008018:	f7fe f824 	bl	8006064 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	891a      	ldrh	r2, [r3, #8]
 8008020:	8a3b      	ldrh	r3, [r7, #16]
 8008022:	1ad3      	subs	r3, r2, r3
 8008024:	b29a      	uxth	r2, r3
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	895b      	ldrh	r3, [r3, #10]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d005      	beq.n	800803e <tcp_input+0x13a>
 8008032:	4b54      	ldr	r3, [pc, #336]	; (8008184 <tcp_input+0x280>)
 8008034:	22df      	movs	r2, #223	; 0xdf
 8008036:	495c      	ldr	r1, [pc, #368]	; (80081a8 <tcp_input+0x2a4>)
 8008038:	4854      	ldr	r0, [pc, #336]	; (800818c <tcp_input+0x288>)
 800803a:	f006 ff3f 	bl	800eebc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	891a      	ldrh	r2, [r3, #8]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	891b      	ldrh	r3, [r3, #8]
 8008048:	429a      	cmp	r2, r3
 800804a:	d005      	beq.n	8008058 <tcp_input+0x154>
 800804c:	4b4d      	ldr	r3, [pc, #308]	; (8008184 <tcp_input+0x280>)
 800804e:	22e0      	movs	r2, #224	; 0xe0
 8008050:	4956      	ldr	r1, [pc, #344]	; (80081ac <tcp_input+0x2a8>)
 8008052:	484e      	ldr	r0, [pc, #312]	; (800818c <tcp_input+0x288>)
 8008054:	f006 ff32 	bl	800eebc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008058:	4b4d      	ldr	r3, [pc, #308]	; (8008190 <tcp_input+0x28c>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	881b      	ldrh	r3, [r3, #0]
 800805e:	b29b      	uxth	r3, r3
 8008060:	4a4b      	ldr	r2, [pc, #300]	; (8008190 <tcp_input+0x28c>)
 8008062:	6814      	ldr	r4, [r2, #0]
 8008064:	4618      	mov	r0, r3
 8008066:	f7fc fd25 	bl	8004ab4 <lwip_htons>
 800806a:	4603      	mov	r3, r0
 800806c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800806e:	4b48      	ldr	r3, [pc, #288]	; (8008190 <tcp_input+0x28c>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	885b      	ldrh	r3, [r3, #2]
 8008074:	b29b      	uxth	r3, r3
 8008076:	4a46      	ldr	r2, [pc, #280]	; (8008190 <tcp_input+0x28c>)
 8008078:	6814      	ldr	r4, [r2, #0]
 800807a:	4618      	mov	r0, r3
 800807c:	f7fc fd1a 	bl	8004ab4 <lwip_htons>
 8008080:	4603      	mov	r3, r0
 8008082:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008084:	4b42      	ldr	r3, [pc, #264]	; (8008190 <tcp_input+0x28c>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	4a41      	ldr	r2, [pc, #260]	; (8008190 <tcp_input+0x28c>)
 800808c:	6814      	ldr	r4, [r2, #0]
 800808e:	4618      	mov	r0, r3
 8008090:	f7fc fd25 	bl	8004ade <lwip_htonl>
 8008094:	4603      	mov	r3, r0
 8008096:	6063      	str	r3, [r4, #4]
 8008098:	6863      	ldr	r3, [r4, #4]
 800809a:	4a45      	ldr	r2, [pc, #276]	; (80081b0 <tcp_input+0x2ac>)
 800809c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800809e:	4b3c      	ldr	r3, [pc, #240]	; (8008190 <tcp_input+0x28c>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	4a3a      	ldr	r2, [pc, #232]	; (8008190 <tcp_input+0x28c>)
 80080a6:	6814      	ldr	r4, [r2, #0]
 80080a8:	4618      	mov	r0, r3
 80080aa:	f7fc fd18 	bl	8004ade <lwip_htonl>
 80080ae:	4603      	mov	r3, r0
 80080b0:	60a3      	str	r3, [r4, #8]
 80080b2:	68a3      	ldr	r3, [r4, #8]
 80080b4:	4a3f      	ldr	r2, [pc, #252]	; (80081b4 <tcp_input+0x2b0>)
 80080b6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80080b8:	4b35      	ldr	r3, [pc, #212]	; (8008190 <tcp_input+0x28c>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	89db      	ldrh	r3, [r3, #14]
 80080be:	b29b      	uxth	r3, r3
 80080c0:	4a33      	ldr	r2, [pc, #204]	; (8008190 <tcp_input+0x28c>)
 80080c2:	6814      	ldr	r4, [r2, #0]
 80080c4:	4618      	mov	r0, r3
 80080c6:	f7fc fcf5 	bl	8004ab4 <lwip_htons>
 80080ca:	4603      	mov	r3, r0
 80080cc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80080ce:	4b30      	ldr	r3, [pc, #192]	; (8008190 <tcp_input+0x28c>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	899b      	ldrh	r3, [r3, #12]
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	4618      	mov	r0, r3
 80080d8:	f7fc fcec 	bl	8004ab4 <lwip_htons>
 80080dc:	4603      	mov	r3, r0
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080e4:	b2da      	uxtb	r2, r3
 80080e6:	4b34      	ldr	r3, [pc, #208]	; (80081b8 <tcp_input+0x2b4>)
 80080e8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	891a      	ldrh	r2, [r3, #8]
 80080ee:	4b33      	ldr	r3, [pc, #204]	; (80081bc <tcp_input+0x2b8>)
 80080f0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80080f2:	4b31      	ldr	r3, [pc, #196]	; (80081b8 <tcp_input+0x2b4>)
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	f003 0303 	and.w	r3, r3, #3
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d00c      	beq.n	8008118 <tcp_input+0x214>
    tcplen++;
 80080fe:	4b2f      	ldr	r3, [pc, #188]	; (80081bc <tcp_input+0x2b8>)
 8008100:	881b      	ldrh	r3, [r3, #0]
 8008102:	3301      	adds	r3, #1
 8008104:	b29a      	uxth	r2, r3
 8008106:	4b2d      	ldr	r3, [pc, #180]	; (80081bc <tcp_input+0x2b8>)
 8008108:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	891a      	ldrh	r2, [r3, #8]
 800810e:	4b2b      	ldr	r3, [pc, #172]	; (80081bc <tcp_input+0x2b8>)
 8008110:	881b      	ldrh	r3, [r3, #0]
 8008112:	429a      	cmp	r2, r3
 8008114:	f200 82e6 	bhi.w	80086e4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8008118:	2300      	movs	r3, #0
 800811a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800811c:	4b28      	ldr	r3, [pc, #160]	; (80081c0 <tcp_input+0x2bc>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	61fb      	str	r3, [r7, #28]
 8008122:	e09d      	b.n	8008260 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008124:	69fb      	ldr	r3, [r7, #28]
 8008126:	7d1b      	ldrb	r3, [r3, #20]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d105      	bne.n	8008138 <tcp_input+0x234>
 800812c:	4b15      	ldr	r3, [pc, #84]	; (8008184 <tcp_input+0x280>)
 800812e:	22fb      	movs	r2, #251	; 0xfb
 8008130:	4924      	ldr	r1, [pc, #144]	; (80081c4 <tcp_input+0x2c0>)
 8008132:	4816      	ldr	r0, [pc, #88]	; (800818c <tcp_input+0x288>)
 8008134:	f006 fec2 	bl	800eebc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008138:	69fb      	ldr	r3, [r7, #28]
 800813a:	7d1b      	ldrb	r3, [r3, #20]
 800813c:	2b0a      	cmp	r3, #10
 800813e:	d105      	bne.n	800814c <tcp_input+0x248>
 8008140:	4b10      	ldr	r3, [pc, #64]	; (8008184 <tcp_input+0x280>)
 8008142:	22fc      	movs	r2, #252	; 0xfc
 8008144:	4920      	ldr	r1, [pc, #128]	; (80081c8 <tcp_input+0x2c4>)
 8008146:	4811      	ldr	r0, [pc, #68]	; (800818c <tcp_input+0x288>)
 8008148:	f006 feb8 	bl	800eebc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	7d1b      	ldrb	r3, [r3, #20]
 8008150:	2b01      	cmp	r3, #1
 8008152:	d105      	bne.n	8008160 <tcp_input+0x25c>
 8008154:	4b0b      	ldr	r3, [pc, #44]	; (8008184 <tcp_input+0x280>)
 8008156:	22fd      	movs	r2, #253	; 0xfd
 8008158:	491c      	ldr	r1, [pc, #112]	; (80081cc <tcp_input+0x2c8>)
 800815a:	480c      	ldr	r0, [pc, #48]	; (800818c <tcp_input+0x288>)
 800815c:	f006 feae 	bl	800eebc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	7a1b      	ldrb	r3, [r3, #8]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d033      	beq.n	80081d0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008168:	69fb      	ldr	r3, [r7, #28]
 800816a:	7a1a      	ldrb	r2, [r3, #8]
 800816c:	4b09      	ldr	r3, [pc, #36]	; (8008194 <tcp_input+0x290>)
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008174:	3301      	adds	r3, #1
 8008176:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008178:	429a      	cmp	r2, r3
 800817a:	d029      	beq.n	80081d0 <tcp_input+0x2cc>
      prev = pcb;
 800817c:	69fb      	ldr	r3, [r7, #28]
 800817e:	61bb      	str	r3, [r7, #24]
      continue;
 8008180:	e06b      	b.n	800825a <tcp_input+0x356>
 8008182:	bf00      	nop
 8008184:	08011300 	.word	0x08011300
 8008188:	08011334 	.word	0x08011334
 800818c:	0801134c 	.word	0x0801134c
 8008190:	2000a4dc 	.word	0x2000a4dc
 8008194:	20004d84 	.word	0x20004d84
 8008198:	2000a4e0 	.word	0x2000a4e0
 800819c:	2000a4e4 	.word	0x2000a4e4
 80081a0:	2000a4e2 	.word	0x2000a4e2
 80081a4:	08011374 	.word	0x08011374
 80081a8:	08011384 	.word	0x08011384
 80081ac:	08011390 	.word	0x08011390
 80081b0:	2000a4ec 	.word	0x2000a4ec
 80081b4:	2000a4f0 	.word	0x2000a4f0
 80081b8:	2000a4f8 	.word	0x2000a4f8
 80081bc:	2000a4f6 	.word	0x2000a4f6
 80081c0:	2000a4c0 	.word	0x2000a4c0
 80081c4:	080113b0 	.word	0x080113b0
 80081c8:	080113d8 	.word	0x080113d8
 80081cc:	08011404 	.word	0x08011404
    }

    if (pcb->remote_port == tcphdr->src &&
 80081d0:	69fb      	ldr	r3, [r7, #28]
 80081d2:	8b1a      	ldrh	r2, [r3, #24]
 80081d4:	4b72      	ldr	r3, [pc, #456]	; (80083a0 <tcp_input+0x49c>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	881b      	ldrh	r3, [r3, #0]
 80081da:	b29b      	uxth	r3, r3
 80081dc:	429a      	cmp	r2, r3
 80081de:	d13a      	bne.n	8008256 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80081e0:	69fb      	ldr	r3, [r7, #28]
 80081e2:	8ada      	ldrh	r2, [r3, #22]
 80081e4:	4b6e      	ldr	r3, [pc, #440]	; (80083a0 <tcp_input+0x49c>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	885b      	ldrh	r3, [r3, #2]
 80081ea:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d132      	bne.n	8008256 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80081f0:	69fb      	ldr	r3, [r7, #28]
 80081f2:	685a      	ldr	r2, [r3, #4]
 80081f4:	4b6b      	ldr	r3, [pc, #428]	; (80083a4 <tcp_input+0x4a0>)
 80081f6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d12c      	bne.n	8008256 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80081fc:	69fb      	ldr	r3, [r7, #28]
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	4b68      	ldr	r3, [pc, #416]	; (80083a4 <tcp_input+0x4a0>)
 8008202:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008204:	429a      	cmp	r2, r3
 8008206:	d126      	bne.n	8008256 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008208:	69fb      	ldr	r3, [r7, #28]
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	69fa      	ldr	r2, [r7, #28]
 800820e:	429a      	cmp	r2, r3
 8008210:	d106      	bne.n	8008220 <tcp_input+0x31c>
 8008212:	4b65      	ldr	r3, [pc, #404]	; (80083a8 <tcp_input+0x4a4>)
 8008214:	f240 120d 	movw	r2, #269	; 0x10d
 8008218:	4964      	ldr	r1, [pc, #400]	; (80083ac <tcp_input+0x4a8>)
 800821a:	4865      	ldr	r0, [pc, #404]	; (80083b0 <tcp_input+0x4ac>)
 800821c:	f006 fe4e 	bl	800eebc <iprintf>
      if (prev != NULL) {
 8008220:	69bb      	ldr	r3, [r7, #24]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d00a      	beq.n	800823c <tcp_input+0x338>
        prev->next = pcb->next;
 8008226:	69fb      	ldr	r3, [r7, #28]
 8008228:	68da      	ldr	r2, [r3, #12]
 800822a:	69bb      	ldr	r3, [r7, #24]
 800822c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800822e:	4b61      	ldr	r3, [pc, #388]	; (80083b4 <tcp_input+0x4b0>)
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	69fb      	ldr	r3, [r7, #28]
 8008234:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8008236:	4a5f      	ldr	r2, [pc, #380]	; (80083b4 <tcp_input+0x4b0>)
 8008238:	69fb      	ldr	r3, [r7, #28]
 800823a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800823c:	69fb      	ldr	r3, [r7, #28]
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	69fa      	ldr	r2, [r7, #28]
 8008242:	429a      	cmp	r2, r3
 8008244:	d111      	bne.n	800826a <tcp_input+0x366>
 8008246:	4b58      	ldr	r3, [pc, #352]	; (80083a8 <tcp_input+0x4a4>)
 8008248:	f240 1215 	movw	r2, #277	; 0x115
 800824c:	495a      	ldr	r1, [pc, #360]	; (80083b8 <tcp_input+0x4b4>)
 800824e:	4858      	ldr	r0, [pc, #352]	; (80083b0 <tcp_input+0x4ac>)
 8008250:	f006 fe34 	bl	800eebc <iprintf>
      break;
 8008254:	e009      	b.n	800826a <tcp_input+0x366>
    }
    prev = pcb;
 8008256:	69fb      	ldr	r3, [r7, #28]
 8008258:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	68db      	ldr	r3, [r3, #12]
 800825e:	61fb      	str	r3, [r7, #28]
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	2b00      	cmp	r3, #0
 8008264:	f47f af5e 	bne.w	8008124 <tcp_input+0x220>
 8008268:	e000      	b.n	800826c <tcp_input+0x368>
      break;
 800826a:	bf00      	nop
  }

  if (pcb == NULL) {
 800826c:	69fb      	ldr	r3, [r7, #28]
 800826e:	2b00      	cmp	r3, #0
 8008270:	f040 80aa 	bne.w	80083c8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008274:	4b51      	ldr	r3, [pc, #324]	; (80083bc <tcp_input+0x4b8>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	61fb      	str	r3, [r7, #28]
 800827a:	e03f      	b.n	80082fc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800827c:	69fb      	ldr	r3, [r7, #28]
 800827e:	7d1b      	ldrb	r3, [r3, #20]
 8008280:	2b0a      	cmp	r3, #10
 8008282:	d006      	beq.n	8008292 <tcp_input+0x38e>
 8008284:	4b48      	ldr	r3, [pc, #288]	; (80083a8 <tcp_input+0x4a4>)
 8008286:	f240 121f 	movw	r2, #287	; 0x11f
 800828a:	494d      	ldr	r1, [pc, #308]	; (80083c0 <tcp_input+0x4bc>)
 800828c:	4848      	ldr	r0, [pc, #288]	; (80083b0 <tcp_input+0x4ac>)
 800828e:	f006 fe15 	bl	800eebc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008292:	69fb      	ldr	r3, [r7, #28]
 8008294:	7a1b      	ldrb	r3, [r3, #8]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d009      	beq.n	80082ae <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800829a:	69fb      	ldr	r3, [r7, #28]
 800829c:	7a1a      	ldrb	r2, [r3, #8]
 800829e:	4b41      	ldr	r3, [pc, #260]	; (80083a4 <tcp_input+0x4a0>)
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80082a6:	3301      	adds	r3, #1
 80082a8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d122      	bne.n	80082f4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80082ae:	69fb      	ldr	r3, [r7, #28]
 80082b0:	8b1a      	ldrh	r2, [r3, #24]
 80082b2:	4b3b      	ldr	r3, [pc, #236]	; (80083a0 <tcp_input+0x49c>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	881b      	ldrh	r3, [r3, #0]
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d11b      	bne.n	80082f6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80082be:	69fb      	ldr	r3, [r7, #28]
 80082c0:	8ada      	ldrh	r2, [r3, #22]
 80082c2:	4b37      	ldr	r3, [pc, #220]	; (80083a0 <tcp_input+0x49c>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	885b      	ldrh	r3, [r3, #2]
 80082c8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d113      	bne.n	80082f6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	685a      	ldr	r2, [r3, #4]
 80082d2:	4b34      	ldr	r3, [pc, #208]	; (80083a4 <tcp_input+0x4a0>)
 80082d4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d10d      	bne.n	80082f6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80082da:	69fb      	ldr	r3, [r7, #28]
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	4b31      	ldr	r3, [pc, #196]	; (80083a4 <tcp_input+0x4a0>)
 80082e0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d107      	bne.n	80082f6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80082e6:	69f8      	ldr	r0, [r7, #28]
 80082e8:	f000 fb56 	bl	8008998 <tcp_timewait_input>
        }
        pbuf_free(p);
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f7fd ff3f 	bl	8006170 <pbuf_free>
        return;
 80082f2:	e1fd      	b.n	80086f0 <tcp_input+0x7ec>
        continue;
 80082f4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80082f6:	69fb      	ldr	r3, [r7, #28]
 80082f8:	68db      	ldr	r3, [r3, #12]
 80082fa:	61fb      	str	r3, [r7, #28]
 80082fc:	69fb      	ldr	r3, [r7, #28]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d1bc      	bne.n	800827c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8008302:	2300      	movs	r3, #0
 8008304:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008306:	4b2f      	ldr	r3, [pc, #188]	; (80083c4 <tcp_input+0x4c0>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	617b      	str	r3, [r7, #20]
 800830c:	e02a      	b.n	8008364 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	7a1b      	ldrb	r3, [r3, #8]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d00c      	beq.n	8008330 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	7a1a      	ldrb	r2, [r3, #8]
 800831a:	4b22      	ldr	r3, [pc, #136]	; (80083a4 <tcp_input+0x4a0>)
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008322:	3301      	adds	r3, #1
 8008324:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008326:	429a      	cmp	r2, r3
 8008328:	d002      	beq.n	8008330 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	61bb      	str	r3, [r7, #24]
        continue;
 800832e:	e016      	b.n	800835e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	8ada      	ldrh	r2, [r3, #22]
 8008334:	4b1a      	ldr	r3, [pc, #104]	; (80083a0 <tcp_input+0x49c>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	885b      	ldrh	r3, [r3, #2]
 800833a:	b29b      	uxth	r3, r3
 800833c:	429a      	cmp	r2, r3
 800833e:	d10c      	bne.n	800835a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	4b17      	ldr	r3, [pc, #92]	; (80083a4 <tcp_input+0x4a0>)
 8008346:	695b      	ldr	r3, [r3, #20]
 8008348:	429a      	cmp	r2, r3
 800834a:	d00f      	beq.n	800836c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d00d      	beq.n	800836e <tcp_input+0x46a>
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d009      	beq.n	800836e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	617b      	str	r3, [r7, #20]
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d1d1      	bne.n	800830e <tcp_input+0x40a>
 800836a:	e000      	b.n	800836e <tcp_input+0x46a>
            break;
 800836c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d029      	beq.n	80083c8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8008374:	69bb      	ldr	r3, [r7, #24]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d00a      	beq.n	8008390 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	68da      	ldr	r2, [r3, #12]
 800837e:	69bb      	ldr	r3, [r7, #24]
 8008380:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8008382:	4b10      	ldr	r3, [pc, #64]	; (80083c4 <tcp_input+0x4c0>)
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800838a:	4a0e      	ldr	r2, [pc, #56]	; (80083c4 <tcp_input+0x4c0>)
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8008390:	6978      	ldr	r0, [r7, #20]
 8008392:	f000 fa03 	bl	800879c <tcp_listen_input>
      }
      pbuf_free(p);
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f7fd feea 	bl	8006170 <pbuf_free>
      return;
 800839c:	e1a8      	b.n	80086f0 <tcp_input+0x7ec>
 800839e:	bf00      	nop
 80083a0:	2000a4dc 	.word	0x2000a4dc
 80083a4:	20004d84 	.word	0x20004d84
 80083a8:	08011300 	.word	0x08011300
 80083ac:	0801142c 	.word	0x0801142c
 80083b0:	0801134c 	.word	0x0801134c
 80083b4:	2000a4c0 	.word	0x2000a4c0
 80083b8:	08011458 	.word	0x08011458
 80083bc:	2000a4c4 	.word	0x2000a4c4
 80083c0:	08011484 	.word	0x08011484
 80083c4:	2000a4bc 	.word	0x2000a4bc
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80083c8:	69fb      	ldr	r3, [r7, #28]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	f000 8158 	beq.w	8008680 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80083d0:	4b95      	ldr	r3, [pc, #596]	; (8008628 <tcp_input+0x724>)
 80083d2:	2200      	movs	r2, #0
 80083d4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	891a      	ldrh	r2, [r3, #8]
 80083da:	4b93      	ldr	r3, [pc, #588]	; (8008628 <tcp_input+0x724>)
 80083dc:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80083de:	4a92      	ldr	r2, [pc, #584]	; (8008628 <tcp_input+0x724>)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80083e4:	4b91      	ldr	r3, [pc, #580]	; (800862c <tcp_input+0x728>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a8f      	ldr	r2, [pc, #572]	; (8008628 <tcp_input+0x724>)
 80083ea:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80083ec:	4b90      	ldr	r3, [pc, #576]	; (8008630 <tcp_input+0x72c>)
 80083ee:	2200      	movs	r2, #0
 80083f0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80083f2:	4b90      	ldr	r3, [pc, #576]	; (8008634 <tcp_input+0x730>)
 80083f4:	2200      	movs	r2, #0
 80083f6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80083f8:	4b8f      	ldr	r3, [pc, #572]	; (8008638 <tcp_input+0x734>)
 80083fa:	2200      	movs	r2, #0
 80083fc:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80083fe:	4b8f      	ldr	r3, [pc, #572]	; (800863c <tcp_input+0x738>)
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	f003 0308 	and.w	r3, r3, #8
 8008406:	2b00      	cmp	r3, #0
 8008408:	d006      	beq.n	8008418 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	7b5b      	ldrb	r3, [r3, #13]
 800840e:	f043 0301 	orr.w	r3, r3, #1
 8008412:	b2da      	uxtb	r2, r3
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8008418:	69fb      	ldr	r3, [r7, #28]
 800841a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800841c:	2b00      	cmp	r3, #0
 800841e:	d017      	beq.n	8008450 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008420:	69f8      	ldr	r0, [r7, #28]
 8008422:	f7ff f929 	bl	8007678 <tcp_process_refused_data>
 8008426:	4603      	mov	r3, r0
 8008428:	f113 0f0d 	cmn.w	r3, #13
 800842c:	d007      	beq.n	800843e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800842e:	69fb      	ldr	r3, [r7, #28]
 8008430:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008432:	2b00      	cmp	r3, #0
 8008434:	d00c      	beq.n	8008450 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008436:	4b82      	ldr	r3, [pc, #520]	; (8008640 <tcp_input+0x73c>)
 8008438:	881b      	ldrh	r3, [r3, #0]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d008      	beq.n	8008450 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800843e:	69fb      	ldr	r3, [r7, #28]
 8008440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008442:	2b00      	cmp	r3, #0
 8008444:	f040 80e3 	bne.w	800860e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8008448:	69f8      	ldr	r0, [r7, #28]
 800844a:	f003 f9ad 	bl	800b7a8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800844e:	e0de      	b.n	800860e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8008450:	4a7c      	ldr	r2, [pc, #496]	; (8008644 <tcp_input+0x740>)
 8008452:	69fb      	ldr	r3, [r7, #28]
 8008454:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8008456:	69f8      	ldr	r0, [r7, #28]
 8008458:	f000 fb18 	bl	8008a8c <tcp_process>
 800845c:	4603      	mov	r3, r0
 800845e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8008460:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008464:	f113 0f0d 	cmn.w	r3, #13
 8008468:	f000 80d3 	beq.w	8008612 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800846c:	4b71      	ldr	r3, [pc, #452]	; (8008634 <tcp_input+0x730>)
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	f003 0308 	and.w	r3, r3, #8
 8008474:	2b00      	cmp	r3, #0
 8008476:	d015      	beq.n	80084a4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8008478:	69fb      	ldr	r3, [r7, #28]
 800847a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800847e:	2b00      	cmp	r3, #0
 8008480:	d008      	beq.n	8008494 <tcp_input+0x590>
 8008482:	69fb      	ldr	r3, [r7, #28]
 8008484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008488:	69fa      	ldr	r2, [r7, #28]
 800848a:	6912      	ldr	r2, [r2, #16]
 800848c:	f06f 010d 	mvn.w	r1, #13
 8008490:	4610      	mov	r0, r2
 8008492:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008494:	69f9      	ldr	r1, [r7, #28]
 8008496:	486c      	ldr	r0, [pc, #432]	; (8008648 <tcp_input+0x744>)
 8008498:	f7ff fbbc 	bl	8007c14 <tcp_pcb_remove>
        tcp_free(pcb);
 800849c:	69f8      	ldr	r0, [r7, #28]
 800849e:	f7fe f9a9 	bl	80067f4 <tcp_free>
 80084a2:	e0da      	b.n	800865a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80084a4:	2300      	movs	r3, #0
 80084a6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80084a8:	4b63      	ldr	r3, [pc, #396]	; (8008638 <tcp_input+0x734>)
 80084aa:	881b      	ldrh	r3, [r3, #0]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d01d      	beq.n	80084ec <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80084b0:	4b61      	ldr	r3, [pc, #388]	; (8008638 <tcp_input+0x734>)
 80084b2:	881b      	ldrh	r3, [r3, #0]
 80084b4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80084b6:	69fb      	ldr	r3, [r7, #28]
 80084b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d00a      	beq.n	80084d6 <tcp_input+0x5d2>
 80084c0:	69fb      	ldr	r3, [r7, #28]
 80084c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084c6:	69fa      	ldr	r2, [r7, #28]
 80084c8:	6910      	ldr	r0, [r2, #16]
 80084ca:	89fa      	ldrh	r2, [r7, #14]
 80084cc:	69f9      	ldr	r1, [r7, #28]
 80084ce:	4798      	blx	r3
 80084d0:	4603      	mov	r3, r0
 80084d2:	74fb      	strb	r3, [r7, #19]
 80084d4:	e001      	b.n	80084da <tcp_input+0x5d6>
 80084d6:	2300      	movs	r3, #0
 80084d8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80084da:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80084de:	f113 0f0d 	cmn.w	r3, #13
 80084e2:	f000 8098 	beq.w	8008616 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80084e6:	4b54      	ldr	r3, [pc, #336]	; (8008638 <tcp_input+0x734>)
 80084e8:	2200      	movs	r2, #0
 80084ea:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80084ec:	69f8      	ldr	r0, [r7, #28]
 80084ee:	f000 f915 	bl	800871c <tcp_input_delayed_close>
 80084f2:	4603      	mov	r3, r0
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	f040 8090 	bne.w	800861a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80084fa:	4b4d      	ldr	r3, [pc, #308]	; (8008630 <tcp_input+0x72c>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d041      	beq.n	8008586 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008506:	2b00      	cmp	r3, #0
 8008508:	d006      	beq.n	8008518 <tcp_input+0x614>
 800850a:	4b50      	ldr	r3, [pc, #320]	; (800864c <tcp_input+0x748>)
 800850c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008510:	494f      	ldr	r1, [pc, #316]	; (8008650 <tcp_input+0x74c>)
 8008512:	4850      	ldr	r0, [pc, #320]	; (8008654 <tcp_input+0x750>)
 8008514:	f006 fcd2 	bl	800eebc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8008518:	69fb      	ldr	r3, [r7, #28]
 800851a:	8b5b      	ldrh	r3, [r3, #26]
 800851c:	f003 0310 	and.w	r3, r3, #16
 8008520:	2b00      	cmp	r3, #0
 8008522:	d008      	beq.n	8008536 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8008524:	4b42      	ldr	r3, [pc, #264]	; (8008630 <tcp_input+0x72c>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4618      	mov	r0, r3
 800852a:	f7fd fe21 	bl	8006170 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800852e:	69f8      	ldr	r0, [r7, #28]
 8008530:	f7fe fc48 	bl	8006dc4 <tcp_abort>
            goto aborted;
 8008534:	e091      	b.n	800865a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00c      	beq.n	800855a <tcp_input+0x656>
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008546:	69fb      	ldr	r3, [r7, #28]
 8008548:	6918      	ldr	r0, [r3, #16]
 800854a:	4b39      	ldr	r3, [pc, #228]	; (8008630 <tcp_input+0x72c>)
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	2300      	movs	r3, #0
 8008550:	69f9      	ldr	r1, [r7, #28]
 8008552:	47a0      	blx	r4
 8008554:	4603      	mov	r3, r0
 8008556:	74fb      	strb	r3, [r7, #19]
 8008558:	e008      	b.n	800856c <tcp_input+0x668>
 800855a:	4b35      	ldr	r3, [pc, #212]	; (8008630 <tcp_input+0x72c>)
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	2300      	movs	r3, #0
 8008560:	69f9      	ldr	r1, [r7, #28]
 8008562:	2000      	movs	r0, #0
 8008564:	f7ff f95e 	bl	8007824 <tcp_recv_null>
 8008568:	4603      	mov	r3, r0
 800856a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800856c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008570:	f113 0f0d 	cmn.w	r3, #13
 8008574:	d053      	beq.n	800861e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8008576:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d003      	beq.n	8008586 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800857e:	4b2c      	ldr	r3, [pc, #176]	; (8008630 <tcp_input+0x72c>)
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8008586:	4b2b      	ldr	r3, [pc, #172]	; (8008634 <tcp_input+0x730>)
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	f003 0320 	and.w	r3, r3, #32
 800858e:	2b00      	cmp	r3, #0
 8008590:	d030      	beq.n	80085f4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8008592:	69fb      	ldr	r3, [r7, #28]
 8008594:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008596:	2b00      	cmp	r3, #0
 8008598:	d009      	beq.n	80085ae <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800859a:	69fb      	ldr	r3, [r7, #28]
 800859c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800859e:	7b5a      	ldrb	r2, [r3, #13]
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085a4:	f042 0220 	orr.w	r2, r2, #32
 80085a8:	b2d2      	uxtb	r2, r2
 80085aa:	735a      	strb	r2, [r3, #13]
 80085ac:	e022      	b.n	80085f4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085b2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80085b6:	d005      	beq.n	80085c4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80085b8:	69fb      	ldr	r3, [r7, #28]
 80085ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085bc:	3301      	adds	r3, #1
 80085be:	b29a      	uxth	r2, r3
 80085c0:	69fb      	ldr	r3, [r7, #28]
 80085c2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80085c4:	69fb      	ldr	r3, [r7, #28]
 80085c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d00b      	beq.n	80085e6 <tcp_input+0x6e2>
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	6918      	ldr	r0, [r3, #16]
 80085d8:	2300      	movs	r3, #0
 80085da:	2200      	movs	r2, #0
 80085dc:	69f9      	ldr	r1, [r7, #28]
 80085de:	47a0      	blx	r4
 80085e0:	4603      	mov	r3, r0
 80085e2:	74fb      	strb	r3, [r7, #19]
 80085e4:	e001      	b.n	80085ea <tcp_input+0x6e6>
 80085e6:	2300      	movs	r3, #0
 80085e8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80085ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80085ee:	f113 0f0d 	cmn.w	r3, #13
 80085f2:	d016      	beq.n	8008622 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80085f4:	4b13      	ldr	r3, [pc, #76]	; (8008644 <tcp_input+0x740>)
 80085f6:	2200      	movs	r2, #0
 80085f8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80085fa:	69f8      	ldr	r0, [r7, #28]
 80085fc:	f000 f88e 	bl	800871c <tcp_input_delayed_close>
 8008600:	4603      	mov	r3, r0
 8008602:	2b00      	cmp	r3, #0
 8008604:	d128      	bne.n	8008658 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8008606:	69f8      	ldr	r0, [r7, #28]
 8008608:	f002 fac8 	bl	800ab9c <tcp_output>
 800860c:	e025      	b.n	800865a <tcp_input+0x756>
        goto aborted;
 800860e:	bf00      	nop
 8008610:	e023      	b.n	800865a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8008612:	bf00      	nop
 8008614:	e021      	b.n	800865a <tcp_input+0x756>
              goto aborted;
 8008616:	bf00      	nop
 8008618:	e01f      	b.n	800865a <tcp_input+0x756>
          goto aborted;
 800861a:	bf00      	nop
 800861c:	e01d      	b.n	800865a <tcp_input+0x756>
            goto aborted;
 800861e:	bf00      	nop
 8008620:	e01b      	b.n	800865a <tcp_input+0x756>
              goto aborted;
 8008622:	bf00      	nop
 8008624:	e019      	b.n	800865a <tcp_input+0x756>
 8008626:	bf00      	nop
 8008628:	2000a4cc 	.word	0x2000a4cc
 800862c:	2000a4dc 	.word	0x2000a4dc
 8008630:	2000a4fc 	.word	0x2000a4fc
 8008634:	2000a4f9 	.word	0x2000a4f9
 8008638:	2000a4f4 	.word	0x2000a4f4
 800863c:	2000a4f8 	.word	0x2000a4f8
 8008640:	2000a4f6 	.word	0x2000a4f6
 8008644:	2000a500 	.word	0x2000a500
 8008648:	2000a4c0 	.word	0x2000a4c0
 800864c:	08011300 	.word	0x08011300
 8008650:	080114b4 	.word	0x080114b4
 8008654:	0801134c 	.word	0x0801134c
          goto aborted;
 8008658:	bf00      	nop
    tcp_input_pcb = NULL;
 800865a:	4b27      	ldr	r3, [pc, #156]	; (80086f8 <tcp_input+0x7f4>)
 800865c:	2200      	movs	r2, #0
 800865e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8008660:	4b26      	ldr	r3, [pc, #152]	; (80086fc <tcp_input+0x7f8>)
 8008662:	2200      	movs	r2, #0
 8008664:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8008666:	4b26      	ldr	r3, [pc, #152]	; (8008700 <tcp_input+0x7fc>)
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d03f      	beq.n	80086ee <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800866e:	4b24      	ldr	r3, [pc, #144]	; (8008700 <tcp_input+0x7fc>)
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	4618      	mov	r0, r3
 8008674:	f7fd fd7c 	bl	8006170 <pbuf_free>
      inseg.p = NULL;
 8008678:	4b21      	ldr	r3, [pc, #132]	; (8008700 <tcp_input+0x7fc>)
 800867a:	2200      	movs	r2, #0
 800867c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800867e:	e036      	b.n	80086ee <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8008680:	4b20      	ldr	r3, [pc, #128]	; (8008704 <tcp_input+0x800>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	899b      	ldrh	r3, [r3, #12]
 8008686:	b29b      	uxth	r3, r3
 8008688:	4618      	mov	r0, r3
 800868a:	f7fc fa13 	bl	8004ab4 <lwip_htons>
 800868e:	4603      	mov	r3, r0
 8008690:	b2db      	uxtb	r3, r3
 8008692:	f003 0304 	and.w	r3, r3, #4
 8008696:	2b00      	cmp	r3, #0
 8008698:	d118      	bne.n	80086cc <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800869a:	4b1b      	ldr	r3, [pc, #108]	; (8008708 <tcp_input+0x804>)
 800869c:	6819      	ldr	r1, [r3, #0]
 800869e:	4b1b      	ldr	r3, [pc, #108]	; (800870c <tcp_input+0x808>)
 80086a0:	881b      	ldrh	r3, [r3, #0]
 80086a2:	461a      	mov	r2, r3
 80086a4:	4b1a      	ldr	r3, [pc, #104]	; (8008710 <tcp_input+0x80c>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80086aa:	4b16      	ldr	r3, [pc, #88]	; (8008704 <tcp_input+0x800>)
 80086ac:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80086ae:	885b      	ldrh	r3, [r3, #2]
 80086b0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80086b2:	4a14      	ldr	r2, [pc, #80]	; (8008704 <tcp_input+0x800>)
 80086b4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80086b6:	8812      	ldrh	r2, [r2, #0]
 80086b8:	b292      	uxth	r2, r2
 80086ba:	9202      	str	r2, [sp, #8]
 80086bc:	9301      	str	r3, [sp, #4]
 80086be:	4b15      	ldr	r3, [pc, #84]	; (8008714 <tcp_input+0x810>)
 80086c0:	9300      	str	r3, [sp, #0]
 80086c2:	4b15      	ldr	r3, [pc, #84]	; (8008718 <tcp_input+0x814>)
 80086c4:	4602      	mov	r2, r0
 80086c6:	2000      	movs	r0, #0
 80086c8:	f003 f81c 	bl	800b704 <tcp_rst>
    pbuf_free(p);
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f7fd fd4f 	bl	8006170 <pbuf_free>
  return;
 80086d2:	e00c      	b.n	80086ee <tcp_input+0x7ea>
    goto dropped;
 80086d4:	bf00      	nop
 80086d6:	e006      	b.n	80086e6 <tcp_input+0x7e2>
    goto dropped;
 80086d8:	bf00      	nop
 80086da:	e004      	b.n	80086e6 <tcp_input+0x7e2>
    goto dropped;
 80086dc:	bf00      	nop
 80086de:	e002      	b.n	80086e6 <tcp_input+0x7e2>
      goto dropped;
 80086e0:	bf00      	nop
 80086e2:	e000      	b.n	80086e6 <tcp_input+0x7e2>
      goto dropped;
 80086e4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f7fd fd42 	bl	8006170 <pbuf_free>
 80086ec:	e000      	b.n	80086f0 <tcp_input+0x7ec>
  return;
 80086ee:	bf00      	nop
}
 80086f0:	3724      	adds	r7, #36	; 0x24
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd90      	pop	{r4, r7, pc}
 80086f6:	bf00      	nop
 80086f8:	2000a500 	.word	0x2000a500
 80086fc:	2000a4fc 	.word	0x2000a4fc
 8008700:	2000a4cc 	.word	0x2000a4cc
 8008704:	2000a4dc 	.word	0x2000a4dc
 8008708:	2000a4f0 	.word	0x2000a4f0
 800870c:	2000a4f6 	.word	0x2000a4f6
 8008710:	2000a4ec 	.word	0x2000a4ec
 8008714:	20004d94 	.word	0x20004d94
 8008718:	20004d98 	.word	0x20004d98

0800871c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d106      	bne.n	8008738 <tcp_input_delayed_close+0x1c>
 800872a:	4b17      	ldr	r3, [pc, #92]	; (8008788 <tcp_input_delayed_close+0x6c>)
 800872c:	f240 225a 	movw	r2, #602	; 0x25a
 8008730:	4916      	ldr	r1, [pc, #88]	; (800878c <tcp_input_delayed_close+0x70>)
 8008732:	4817      	ldr	r0, [pc, #92]	; (8008790 <tcp_input_delayed_close+0x74>)
 8008734:	f006 fbc2 	bl	800eebc <iprintf>

  if (recv_flags & TF_CLOSED) {
 8008738:	4b16      	ldr	r3, [pc, #88]	; (8008794 <tcp_input_delayed_close+0x78>)
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	f003 0310 	and.w	r3, r3, #16
 8008740:	2b00      	cmp	r3, #0
 8008742:	d01c      	beq.n	800877e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	8b5b      	ldrh	r3, [r3, #26]
 8008748:	f003 0310 	and.w	r3, r3, #16
 800874c:	2b00      	cmp	r3, #0
 800874e:	d10d      	bne.n	800876c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008756:	2b00      	cmp	r3, #0
 8008758:	d008      	beq.n	800876c <tcp_input_delayed_close+0x50>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	6912      	ldr	r2, [r2, #16]
 8008764:	f06f 010e 	mvn.w	r1, #14
 8008768:	4610      	mov	r0, r2
 800876a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800876c:	6879      	ldr	r1, [r7, #4]
 800876e:	480a      	ldr	r0, [pc, #40]	; (8008798 <tcp_input_delayed_close+0x7c>)
 8008770:	f7ff fa50 	bl	8007c14 <tcp_pcb_remove>
    tcp_free(pcb);
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f7fe f83d 	bl	80067f4 <tcp_free>
    return 1;
 800877a:	2301      	movs	r3, #1
 800877c:	e000      	b.n	8008780 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800877e:	2300      	movs	r3, #0
}
 8008780:	4618      	mov	r0, r3
 8008782:	3708      	adds	r7, #8
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}
 8008788:	08011300 	.word	0x08011300
 800878c:	080114d0 	.word	0x080114d0
 8008790:	0801134c 	.word	0x0801134c
 8008794:	2000a4f9 	.word	0x2000a4f9
 8008798:	2000a4c0 	.word	0x2000a4c0

0800879c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800879c:	b590      	push	{r4, r7, lr}
 800879e:	b08b      	sub	sp, #44	; 0x2c
 80087a0:	af04      	add	r7, sp, #16
 80087a2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80087a4:	4b6f      	ldr	r3, [pc, #444]	; (8008964 <tcp_listen_input+0x1c8>)
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	f003 0304 	and.w	r3, r3, #4
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	f040 80d2 	bne.w	8008956 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d106      	bne.n	80087c6 <tcp_listen_input+0x2a>
 80087b8:	4b6b      	ldr	r3, [pc, #428]	; (8008968 <tcp_listen_input+0x1cc>)
 80087ba:	f240 2281 	movw	r2, #641	; 0x281
 80087be:	496b      	ldr	r1, [pc, #428]	; (800896c <tcp_listen_input+0x1d0>)
 80087c0:	486b      	ldr	r0, [pc, #428]	; (8008970 <tcp_listen_input+0x1d4>)
 80087c2:	f006 fb7b 	bl	800eebc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80087c6:	4b67      	ldr	r3, [pc, #412]	; (8008964 <tcp_listen_input+0x1c8>)
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	f003 0310 	and.w	r3, r3, #16
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d019      	beq.n	8008806 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80087d2:	4b68      	ldr	r3, [pc, #416]	; (8008974 <tcp_listen_input+0x1d8>)
 80087d4:	6819      	ldr	r1, [r3, #0]
 80087d6:	4b68      	ldr	r3, [pc, #416]	; (8008978 <tcp_listen_input+0x1dc>)
 80087d8:	881b      	ldrh	r3, [r3, #0]
 80087da:	461a      	mov	r2, r3
 80087dc:	4b67      	ldr	r3, [pc, #412]	; (800897c <tcp_listen_input+0x1e0>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80087e2:	4b67      	ldr	r3, [pc, #412]	; (8008980 <tcp_listen_input+0x1e4>)
 80087e4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80087e6:	885b      	ldrh	r3, [r3, #2]
 80087e8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80087ea:	4a65      	ldr	r2, [pc, #404]	; (8008980 <tcp_listen_input+0x1e4>)
 80087ec:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80087ee:	8812      	ldrh	r2, [r2, #0]
 80087f0:	b292      	uxth	r2, r2
 80087f2:	9202      	str	r2, [sp, #8]
 80087f4:	9301      	str	r3, [sp, #4]
 80087f6:	4b63      	ldr	r3, [pc, #396]	; (8008984 <tcp_listen_input+0x1e8>)
 80087f8:	9300      	str	r3, [sp, #0]
 80087fa:	4b63      	ldr	r3, [pc, #396]	; (8008988 <tcp_listen_input+0x1ec>)
 80087fc:	4602      	mov	r2, r0
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f002 ff80 	bl	800b704 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8008804:	e0a9      	b.n	800895a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8008806:	4b57      	ldr	r3, [pc, #348]	; (8008964 <tcp_listen_input+0x1c8>)
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	f003 0302 	and.w	r3, r3, #2
 800880e:	2b00      	cmp	r3, #0
 8008810:	f000 80a3 	beq.w	800895a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	7d5b      	ldrb	r3, [r3, #21]
 8008818:	4618      	mov	r0, r3
 800881a:	f7ff f927 	bl	8007a6c <tcp_alloc>
 800881e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d111      	bne.n	800884a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	699b      	ldr	r3, [r3, #24]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d00a      	beq.n	8008844 <tcp_listen_input+0xa8>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	699b      	ldr	r3, [r3, #24]
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	6910      	ldr	r0, [r2, #16]
 8008836:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800883a:	2100      	movs	r1, #0
 800883c:	4798      	blx	r3
 800883e:	4603      	mov	r3, r0
 8008840:	73bb      	strb	r3, [r7, #14]
      return;
 8008842:	e08b      	b.n	800895c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008844:	23f0      	movs	r3, #240	; 0xf0
 8008846:	73bb      	strb	r3, [r7, #14]
      return;
 8008848:	e088      	b.n	800895c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800884a:	4b50      	ldr	r3, [pc, #320]	; (800898c <tcp_listen_input+0x1f0>)
 800884c:	695a      	ldr	r2, [r3, #20]
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8008852:	4b4e      	ldr	r3, [pc, #312]	; (800898c <tcp_listen_input+0x1f0>)
 8008854:	691a      	ldr	r2, [r3, #16]
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	8ada      	ldrh	r2, [r3, #22]
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8008862:	4b47      	ldr	r3, [pc, #284]	; (8008980 <tcp_listen_input+0x1e4>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	881b      	ldrh	r3, [r3, #0]
 8008868:	b29a      	uxth	r2, r3
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	2203      	movs	r2, #3
 8008872:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8008874:	4b41      	ldr	r3, [pc, #260]	; (800897c <tcp_listen_input+0x1e0>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	1c5a      	adds	r2, r3, #1
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8008886:	6978      	ldr	r0, [r7, #20]
 8008888:	f7ff fa58 	bl	8007d3c <tcp_next_iss>
 800888c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	693a      	ldr	r2, [r7, #16]
 8008892:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	693a      	ldr	r2, [r7, #16]
 8008898:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	693a      	ldr	r2, [r7, #16]
 800889e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	693a      	ldr	r2, [r7, #16]
 80088a4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80088a6:	4b35      	ldr	r3, [pc, #212]	; (800897c <tcp_listen_input+0x1e0>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	1e5a      	subs	r2, r3, #1
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	691a      	ldr	r2, [r3, #16]
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	7a5b      	ldrb	r3, [r3, #9]
 80088c2:	f003 030c 	and.w	r3, r3, #12
 80088c6:	b2da      	uxtb	r2, r3
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	7a1a      	ldrb	r2, [r3, #8]
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80088d4:	4b2e      	ldr	r3, [pc, #184]	; (8008990 <tcp_listen_input+0x1f4>)
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	60da      	str	r2, [r3, #12]
 80088dc:	4a2c      	ldr	r2, [pc, #176]	; (8008990 <tcp_listen_input+0x1f4>)
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	6013      	str	r3, [r2, #0]
 80088e2:	f003 f8d1 	bl	800ba88 <tcp_timer_needed>
 80088e6:	4b2b      	ldr	r3, [pc, #172]	; (8008994 <tcp_listen_input+0x1f8>)
 80088e8:	2201      	movs	r2, #1
 80088ea:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80088ec:	6978      	ldr	r0, [r7, #20]
 80088ee:	f001 fd8f 	bl	800a410 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80088f2:	4b23      	ldr	r3, [pc, #140]	; (8008980 <tcp_listen_input+0x1e4>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	89db      	ldrh	r3, [r3, #14]
 80088f8:	b29a      	uxth	r2, r3
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	3304      	adds	r3, #4
 8008914:	4618      	mov	r0, r3
 8008916:	f004 ffe5 	bl	800d8e4 <ip4_route>
 800891a:	4601      	mov	r1, r0
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	3304      	adds	r3, #4
 8008920:	461a      	mov	r2, r3
 8008922:	4620      	mov	r0, r4
 8008924:	f7ff fa30 	bl	8007d88 <tcp_eff_send_mss_netif>
 8008928:	4603      	mov	r3, r0
 800892a:	461a      	mov	r2, r3
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008930:	2112      	movs	r1, #18
 8008932:	6978      	ldr	r0, [r7, #20]
 8008934:	f002 f844 	bl	800a9c0 <tcp_enqueue_flags>
 8008938:	4603      	mov	r3, r0
 800893a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800893c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d004      	beq.n	800894e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8008944:	2100      	movs	r1, #0
 8008946:	6978      	ldr	r0, [r7, #20]
 8008948:	f7fe f97e 	bl	8006c48 <tcp_abandon>
      return;
 800894c:	e006      	b.n	800895c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800894e:	6978      	ldr	r0, [r7, #20]
 8008950:	f002 f924 	bl	800ab9c <tcp_output>
  return;
 8008954:	e001      	b.n	800895a <tcp_listen_input+0x1be>
    return;
 8008956:	bf00      	nop
 8008958:	e000      	b.n	800895c <tcp_listen_input+0x1c0>
  return;
 800895a:	bf00      	nop
}
 800895c:	371c      	adds	r7, #28
 800895e:	46bd      	mov	sp, r7
 8008960:	bd90      	pop	{r4, r7, pc}
 8008962:	bf00      	nop
 8008964:	2000a4f8 	.word	0x2000a4f8
 8008968:	08011300 	.word	0x08011300
 800896c:	080114f8 	.word	0x080114f8
 8008970:	0801134c 	.word	0x0801134c
 8008974:	2000a4f0 	.word	0x2000a4f0
 8008978:	2000a4f6 	.word	0x2000a4f6
 800897c:	2000a4ec 	.word	0x2000a4ec
 8008980:	2000a4dc 	.word	0x2000a4dc
 8008984:	20004d94 	.word	0x20004d94
 8008988:	20004d98 	.word	0x20004d98
 800898c:	20004d84 	.word	0x20004d84
 8008990:	2000a4c0 	.word	0x2000a4c0
 8008994:	2000a4c8 	.word	0x2000a4c8

08008998 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b086      	sub	sp, #24
 800899c:	af04      	add	r7, sp, #16
 800899e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80089a0:	4b2f      	ldr	r3, [pc, #188]	; (8008a60 <tcp_timewait_input+0xc8>)
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	f003 0304 	and.w	r3, r3, #4
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d153      	bne.n	8008a54 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d106      	bne.n	80089c0 <tcp_timewait_input+0x28>
 80089b2:	4b2c      	ldr	r3, [pc, #176]	; (8008a64 <tcp_timewait_input+0xcc>)
 80089b4:	f240 22ee 	movw	r2, #750	; 0x2ee
 80089b8:	492b      	ldr	r1, [pc, #172]	; (8008a68 <tcp_timewait_input+0xd0>)
 80089ba:	482c      	ldr	r0, [pc, #176]	; (8008a6c <tcp_timewait_input+0xd4>)
 80089bc:	f006 fa7e 	bl	800eebc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80089c0:	4b27      	ldr	r3, [pc, #156]	; (8008a60 <tcp_timewait_input+0xc8>)
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	f003 0302 	and.w	r3, r3, #2
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d02a      	beq.n	8008a22 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80089cc:	4b28      	ldr	r3, [pc, #160]	; (8008a70 <tcp_timewait_input+0xd8>)
 80089ce:	681a      	ldr	r2, [r3, #0]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d4:	1ad3      	subs	r3, r2, r3
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	db2d      	blt.n	8008a36 <tcp_timewait_input+0x9e>
 80089da:	4b25      	ldr	r3, [pc, #148]	; (8008a70 <tcp_timewait_input+0xd8>)
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e2:	6879      	ldr	r1, [r7, #4]
 80089e4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80089e6:	440b      	add	r3, r1
 80089e8:	1ad3      	subs	r3, r2, r3
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	dc23      	bgt.n	8008a36 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80089ee:	4b21      	ldr	r3, [pc, #132]	; (8008a74 <tcp_timewait_input+0xdc>)
 80089f0:	6819      	ldr	r1, [r3, #0]
 80089f2:	4b21      	ldr	r3, [pc, #132]	; (8008a78 <tcp_timewait_input+0xe0>)
 80089f4:	881b      	ldrh	r3, [r3, #0]
 80089f6:	461a      	mov	r2, r3
 80089f8:	4b1d      	ldr	r3, [pc, #116]	; (8008a70 <tcp_timewait_input+0xd8>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80089fe:	4b1f      	ldr	r3, [pc, #124]	; (8008a7c <tcp_timewait_input+0xe4>)
 8008a00:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008a02:	885b      	ldrh	r3, [r3, #2]
 8008a04:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008a06:	4a1d      	ldr	r2, [pc, #116]	; (8008a7c <tcp_timewait_input+0xe4>)
 8008a08:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008a0a:	8812      	ldrh	r2, [r2, #0]
 8008a0c:	b292      	uxth	r2, r2
 8008a0e:	9202      	str	r2, [sp, #8]
 8008a10:	9301      	str	r3, [sp, #4]
 8008a12:	4b1b      	ldr	r3, [pc, #108]	; (8008a80 <tcp_timewait_input+0xe8>)
 8008a14:	9300      	str	r3, [sp, #0]
 8008a16:	4b1b      	ldr	r3, [pc, #108]	; (8008a84 <tcp_timewait_input+0xec>)
 8008a18:	4602      	mov	r2, r0
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f002 fe72 	bl	800b704 <tcp_rst>
      return;
 8008a20:	e01b      	b.n	8008a5a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8008a22:	4b0f      	ldr	r3, [pc, #60]	; (8008a60 <tcp_timewait_input+0xc8>)
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	f003 0301 	and.w	r3, r3, #1
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d003      	beq.n	8008a36 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8008a2e:	4b16      	ldr	r3, [pc, #88]	; (8008a88 <tcp_timewait_input+0xf0>)
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8008a36:	4b10      	ldr	r3, [pc, #64]	; (8008a78 <tcp_timewait_input+0xe0>)
 8008a38:	881b      	ldrh	r3, [r3, #0]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d00c      	beq.n	8008a58 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	8b5b      	ldrh	r3, [r3, #26]
 8008a42:	f043 0302 	orr.w	r3, r3, #2
 8008a46:	b29a      	uxth	r2, r3
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f002 f8a5 	bl	800ab9c <tcp_output>
  }
  return;
 8008a52:	e001      	b.n	8008a58 <tcp_timewait_input+0xc0>
    return;
 8008a54:	bf00      	nop
 8008a56:	e000      	b.n	8008a5a <tcp_timewait_input+0xc2>
  return;
 8008a58:	bf00      	nop
}
 8008a5a:	3708      	adds	r7, #8
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}
 8008a60:	2000a4f8 	.word	0x2000a4f8
 8008a64:	08011300 	.word	0x08011300
 8008a68:	08011518 	.word	0x08011518
 8008a6c:	0801134c 	.word	0x0801134c
 8008a70:	2000a4ec 	.word	0x2000a4ec
 8008a74:	2000a4f0 	.word	0x2000a4f0
 8008a78:	2000a4f6 	.word	0x2000a4f6
 8008a7c:	2000a4dc 	.word	0x2000a4dc
 8008a80:	20004d94 	.word	0x20004d94
 8008a84:	20004d98 	.word	0x20004d98
 8008a88:	2000a4b4 	.word	0x2000a4b4

08008a8c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8008a8c:	b590      	push	{r4, r7, lr}
 8008a8e:	b08d      	sub	sp, #52	; 0x34
 8008a90:	af04      	add	r7, sp, #16
 8008a92:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8008a94:	2300      	movs	r3, #0
 8008a96:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d106      	bne.n	8008ab0 <tcp_process+0x24>
 8008aa2:	4b9d      	ldr	r3, [pc, #628]	; (8008d18 <tcp_process+0x28c>)
 8008aa4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008aa8:	499c      	ldr	r1, [pc, #624]	; (8008d1c <tcp_process+0x290>)
 8008aaa:	489d      	ldr	r0, [pc, #628]	; (8008d20 <tcp_process+0x294>)
 8008aac:	f006 fa06 	bl	800eebc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8008ab0:	4b9c      	ldr	r3, [pc, #624]	; (8008d24 <tcp_process+0x298>)
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	f003 0304 	and.w	r3, r3, #4
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d04e      	beq.n	8008b5a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	7d1b      	ldrb	r3, [r3, #20]
 8008ac0:	2b02      	cmp	r3, #2
 8008ac2:	d108      	bne.n	8008ad6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008ac8:	4b97      	ldr	r3, [pc, #604]	; (8008d28 <tcp_process+0x29c>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d123      	bne.n	8008b18 <tcp_process+0x8c>
        acceptable = 1;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	76fb      	strb	r3, [r7, #27]
 8008ad4:	e020      	b.n	8008b18 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ada:	4b94      	ldr	r3, [pc, #592]	; (8008d2c <tcp_process+0x2a0>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d102      	bne.n	8008ae8 <tcp_process+0x5c>
        acceptable = 1;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	76fb      	strb	r3, [r7, #27]
 8008ae6:	e017      	b.n	8008b18 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008ae8:	4b90      	ldr	r3, [pc, #576]	; (8008d2c <tcp_process+0x2a0>)
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af0:	1ad3      	subs	r3, r2, r3
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	db10      	blt.n	8008b18 <tcp_process+0x8c>
 8008af6:	4b8d      	ldr	r3, [pc, #564]	; (8008d2c <tcp_process+0x2a0>)
 8008af8:	681a      	ldr	r2, [r3, #0]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afe:	6879      	ldr	r1, [r7, #4]
 8008b00:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008b02:	440b      	add	r3, r1
 8008b04:	1ad3      	subs	r3, r2, r3
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	dc06      	bgt.n	8008b18 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	8b5b      	ldrh	r3, [r3, #26]
 8008b0e:	f043 0302 	orr.w	r3, r3, #2
 8008b12:	b29a      	uxth	r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8008b18:	7efb      	ldrb	r3, [r7, #27]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d01b      	beq.n	8008b56 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	7d1b      	ldrb	r3, [r3, #20]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d106      	bne.n	8008b34 <tcp_process+0xa8>
 8008b26:	4b7c      	ldr	r3, [pc, #496]	; (8008d18 <tcp_process+0x28c>)
 8008b28:	f44f 724e 	mov.w	r2, #824	; 0x338
 8008b2c:	4980      	ldr	r1, [pc, #512]	; (8008d30 <tcp_process+0x2a4>)
 8008b2e:	487c      	ldr	r0, [pc, #496]	; (8008d20 <tcp_process+0x294>)
 8008b30:	f006 f9c4 	bl	800eebc <iprintf>
      recv_flags |= TF_RESET;
 8008b34:	4b7f      	ldr	r3, [pc, #508]	; (8008d34 <tcp_process+0x2a8>)
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	f043 0308 	orr.w	r3, r3, #8
 8008b3c:	b2da      	uxtb	r2, r3
 8008b3e:	4b7d      	ldr	r3, [pc, #500]	; (8008d34 <tcp_process+0x2a8>)
 8008b40:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	8b5b      	ldrh	r3, [r3, #26]
 8008b46:	f023 0301 	bic.w	r3, r3, #1
 8008b4a:	b29a      	uxth	r2, r3
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8008b50:	f06f 030d 	mvn.w	r3, #13
 8008b54:	e37a      	b.n	800924c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8008b56:	2300      	movs	r3, #0
 8008b58:	e378      	b.n	800924c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8008b5a:	4b72      	ldr	r3, [pc, #456]	; (8008d24 <tcp_process+0x298>)
 8008b5c:	781b      	ldrb	r3, [r3, #0]
 8008b5e:	f003 0302 	and.w	r3, r3, #2
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d010      	beq.n	8008b88 <tcp_process+0xfc>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	7d1b      	ldrb	r3, [r3, #20]
 8008b6a:	2b02      	cmp	r3, #2
 8008b6c:	d00c      	beq.n	8008b88 <tcp_process+0xfc>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	7d1b      	ldrb	r3, [r3, #20]
 8008b72:	2b03      	cmp	r3, #3
 8008b74:	d008      	beq.n	8008b88 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	8b5b      	ldrh	r3, [r3, #26]
 8008b7a:	f043 0302 	orr.w	r3, r3, #2
 8008b7e:	b29a      	uxth	r2, r3
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8008b84:	2300      	movs	r3, #0
 8008b86:	e361      	b.n	800924c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	8b5b      	ldrh	r3, [r3, #26]
 8008b8c:	f003 0310 	and.w	r3, r3, #16
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d103      	bne.n	8008b9c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8008b94:	4b68      	ldr	r3, [pc, #416]	; (8008d38 <tcp_process+0x2ac>)
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f001 fc2f 	bl	800a410 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	7d1b      	ldrb	r3, [r3, #20]
 8008bb6:	3b02      	subs	r3, #2
 8008bb8:	2b07      	cmp	r3, #7
 8008bba:	f200 8337 	bhi.w	800922c <tcp_process+0x7a0>
 8008bbe:	a201      	add	r2, pc, #4	; (adr r2, 8008bc4 <tcp_process+0x138>)
 8008bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc4:	08008be5 	.word	0x08008be5
 8008bc8:	08008e15 	.word	0x08008e15
 8008bcc:	08008f8d 	.word	0x08008f8d
 8008bd0:	08008fb7 	.word	0x08008fb7
 8008bd4:	080090db 	.word	0x080090db
 8008bd8:	08008f8d 	.word	0x08008f8d
 8008bdc:	08009167 	.word	0x08009167
 8008be0:	080091f7 	.word	0x080091f7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008be4:	4b4f      	ldr	r3, [pc, #316]	; (8008d24 <tcp_process+0x298>)
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	f003 0310 	and.w	r3, r3, #16
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	f000 80e4 	beq.w	8008dba <tcp_process+0x32e>
 8008bf2:	4b4c      	ldr	r3, [pc, #304]	; (8008d24 <tcp_process+0x298>)
 8008bf4:	781b      	ldrb	r3, [r3, #0]
 8008bf6:	f003 0302 	and.w	r3, r3, #2
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	f000 80dd 	beq.w	8008dba <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c04:	1c5a      	adds	r2, r3, #1
 8008c06:	4b48      	ldr	r3, [pc, #288]	; (8008d28 <tcp_process+0x29c>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	f040 80d5 	bne.w	8008dba <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8008c10:	4b46      	ldr	r3, [pc, #280]	; (8008d2c <tcp_process+0x2a0>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	1c5a      	adds	r2, r3, #1
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8008c22:	4b41      	ldr	r3, [pc, #260]	; (8008d28 <tcp_process+0x29c>)
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8008c2a:	4b44      	ldr	r3, [pc, #272]	; (8008d3c <tcp_process+0x2b0>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	89db      	ldrh	r3, [r3, #14]
 8008c30:	b29a      	uxth	r2, r3
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008c44:	4b39      	ldr	r3, [pc, #228]	; (8008d2c <tcp_process+0x2a0>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	1e5a      	subs	r2, r3, #1
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2204      	movs	r2, #4
 8008c52:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	3304      	adds	r3, #4
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f004 fe41 	bl	800d8e4 <ip4_route>
 8008c62:	4601      	mov	r1, r0
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	3304      	adds	r3, #4
 8008c68:	461a      	mov	r2, r3
 8008c6a:	4620      	mov	r0, r4
 8008c6c:	f7ff f88c 	bl	8007d88 <tcp_eff_send_mss_netif>
 8008c70:	4603      	mov	r3, r0
 8008c72:	461a      	mov	r2, r3
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c7c:	009a      	lsls	r2, r3, #2
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c82:	005b      	lsls	r3, r3, #1
 8008c84:	f241 111c 	movw	r1, #4380	; 0x111c
 8008c88:	428b      	cmp	r3, r1
 8008c8a:	bf38      	it	cc
 8008c8c:	460b      	movcc	r3, r1
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d204      	bcs.n	8008c9c <tcp_process+0x210>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c96:	009b      	lsls	r3, r3, #2
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	e00d      	b.n	8008cb8 <tcp_process+0x22c>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008ca0:	005b      	lsls	r3, r3, #1
 8008ca2:	f241 121c 	movw	r2, #4380	; 0x111c
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d904      	bls.n	8008cb4 <tcp_process+0x228>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008cae:	005b      	lsls	r3, r3, #1
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	e001      	b.n	8008cb8 <tcp_process+0x22c>
 8008cb4:	f241 131c 	movw	r3, #4380	; 0x111c
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d106      	bne.n	8008cd6 <tcp_process+0x24a>
 8008cc8:	4b13      	ldr	r3, [pc, #76]	; (8008d18 <tcp_process+0x28c>)
 8008cca:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8008cce:	491c      	ldr	r1, [pc, #112]	; (8008d40 <tcp_process+0x2b4>)
 8008cd0:	4813      	ldr	r0, [pc, #76]	; (8008d20 <tcp_process+0x294>)
 8008cd2:	f006 f8f3 	bl	800eebc <iprintf>
        --pcb->snd_queuelen;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008cdc:	3b01      	subs	r3, #1
 8008cde:	b29a      	uxth	r2, r3
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cea:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8008cec:	69fb      	ldr	r3, [r7, #28]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d12a      	bne.n	8008d48 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cf6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8008cf8:	69fb      	ldr	r3, [r7, #28]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d106      	bne.n	8008d0c <tcp_process+0x280>
 8008cfe:	4b06      	ldr	r3, [pc, #24]	; (8008d18 <tcp_process+0x28c>)
 8008d00:	f44f 725d 	mov.w	r2, #884	; 0x374
 8008d04:	490f      	ldr	r1, [pc, #60]	; (8008d44 <tcp_process+0x2b8>)
 8008d06:	4806      	ldr	r0, [pc, #24]	; (8008d20 <tcp_process+0x294>)
 8008d08:	f006 f8d8 	bl	800eebc <iprintf>
          pcb->unsent = rseg->next;
 8008d0c:	69fb      	ldr	r3, [r7, #28]
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	66da      	str	r2, [r3, #108]	; 0x6c
 8008d14:	e01c      	b.n	8008d50 <tcp_process+0x2c4>
 8008d16:	bf00      	nop
 8008d18:	08011300 	.word	0x08011300
 8008d1c:	08011538 	.word	0x08011538
 8008d20:	0801134c 	.word	0x0801134c
 8008d24:	2000a4f8 	.word	0x2000a4f8
 8008d28:	2000a4f0 	.word	0x2000a4f0
 8008d2c:	2000a4ec 	.word	0x2000a4ec
 8008d30:	08011554 	.word	0x08011554
 8008d34:	2000a4f9 	.word	0x2000a4f9
 8008d38:	2000a4b4 	.word	0x2000a4b4
 8008d3c:	2000a4dc 	.word	0x2000a4dc
 8008d40:	08011574 	.word	0x08011574
 8008d44:	0801158c 	.word	0x0801158c
        } else {
          pcb->unacked = rseg->next;
 8008d48:	69fb      	ldr	r3, [r7, #28]
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8008d50:	69f8      	ldr	r0, [r7, #28]
 8008d52:	f7fe fd22 	bl	800779a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d104      	bne.n	8008d68 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d64:	861a      	strh	r2, [r3, #48]	; 0x30
 8008d66:	e006      	b.n	8008d76 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2200      	movs	r2, #0
 8008d72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d00a      	beq.n	8008d96 <tcp_process+0x30a>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d86:	687a      	ldr	r2, [r7, #4]
 8008d88:	6910      	ldr	r0, [r2, #16]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	6879      	ldr	r1, [r7, #4]
 8008d8e:	4798      	blx	r3
 8008d90:	4603      	mov	r3, r0
 8008d92:	76bb      	strb	r3, [r7, #26]
 8008d94:	e001      	b.n	8008d9a <tcp_process+0x30e>
 8008d96:	2300      	movs	r3, #0
 8008d98:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8008d9a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008d9e:	f113 0f0d 	cmn.w	r3, #13
 8008da2:	d102      	bne.n	8008daa <tcp_process+0x31e>
          return ERR_ABRT;
 8008da4:	f06f 030c 	mvn.w	r3, #12
 8008da8:	e250      	b.n	800924c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	8b5b      	ldrh	r3, [r3, #26]
 8008dae:	f043 0302 	orr.w	r3, r3, #2
 8008db2:	b29a      	uxth	r2, r3
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8008db8:	e23a      	b.n	8009230 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8008dba:	4b98      	ldr	r3, [pc, #608]	; (800901c <tcp_process+0x590>)
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	f003 0310 	and.w	r3, r3, #16
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	f000 8234 	beq.w	8009230 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008dc8:	4b95      	ldr	r3, [pc, #596]	; (8009020 <tcp_process+0x594>)
 8008dca:	6819      	ldr	r1, [r3, #0]
 8008dcc:	4b95      	ldr	r3, [pc, #596]	; (8009024 <tcp_process+0x598>)
 8008dce:	881b      	ldrh	r3, [r3, #0]
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	4b95      	ldr	r3, [pc, #596]	; (8009028 <tcp_process+0x59c>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008dd8:	4b94      	ldr	r3, [pc, #592]	; (800902c <tcp_process+0x5a0>)
 8008dda:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008ddc:	885b      	ldrh	r3, [r3, #2]
 8008dde:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008de0:	4a92      	ldr	r2, [pc, #584]	; (800902c <tcp_process+0x5a0>)
 8008de2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008de4:	8812      	ldrh	r2, [r2, #0]
 8008de6:	b292      	uxth	r2, r2
 8008de8:	9202      	str	r2, [sp, #8]
 8008dea:	9301      	str	r3, [sp, #4]
 8008dec:	4b90      	ldr	r3, [pc, #576]	; (8009030 <tcp_process+0x5a4>)
 8008dee:	9300      	str	r3, [sp, #0]
 8008df0:	4b90      	ldr	r3, [pc, #576]	; (8009034 <tcp_process+0x5a8>)
 8008df2:	4602      	mov	r2, r0
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f002 fc85 	bl	800b704 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008e00:	2b05      	cmp	r3, #5
 8008e02:	f200 8215 	bhi.w	8009230 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f002 fa51 	bl	800b2b4 <tcp_rexmit_rto>
      break;
 8008e12:	e20d      	b.n	8009230 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8008e14:	4b81      	ldr	r3, [pc, #516]	; (800901c <tcp_process+0x590>)
 8008e16:	781b      	ldrb	r3, [r3, #0]
 8008e18:	f003 0310 	and.w	r3, r3, #16
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	f000 80a1 	beq.w	8008f64 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008e22:	4b7f      	ldr	r3, [pc, #508]	; (8009020 <tcp_process+0x594>)
 8008e24:	681a      	ldr	r2, [r3, #0]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e2a:	1ad3      	subs	r3, r2, r3
 8008e2c:	3b01      	subs	r3, #1
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	db7e      	blt.n	8008f30 <tcp_process+0x4a4>
 8008e32:	4b7b      	ldr	r3, [pc, #492]	; (8009020 <tcp_process+0x594>)
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e3a:	1ad3      	subs	r3, r2, r3
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	dc77      	bgt.n	8008f30 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2204      	movs	r2, #4
 8008e44:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d102      	bne.n	8008e54 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8008e4e:	23fa      	movs	r3, #250	; 0xfa
 8008e50:	76bb      	strb	r3, [r7, #26]
 8008e52:	e01d      	b.n	8008e90 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e58:	699b      	ldr	r3, [r3, #24]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d106      	bne.n	8008e6c <tcp_process+0x3e0>
 8008e5e:	4b76      	ldr	r3, [pc, #472]	; (8009038 <tcp_process+0x5ac>)
 8008e60:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8008e64:	4975      	ldr	r1, [pc, #468]	; (800903c <tcp_process+0x5b0>)
 8008e66:	4876      	ldr	r0, [pc, #472]	; (8009040 <tcp_process+0x5b4>)
 8008e68:	f006 f828 	bl	800eebc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e70:	699b      	ldr	r3, [r3, #24]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d00a      	beq.n	8008e8c <tcp_process+0x400>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e7a:	699b      	ldr	r3, [r3, #24]
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	6910      	ldr	r0, [r2, #16]
 8008e80:	2200      	movs	r2, #0
 8008e82:	6879      	ldr	r1, [r7, #4]
 8008e84:	4798      	blx	r3
 8008e86:	4603      	mov	r3, r0
 8008e88:	76bb      	strb	r3, [r7, #26]
 8008e8a:	e001      	b.n	8008e90 <tcp_process+0x404>
 8008e8c:	23f0      	movs	r3, #240	; 0xf0
 8008e8e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8008e90:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d00a      	beq.n	8008eae <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8008e98:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008e9c:	f113 0f0d 	cmn.w	r3, #13
 8008ea0:	d002      	beq.n	8008ea8 <tcp_process+0x41c>
              tcp_abort(pcb);
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f7fd ff8e 	bl	8006dc4 <tcp_abort>
            }
            return ERR_ABRT;
 8008ea8:	f06f 030c 	mvn.w	r3, #12
 8008eac:	e1ce      	b.n	800924c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 fae0 	bl	8009474 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8008eb4:	4b63      	ldr	r3, [pc, #396]	; (8009044 <tcp_process+0x5b8>)
 8008eb6:	881b      	ldrh	r3, [r3, #0]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d005      	beq.n	8008ec8 <tcp_process+0x43c>
            recv_acked--;
 8008ebc:	4b61      	ldr	r3, [pc, #388]	; (8009044 <tcp_process+0x5b8>)
 8008ebe:	881b      	ldrh	r3, [r3, #0]
 8008ec0:	3b01      	subs	r3, #1
 8008ec2:	b29a      	uxth	r2, r3
 8008ec4:	4b5f      	ldr	r3, [pc, #380]	; (8009044 <tcp_process+0x5b8>)
 8008ec6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008ecc:	009a      	lsls	r2, r3, #2
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008ed2:	005b      	lsls	r3, r3, #1
 8008ed4:	f241 111c 	movw	r1, #4380	; 0x111c
 8008ed8:	428b      	cmp	r3, r1
 8008eda:	bf38      	it	cc
 8008edc:	460b      	movcc	r3, r1
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d204      	bcs.n	8008eec <tcp_process+0x460>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	e00d      	b.n	8008f08 <tcp_process+0x47c>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008ef0:	005b      	lsls	r3, r3, #1
 8008ef2:	f241 121c 	movw	r2, #4380	; 0x111c
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d904      	bls.n	8008f04 <tcp_process+0x478>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008efe:	005b      	lsls	r3, r3, #1
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	e001      	b.n	8008f08 <tcp_process+0x47c>
 8008f04:	f241 131c 	movw	r3, #4380	; 0x111c
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8008f0e:	4b4e      	ldr	r3, [pc, #312]	; (8009048 <tcp_process+0x5bc>)
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	f003 0320 	and.w	r3, r3, #32
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d037      	beq.n	8008f8a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	8b5b      	ldrh	r3, [r3, #26]
 8008f1e:	f043 0302 	orr.w	r3, r3, #2
 8008f22:	b29a      	uxth	r2, r3
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2207      	movs	r2, #7
 8008f2c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8008f2e:	e02c      	b.n	8008f8a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008f30:	4b3b      	ldr	r3, [pc, #236]	; (8009020 <tcp_process+0x594>)
 8008f32:	6819      	ldr	r1, [r3, #0]
 8008f34:	4b3b      	ldr	r3, [pc, #236]	; (8009024 <tcp_process+0x598>)
 8008f36:	881b      	ldrh	r3, [r3, #0]
 8008f38:	461a      	mov	r2, r3
 8008f3a:	4b3b      	ldr	r3, [pc, #236]	; (8009028 <tcp_process+0x59c>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008f40:	4b3a      	ldr	r3, [pc, #232]	; (800902c <tcp_process+0x5a0>)
 8008f42:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008f44:	885b      	ldrh	r3, [r3, #2]
 8008f46:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008f48:	4a38      	ldr	r2, [pc, #224]	; (800902c <tcp_process+0x5a0>)
 8008f4a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008f4c:	8812      	ldrh	r2, [r2, #0]
 8008f4e:	b292      	uxth	r2, r2
 8008f50:	9202      	str	r2, [sp, #8]
 8008f52:	9301      	str	r3, [sp, #4]
 8008f54:	4b36      	ldr	r3, [pc, #216]	; (8009030 <tcp_process+0x5a4>)
 8008f56:	9300      	str	r3, [sp, #0]
 8008f58:	4b36      	ldr	r3, [pc, #216]	; (8009034 <tcp_process+0x5a8>)
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f002 fbd1 	bl	800b704 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8008f62:	e167      	b.n	8009234 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8008f64:	4b2d      	ldr	r3, [pc, #180]	; (800901c <tcp_process+0x590>)
 8008f66:	781b      	ldrb	r3, [r3, #0]
 8008f68:	f003 0302 	and.w	r3, r3, #2
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	f000 8161 	beq.w	8009234 <tcp_process+0x7a8>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f76:	1e5a      	subs	r2, r3, #1
 8008f78:	4b2b      	ldr	r3, [pc, #172]	; (8009028 <tcp_process+0x59c>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	f040 8159 	bne.w	8009234 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f002 f9b8 	bl	800b2f8 <tcp_rexmit>
      break;
 8008f88:	e154      	b.n	8009234 <tcp_process+0x7a8>
 8008f8a:	e153      	b.n	8009234 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f000 fa71 	bl	8009474 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8008f92:	4b2d      	ldr	r3, [pc, #180]	; (8009048 <tcp_process+0x5bc>)
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	f003 0320 	and.w	r3, r3, #32
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	f000 814c 	beq.w	8009238 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	8b5b      	ldrh	r3, [r3, #26]
 8008fa4:	f043 0302 	orr.w	r3, r3, #2
 8008fa8:	b29a      	uxth	r2, r3
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2207      	movs	r2, #7
 8008fb2:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008fb4:	e140      	b.n	8009238 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 fa5c 	bl	8009474 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008fbc:	4b22      	ldr	r3, [pc, #136]	; (8009048 <tcp_process+0x5bc>)
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	f003 0320 	and.w	r3, r3, #32
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d071      	beq.n	80090ac <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008fc8:	4b14      	ldr	r3, [pc, #80]	; (800901c <tcp_process+0x590>)
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	f003 0310 	and.w	r3, r3, #16
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d060      	beq.n	8009096 <tcp_process+0x60a>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008fd8:	4b11      	ldr	r3, [pc, #68]	; (8009020 <tcp_process+0x594>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d15a      	bne.n	8009096 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d156      	bne.n	8009096 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	8b5b      	ldrh	r3, [r3, #26]
 8008fec:	f043 0302 	orr.w	r3, r3, #2
 8008ff0:	b29a      	uxth	r2, r3
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f7fe fdbc 	bl	8007b74 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8008ffc:	4b13      	ldr	r3, [pc, #76]	; (800904c <tcp_process+0x5c0>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	687a      	ldr	r2, [r7, #4]
 8009002:	429a      	cmp	r2, r3
 8009004:	d105      	bne.n	8009012 <tcp_process+0x586>
 8009006:	4b11      	ldr	r3, [pc, #68]	; (800904c <tcp_process+0x5c0>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	68db      	ldr	r3, [r3, #12]
 800900c:	4a0f      	ldr	r2, [pc, #60]	; (800904c <tcp_process+0x5c0>)
 800900e:	6013      	str	r3, [r2, #0]
 8009010:	e02e      	b.n	8009070 <tcp_process+0x5e4>
 8009012:	4b0e      	ldr	r3, [pc, #56]	; (800904c <tcp_process+0x5c0>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	617b      	str	r3, [r7, #20]
 8009018:	e027      	b.n	800906a <tcp_process+0x5de>
 800901a:	bf00      	nop
 800901c:	2000a4f8 	.word	0x2000a4f8
 8009020:	2000a4f0 	.word	0x2000a4f0
 8009024:	2000a4f6 	.word	0x2000a4f6
 8009028:	2000a4ec 	.word	0x2000a4ec
 800902c:	2000a4dc 	.word	0x2000a4dc
 8009030:	20004d94 	.word	0x20004d94
 8009034:	20004d98 	.word	0x20004d98
 8009038:	08011300 	.word	0x08011300
 800903c:	080115a0 	.word	0x080115a0
 8009040:	0801134c 	.word	0x0801134c
 8009044:	2000a4f4 	.word	0x2000a4f4
 8009048:	2000a4f9 	.word	0x2000a4f9
 800904c:	2000a4c0 	.word	0x2000a4c0
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	429a      	cmp	r2, r3
 8009058:	d104      	bne.n	8009064 <tcp_process+0x5d8>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	68da      	ldr	r2, [r3, #12]
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	60da      	str	r2, [r3, #12]
 8009062:	e005      	b.n	8009070 <tcp_process+0x5e4>
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	68db      	ldr	r3, [r3, #12]
 8009068:	617b      	str	r3, [r7, #20]
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d1ef      	bne.n	8009050 <tcp_process+0x5c4>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2200      	movs	r2, #0
 8009074:	60da      	str	r2, [r3, #12]
 8009076:	4b77      	ldr	r3, [pc, #476]	; (8009254 <tcp_process+0x7c8>)
 8009078:	2201      	movs	r2, #1
 800907a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	220a      	movs	r2, #10
 8009080:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8009082:	4b75      	ldr	r3, [pc, #468]	; (8009258 <tcp_process+0x7cc>)
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	60da      	str	r2, [r3, #12]
 800908a:	4a73      	ldr	r2, [pc, #460]	; (8009258 <tcp_process+0x7cc>)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6013      	str	r3, [r2, #0]
 8009090:	f002 fcfa 	bl	800ba88 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8009094:	e0d2      	b.n	800923c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	8b5b      	ldrh	r3, [r3, #26]
 800909a:	f043 0302 	orr.w	r3, r3, #2
 800909e:	b29a      	uxth	r2, r3
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2208      	movs	r2, #8
 80090a8:	751a      	strb	r2, [r3, #20]
      break;
 80090aa:	e0c7      	b.n	800923c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80090ac:	4b6b      	ldr	r3, [pc, #428]	; (800925c <tcp_process+0x7d0>)
 80090ae:	781b      	ldrb	r3, [r3, #0]
 80090b0:	f003 0310 	and.w	r3, r3, #16
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	f000 80c1 	beq.w	800923c <tcp_process+0x7b0>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80090be:	4b68      	ldr	r3, [pc, #416]	; (8009260 <tcp_process+0x7d4>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	429a      	cmp	r2, r3
 80090c4:	f040 80ba 	bne.w	800923c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	f040 80b5 	bne.w	800923c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2206      	movs	r2, #6
 80090d6:	751a      	strb	r2, [r3, #20]
      break;
 80090d8:	e0b0      	b.n	800923c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 f9ca 	bl	8009474 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80090e0:	4b60      	ldr	r3, [pc, #384]	; (8009264 <tcp_process+0x7d8>)
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	f003 0320 	and.w	r3, r3, #32
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	f000 80a9 	beq.w	8009240 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	8b5b      	ldrh	r3, [r3, #26]
 80090f2:	f043 0302 	orr.w	r3, r3, #2
 80090f6:	b29a      	uxth	r2, r3
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f7fe fd39 	bl	8007b74 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009102:	4b59      	ldr	r3, [pc, #356]	; (8009268 <tcp_process+0x7dc>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	429a      	cmp	r2, r3
 800910a:	d105      	bne.n	8009118 <tcp_process+0x68c>
 800910c:	4b56      	ldr	r3, [pc, #344]	; (8009268 <tcp_process+0x7dc>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	68db      	ldr	r3, [r3, #12]
 8009112:	4a55      	ldr	r2, [pc, #340]	; (8009268 <tcp_process+0x7dc>)
 8009114:	6013      	str	r3, [r2, #0]
 8009116:	e013      	b.n	8009140 <tcp_process+0x6b4>
 8009118:	4b53      	ldr	r3, [pc, #332]	; (8009268 <tcp_process+0x7dc>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	613b      	str	r3, [r7, #16]
 800911e:	e00c      	b.n	800913a <tcp_process+0x6ae>
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	68db      	ldr	r3, [r3, #12]
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	429a      	cmp	r2, r3
 8009128:	d104      	bne.n	8009134 <tcp_process+0x6a8>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	68da      	ldr	r2, [r3, #12]
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	60da      	str	r2, [r3, #12]
 8009132:	e005      	b.n	8009140 <tcp_process+0x6b4>
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	68db      	ldr	r3, [r3, #12]
 8009138:	613b      	str	r3, [r7, #16]
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d1ef      	bne.n	8009120 <tcp_process+0x694>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	60da      	str	r2, [r3, #12]
 8009146:	4b43      	ldr	r3, [pc, #268]	; (8009254 <tcp_process+0x7c8>)
 8009148:	2201      	movs	r2, #1
 800914a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	220a      	movs	r2, #10
 8009150:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009152:	4b41      	ldr	r3, [pc, #260]	; (8009258 <tcp_process+0x7cc>)
 8009154:	681a      	ldr	r2, [r3, #0]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	60da      	str	r2, [r3, #12]
 800915a:	4a3f      	ldr	r2, [pc, #252]	; (8009258 <tcp_process+0x7cc>)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6013      	str	r3, [r2, #0]
 8009160:	f002 fc92 	bl	800ba88 <tcp_timer_needed>
      }
      break;
 8009164:	e06c      	b.n	8009240 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 f984 	bl	8009474 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800916c:	4b3b      	ldr	r3, [pc, #236]	; (800925c <tcp_process+0x7d0>)
 800916e:	781b      	ldrb	r3, [r3, #0]
 8009170:	f003 0310 	and.w	r3, r3, #16
 8009174:	2b00      	cmp	r3, #0
 8009176:	d065      	beq.n	8009244 <tcp_process+0x7b8>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800917c:	4b38      	ldr	r3, [pc, #224]	; (8009260 <tcp_process+0x7d4>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	429a      	cmp	r2, r3
 8009182:	d15f      	bne.n	8009244 <tcp_process+0x7b8>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009188:	2b00      	cmp	r3, #0
 800918a:	d15b      	bne.n	8009244 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f7fe fcf1 	bl	8007b74 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009192:	4b35      	ldr	r3, [pc, #212]	; (8009268 <tcp_process+0x7dc>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	429a      	cmp	r2, r3
 800919a:	d105      	bne.n	80091a8 <tcp_process+0x71c>
 800919c:	4b32      	ldr	r3, [pc, #200]	; (8009268 <tcp_process+0x7dc>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	68db      	ldr	r3, [r3, #12]
 80091a2:	4a31      	ldr	r2, [pc, #196]	; (8009268 <tcp_process+0x7dc>)
 80091a4:	6013      	str	r3, [r2, #0]
 80091a6:	e013      	b.n	80091d0 <tcp_process+0x744>
 80091a8:	4b2f      	ldr	r3, [pc, #188]	; (8009268 <tcp_process+0x7dc>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	60fb      	str	r3, [r7, #12]
 80091ae:	e00c      	b.n	80091ca <tcp_process+0x73e>
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	68db      	ldr	r3, [r3, #12]
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d104      	bne.n	80091c4 <tcp_process+0x738>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	68da      	ldr	r2, [r3, #12]
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	60da      	str	r2, [r3, #12]
 80091c2:	e005      	b.n	80091d0 <tcp_process+0x744>
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	68db      	ldr	r3, [r3, #12]
 80091c8:	60fb      	str	r3, [r7, #12]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d1ef      	bne.n	80091b0 <tcp_process+0x724>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	60da      	str	r2, [r3, #12]
 80091d6:	4b1f      	ldr	r3, [pc, #124]	; (8009254 <tcp_process+0x7c8>)
 80091d8:	2201      	movs	r2, #1
 80091da:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	220a      	movs	r2, #10
 80091e0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80091e2:	4b1d      	ldr	r3, [pc, #116]	; (8009258 <tcp_process+0x7cc>)
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	60da      	str	r2, [r3, #12]
 80091ea:	4a1b      	ldr	r2, [pc, #108]	; (8009258 <tcp_process+0x7cc>)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6013      	str	r3, [r2, #0]
 80091f0:	f002 fc4a 	bl	800ba88 <tcp_timer_needed>
      }
      break;
 80091f4:	e026      	b.n	8009244 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 f93c 	bl	8009474 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80091fc:	4b17      	ldr	r3, [pc, #92]	; (800925c <tcp_process+0x7d0>)
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	f003 0310 	and.w	r3, r3, #16
 8009204:	2b00      	cmp	r3, #0
 8009206:	d01f      	beq.n	8009248 <tcp_process+0x7bc>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800920c:	4b14      	ldr	r3, [pc, #80]	; (8009260 <tcp_process+0x7d4>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	429a      	cmp	r2, r3
 8009212:	d119      	bne.n	8009248 <tcp_process+0x7bc>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009218:	2b00      	cmp	r3, #0
 800921a:	d115      	bne.n	8009248 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800921c:	4b11      	ldr	r3, [pc, #68]	; (8009264 <tcp_process+0x7d8>)
 800921e:	781b      	ldrb	r3, [r3, #0]
 8009220:	f043 0310 	orr.w	r3, r3, #16
 8009224:	b2da      	uxtb	r2, r3
 8009226:	4b0f      	ldr	r3, [pc, #60]	; (8009264 <tcp_process+0x7d8>)
 8009228:	701a      	strb	r2, [r3, #0]
      }
      break;
 800922a:	e00d      	b.n	8009248 <tcp_process+0x7bc>
    default:
      break;
 800922c:	bf00      	nop
 800922e:	e00c      	b.n	800924a <tcp_process+0x7be>
      break;
 8009230:	bf00      	nop
 8009232:	e00a      	b.n	800924a <tcp_process+0x7be>
      break;
 8009234:	bf00      	nop
 8009236:	e008      	b.n	800924a <tcp_process+0x7be>
      break;
 8009238:	bf00      	nop
 800923a:	e006      	b.n	800924a <tcp_process+0x7be>
      break;
 800923c:	bf00      	nop
 800923e:	e004      	b.n	800924a <tcp_process+0x7be>
      break;
 8009240:	bf00      	nop
 8009242:	e002      	b.n	800924a <tcp_process+0x7be>
      break;
 8009244:	bf00      	nop
 8009246:	e000      	b.n	800924a <tcp_process+0x7be>
      break;
 8009248:	bf00      	nop
  }
  return ERR_OK;
 800924a:	2300      	movs	r3, #0
}
 800924c:	4618      	mov	r0, r3
 800924e:	3724      	adds	r7, #36	; 0x24
 8009250:	46bd      	mov	sp, r7
 8009252:	bd90      	pop	{r4, r7, pc}
 8009254:	2000a4c8 	.word	0x2000a4c8
 8009258:	2000a4c4 	.word	0x2000a4c4
 800925c:	2000a4f8 	.word	0x2000a4f8
 8009260:	2000a4f0 	.word	0x2000a4f0
 8009264:	2000a4f9 	.word	0x2000a4f9
 8009268:	2000a4c0 	.word	0x2000a4c0

0800926c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800926c:	b590      	push	{r4, r7, lr}
 800926e:	b085      	sub	sp, #20
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d106      	bne.n	800928a <tcp_oos_insert_segment+0x1e>
 800927c:	4b3b      	ldr	r3, [pc, #236]	; (800936c <tcp_oos_insert_segment+0x100>)
 800927e:	f240 421f 	movw	r2, #1055	; 0x41f
 8009282:	493b      	ldr	r1, [pc, #236]	; (8009370 <tcp_oos_insert_segment+0x104>)
 8009284:	483b      	ldr	r0, [pc, #236]	; (8009374 <tcp_oos_insert_segment+0x108>)
 8009286:	f005 fe19 	bl	800eebc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	68db      	ldr	r3, [r3, #12]
 800928e:	899b      	ldrh	r3, [r3, #12]
 8009290:	b29b      	uxth	r3, r3
 8009292:	4618      	mov	r0, r3
 8009294:	f7fb fc0e 	bl	8004ab4 <lwip_htons>
 8009298:	4603      	mov	r3, r0
 800929a:	b2db      	uxtb	r3, r3
 800929c:	f003 0301 	and.w	r3, r3, #1
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d028      	beq.n	80092f6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80092a4:	6838      	ldr	r0, [r7, #0]
 80092a6:	f7fe fa63 	bl	8007770 <tcp_segs_free>
    next = NULL;
 80092aa:	2300      	movs	r3, #0
 80092ac:	603b      	str	r3, [r7, #0]
 80092ae:	e056      	b.n	800935e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	68db      	ldr	r3, [r3, #12]
 80092b4:	899b      	ldrh	r3, [r3, #12]
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	4618      	mov	r0, r3
 80092ba:	f7fb fbfb 	bl	8004ab4 <lwip_htons>
 80092be:	4603      	mov	r3, r0
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	f003 0301 	and.w	r3, r3, #1
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d00d      	beq.n	80092e6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	68db      	ldr	r3, [r3, #12]
 80092ce:	899b      	ldrh	r3, [r3, #12]
 80092d0:	b29c      	uxth	r4, r3
 80092d2:	2001      	movs	r0, #1
 80092d4:	f7fb fbee 	bl	8004ab4 <lwip_htons>
 80092d8:	4603      	mov	r3, r0
 80092da:	461a      	mov	r2, r3
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	4322      	orrs	r2, r4
 80092e2:	b292      	uxth	r2, r2
 80092e4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80092f0:	68f8      	ldr	r0, [r7, #12]
 80092f2:	f7fe fa52 	bl	800779a <tcp_seg_free>
    while (next &&
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d00e      	beq.n	800931a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	891b      	ldrh	r3, [r3, #8]
 8009300:	461a      	mov	r2, r3
 8009302:	4b1d      	ldr	r3, [pc, #116]	; (8009378 <tcp_oos_insert_segment+0x10c>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	441a      	add	r2, r3
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	68db      	ldr	r3, [r3, #12]
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	6839      	ldr	r1, [r7, #0]
 8009310:	8909      	ldrh	r1, [r1, #8]
 8009312:	440b      	add	r3, r1
 8009314:	1ad3      	subs	r3, r2, r3
    while (next &&
 8009316:	2b00      	cmp	r3, #0
 8009318:	daca      	bge.n	80092b0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d01e      	beq.n	800935e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	891b      	ldrh	r3, [r3, #8]
 8009324:	461a      	mov	r2, r3
 8009326:	4b14      	ldr	r3, [pc, #80]	; (8009378 <tcp_oos_insert_segment+0x10c>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	441a      	add	r2, r3
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	68db      	ldr	r3, [r3, #12]
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	1ad3      	subs	r3, r2, r3
    if (next &&
 8009334:	2b00      	cmp	r3, #0
 8009336:	dd12      	ble.n	800935e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	68db      	ldr	r3, [r3, #12]
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	b29a      	uxth	r2, r3
 8009340:	4b0d      	ldr	r3, [pc, #52]	; (8009378 <tcp_oos_insert_segment+0x10c>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	b29b      	uxth	r3, r3
 8009346:	1ad3      	subs	r3, r2, r3
 8009348:	b29a      	uxth	r2, r3
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	685a      	ldr	r2, [r3, #4]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	891b      	ldrh	r3, [r3, #8]
 8009356:	4619      	mov	r1, r3
 8009358:	4610      	mov	r0, r2
 800935a:	f7fc fd83 	bl	8005e64 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	683a      	ldr	r2, [r7, #0]
 8009362:	601a      	str	r2, [r3, #0]
}
 8009364:	bf00      	nop
 8009366:	3714      	adds	r7, #20
 8009368:	46bd      	mov	sp, r7
 800936a:	bd90      	pop	{r4, r7, pc}
 800936c:	08011300 	.word	0x08011300
 8009370:	080115c0 	.word	0x080115c0
 8009374:	0801134c 	.word	0x0801134c
 8009378:	2000a4ec 	.word	0x2000a4ec

0800937c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800937c:	b5b0      	push	{r4, r5, r7, lr}
 800937e:	b086      	sub	sp, #24
 8009380:	af00      	add	r7, sp, #0
 8009382:	60f8      	str	r0, [r7, #12]
 8009384:	60b9      	str	r1, [r7, #8]
 8009386:	607a      	str	r2, [r7, #4]
 8009388:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800938a:	e03e      	b.n	800940a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	4618      	mov	r0, r3
 800939c:	f7fc ff70 	bl	8006280 <pbuf_clen>
 80093a0:	4603      	mov	r3, r0
 80093a2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80093aa:	8a7a      	ldrh	r2, [r7, #18]
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d906      	bls.n	80093be <tcp_free_acked_segments+0x42>
 80093b0:	4b2a      	ldr	r3, [pc, #168]	; (800945c <tcp_free_acked_segments+0xe0>)
 80093b2:	f240 4257 	movw	r2, #1111	; 0x457
 80093b6:	492a      	ldr	r1, [pc, #168]	; (8009460 <tcp_free_acked_segments+0xe4>)
 80093b8:	482a      	ldr	r0, [pc, #168]	; (8009464 <tcp_free_acked_segments+0xe8>)
 80093ba:	f005 fd7f 	bl	800eebc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80093c4:	8a7b      	ldrh	r3, [r7, #18]
 80093c6:	1ad3      	subs	r3, r2, r3
 80093c8:	b29a      	uxth	r2, r3
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	891a      	ldrh	r2, [r3, #8]
 80093d4:	4b24      	ldr	r3, [pc, #144]	; (8009468 <tcp_free_acked_segments+0xec>)
 80093d6:	881b      	ldrh	r3, [r3, #0]
 80093d8:	4413      	add	r3, r2
 80093da:	b29a      	uxth	r2, r3
 80093dc:	4b22      	ldr	r3, [pc, #136]	; (8009468 <tcp_free_acked_segments+0xec>)
 80093de:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80093e0:	6978      	ldr	r0, [r7, #20]
 80093e2:	f7fe f9da 	bl	800779a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d00c      	beq.n	800940a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d109      	bne.n	800940a <tcp_free_acked_segments+0x8e>
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d106      	bne.n	800940a <tcp_free_acked_segments+0x8e>
 80093fc:	4b17      	ldr	r3, [pc, #92]	; (800945c <tcp_free_acked_segments+0xe0>)
 80093fe:	f240 4261 	movw	r2, #1121	; 0x461
 8009402:	491a      	ldr	r1, [pc, #104]	; (800946c <tcp_free_acked_segments+0xf0>)
 8009404:	4817      	ldr	r0, [pc, #92]	; (8009464 <tcp_free_acked_segments+0xe8>)
 8009406:	f005 fd59 	bl	800eebc <iprintf>
  while (seg_list != NULL &&
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d020      	beq.n	8009452 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	68db      	ldr	r3, [r3, #12]
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	4618      	mov	r0, r3
 8009418:	f7fb fb61 	bl	8004ade <lwip_htonl>
 800941c:	4604      	mov	r4, r0
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	891b      	ldrh	r3, [r3, #8]
 8009422:	461d      	mov	r5, r3
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	68db      	ldr	r3, [r3, #12]
 8009428:	899b      	ldrh	r3, [r3, #12]
 800942a:	b29b      	uxth	r3, r3
 800942c:	4618      	mov	r0, r3
 800942e:	f7fb fb41 	bl	8004ab4 <lwip_htons>
 8009432:	4603      	mov	r3, r0
 8009434:	b2db      	uxtb	r3, r3
 8009436:	f003 0303 	and.w	r3, r3, #3
 800943a:	2b00      	cmp	r3, #0
 800943c:	d001      	beq.n	8009442 <tcp_free_acked_segments+0xc6>
 800943e:	2301      	movs	r3, #1
 8009440:	e000      	b.n	8009444 <tcp_free_acked_segments+0xc8>
 8009442:	2300      	movs	r3, #0
 8009444:	442b      	add	r3, r5
 8009446:	18e2      	adds	r2, r4, r3
 8009448:	4b09      	ldr	r3, [pc, #36]	; (8009470 <tcp_free_acked_segments+0xf4>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800944e:	2b00      	cmp	r3, #0
 8009450:	dd9c      	ble.n	800938c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8009452:	68bb      	ldr	r3, [r7, #8]
}
 8009454:	4618      	mov	r0, r3
 8009456:	3718      	adds	r7, #24
 8009458:	46bd      	mov	sp, r7
 800945a:	bdb0      	pop	{r4, r5, r7, pc}
 800945c:	08011300 	.word	0x08011300
 8009460:	080115e8 	.word	0x080115e8
 8009464:	0801134c 	.word	0x0801134c
 8009468:	2000a4f4 	.word	0x2000a4f4
 800946c:	08011610 	.word	0x08011610
 8009470:	2000a4f0 	.word	0x2000a4f0

08009474 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8009474:	b5b0      	push	{r4, r5, r7, lr}
 8009476:	b094      	sub	sp, #80	; 0x50
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800947c:	2300      	movs	r3, #0
 800947e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d106      	bne.n	8009494 <tcp_receive+0x20>
 8009486:	4b91      	ldr	r3, [pc, #580]	; (80096cc <tcp_receive+0x258>)
 8009488:	f240 427b 	movw	r2, #1147	; 0x47b
 800948c:	4990      	ldr	r1, [pc, #576]	; (80096d0 <tcp_receive+0x25c>)
 800948e:	4891      	ldr	r0, [pc, #580]	; (80096d4 <tcp_receive+0x260>)
 8009490:	f005 fd14 	bl	800eebc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	7d1b      	ldrb	r3, [r3, #20]
 8009498:	2b03      	cmp	r3, #3
 800949a:	d806      	bhi.n	80094aa <tcp_receive+0x36>
 800949c:	4b8b      	ldr	r3, [pc, #556]	; (80096cc <tcp_receive+0x258>)
 800949e:	f240 427c 	movw	r2, #1148	; 0x47c
 80094a2:	498d      	ldr	r1, [pc, #564]	; (80096d8 <tcp_receive+0x264>)
 80094a4:	488b      	ldr	r0, [pc, #556]	; (80096d4 <tcp_receive+0x260>)
 80094a6:	f005 fd09 	bl	800eebc <iprintf>

  if (flags & TCP_ACK) {
 80094aa:	4b8c      	ldr	r3, [pc, #560]	; (80096dc <tcp_receive+0x268>)
 80094ac:	781b      	ldrb	r3, [r3, #0]
 80094ae:	f003 0310 	and.w	r3, r3, #16
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	f000 8264 	beq.w	8009980 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80094be:	461a      	mov	r2, r3
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094c4:	4413      	add	r3, r2
 80094c6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094cc:	4b84      	ldr	r3, [pc, #528]	; (80096e0 <tcp_receive+0x26c>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	1ad3      	subs	r3, r2, r3
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	db1b      	blt.n	800950e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094da:	4b81      	ldr	r3, [pc, #516]	; (80096e0 <tcp_receive+0x26c>)
 80094dc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80094de:	429a      	cmp	r2, r3
 80094e0:	d106      	bne.n	80094f0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80094e6:	4b7f      	ldr	r3, [pc, #508]	; (80096e4 <tcp_receive+0x270>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	1ad3      	subs	r3, r2, r3
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	db0e      	blt.n	800950e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80094f4:	4b7b      	ldr	r3, [pc, #492]	; (80096e4 <tcp_receive+0x270>)
 80094f6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d125      	bne.n	8009548 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80094fc:	4b7a      	ldr	r3, [pc, #488]	; (80096e8 <tcp_receive+0x274>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	89db      	ldrh	r3, [r3, #14]
 8009502:	b29a      	uxth	r2, r3
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800950a:	429a      	cmp	r2, r3
 800950c:	d91c      	bls.n	8009548 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800950e:	4b76      	ldr	r3, [pc, #472]	; (80096e8 <tcp_receive+0x274>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	89db      	ldrh	r3, [r3, #14]
 8009514:	b29a      	uxth	r2, r3
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009528:	429a      	cmp	r2, r3
 800952a:	d205      	bcs.n	8009538 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8009538:	4b69      	ldr	r3, [pc, #420]	; (80096e0 <tcp_receive+0x26c>)
 800953a:	681a      	ldr	r2, [r3, #0]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8009540:	4b68      	ldr	r3, [pc, #416]	; (80096e4 <tcp_receive+0x270>)
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009548:	4b66      	ldr	r3, [pc, #408]	; (80096e4 <tcp_receive+0x270>)
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009550:	1ad3      	subs	r3, r2, r3
 8009552:	2b00      	cmp	r3, #0
 8009554:	dc58      	bgt.n	8009608 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8009556:	4b65      	ldr	r3, [pc, #404]	; (80096ec <tcp_receive+0x278>)
 8009558:	881b      	ldrh	r3, [r3, #0]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d14b      	bne.n	80095f6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8009568:	4413      	add	r3, r2
 800956a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800956c:	429a      	cmp	r2, r3
 800956e:	d142      	bne.n	80095f6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009576:	2b00      	cmp	r3, #0
 8009578:	db3d      	blt.n	80095f6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800957e:	4b59      	ldr	r3, [pc, #356]	; (80096e4 <tcp_receive+0x270>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	429a      	cmp	r2, r3
 8009584:	d137      	bne.n	80095f6 <tcp_receive+0x182>
              found_dupack = 1;
 8009586:	2301      	movs	r3, #1
 8009588:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009590:	2bff      	cmp	r3, #255	; 0xff
 8009592:	d007      	beq.n	80095a4 <tcp_receive+0x130>
                ++pcb->dupacks;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800959a:	3301      	adds	r3, #1
 800959c:	b2da      	uxtb	r2, r3
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80095aa:	2b03      	cmp	r3, #3
 80095ac:	d91b      	bls.n	80095e6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80095b8:	4413      	add	r3, r2
 80095ba:	b29a      	uxth	r2, r3
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d30a      	bcc.n	80095dc <tcp_receive+0x168>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80095d0:	4413      	add	r3, r2
 80095d2:	b29a      	uxth	r2, r3
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80095da:	e004      	b.n	80095e6 <tcp_receive+0x172>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80095e2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80095ec:	2b02      	cmp	r3, #2
 80095ee:	d902      	bls.n	80095f6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f001 feed 	bl	800b3d0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80095f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	f040 8161 	bne.w	80098c0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2200      	movs	r2, #0
 8009602:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009606:	e15b      	b.n	80098c0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009608:	4b36      	ldr	r3, [pc, #216]	; (80096e4 <tcp_receive+0x270>)
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009610:	1ad3      	subs	r3, r2, r3
 8009612:	3b01      	subs	r3, #1
 8009614:	2b00      	cmp	r3, #0
 8009616:	f2c0 814e 	blt.w	80098b6 <tcp_receive+0x442>
 800961a:	4b32      	ldr	r3, [pc, #200]	; (80096e4 <tcp_receive+0x270>)
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009622:	1ad3      	subs	r3, r2, r3
 8009624:	2b00      	cmp	r3, #0
 8009626:	f300 8146 	bgt.w	80098b6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	8b5b      	ldrh	r3, [r3, #26]
 800962e:	f003 0304 	and.w	r3, r3, #4
 8009632:	2b00      	cmp	r3, #0
 8009634:	d010      	beq.n	8009658 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	8b5b      	ldrh	r3, [r3, #26]
 800963a:	f023 0304 	bic.w	r3, r3, #4
 800963e:	b29a      	uxth	r2, r3
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009666:	10db      	asrs	r3, r3, #3
 8009668:	b21b      	sxth	r3, r3
 800966a:	b29a      	uxth	r2, r3
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009672:	b29b      	uxth	r3, r3
 8009674:	4413      	add	r3, r2
 8009676:	b29b      	uxth	r3, r3
 8009678:	b21a      	sxth	r2, r3
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8009680:	4b18      	ldr	r3, [pc, #96]	; (80096e4 <tcp_receive+0x270>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	b29a      	uxth	r2, r3
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800968a:	b29b      	uxth	r3, r3
 800968c:	1ad3      	subs	r3, r2, r3
 800968e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8009698:	4b12      	ldr	r3, [pc, #72]	; (80096e4 <tcp_receive+0x270>)
 800969a:	681a      	ldr	r2, [r3, #0]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	7d1b      	ldrb	r3, [r3, #20]
 80096a4:	2b03      	cmp	r3, #3
 80096a6:	f240 8097 	bls.w	80097d8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d245      	bcs.n	8009746 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	8b5b      	ldrh	r3, [r3, #26]
 80096be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d014      	beq.n	80096f0 <tcp_receive+0x27c>
 80096c6:	2301      	movs	r3, #1
 80096c8:	e013      	b.n	80096f2 <tcp_receive+0x27e>
 80096ca:	bf00      	nop
 80096cc:	08011300 	.word	0x08011300
 80096d0:	08011630 	.word	0x08011630
 80096d4:	0801134c 	.word	0x0801134c
 80096d8:	0801164c 	.word	0x0801164c
 80096dc:	2000a4f8 	.word	0x2000a4f8
 80096e0:	2000a4ec 	.word	0x2000a4ec
 80096e4:	2000a4f0 	.word	0x2000a4f0
 80096e8:	2000a4dc 	.word	0x2000a4dc
 80096ec:	2000a4f6 	.word	0x2000a4f6
 80096f0:	2302      	movs	r3, #2
 80096f2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80096f6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80096fa:	b29a      	uxth	r2, r3
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009700:	fb12 f303 	smulbb	r3, r2, r3
 8009704:	b29b      	uxth	r3, r3
 8009706:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009708:	4293      	cmp	r3, r2
 800970a:	bf28      	it	cs
 800970c:	4613      	movcs	r3, r2
 800970e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009716:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009718:	4413      	add	r3, r2
 800971a:	b29a      	uxth	r2, r3
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009722:	429a      	cmp	r2, r3
 8009724:	d309      	bcc.n	800973a <tcp_receive+0x2c6>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800972c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800972e:	4413      	add	r3, r2
 8009730:	b29a      	uxth	r2, r3
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009738:	e04e      	b.n	80097d8 <tcp_receive+0x364>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009740:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009744:	e048      	b.n	80097d8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800974c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800974e:	4413      	add	r3, r2
 8009750:	b29a      	uxth	r2, r3
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009758:	429a      	cmp	r2, r3
 800975a:	d309      	bcc.n	8009770 <tcp_receive+0x2fc>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009762:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009764:	4413      	add	r3, r2
 8009766:	b29a      	uxth	r2, r3
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800976e:	e004      	b.n	800977a <tcp_receive+0x306>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009776:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009786:	429a      	cmp	r2, r3
 8009788:	d326      	bcc.n	80097d8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009796:	1ad3      	subs	r3, r2, r3
 8009798:	b29a      	uxth	r2, r3
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80097aa:	4413      	add	r3, r2
 80097ac:	b29a      	uxth	r2, r3
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d30a      	bcc.n	80097ce <tcp_receive+0x35a>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80097c2:	4413      	add	r3, r2
 80097c4:	b29a      	uxth	r2, r3
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80097cc:	e004      	b.n	80097d8 <tcp_receive+0x364>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80097d4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097e0:	4a98      	ldr	r2, [pc, #608]	; (8009a44 <tcp_receive+0x5d0>)
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f7ff fdca 	bl	800937c <tcp_free_acked_segments>
 80097e8:	4602      	mov	r2, r0
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097f6:	4a94      	ldr	r2, [pc, #592]	; (8009a48 <tcp_receive+0x5d4>)
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f7ff fdbf 	bl	800937c <tcp_free_acked_segments>
 80097fe:	4602      	mov	r2, r0
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009808:	2b00      	cmp	r3, #0
 800980a:	d104      	bne.n	8009816 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009812:	861a      	strh	r2, [r3, #48]	; 0x30
 8009814:	e002      	b.n	800981c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2200      	movs	r2, #0
 800981a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2200      	movs	r2, #0
 8009820:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009826:	2b00      	cmp	r3, #0
 8009828:	d103      	bne.n	8009832 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2200      	movs	r2, #0
 800982e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8009838:	4b84      	ldr	r3, [pc, #528]	; (8009a4c <tcp_receive+0x5d8>)
 800983a:	881b      	ldrh	r3, [r3, #0]
 800983c:	4413      	add	r3, r2
 800983e:	b29a      	uxth	r2, r3
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	8b5b      	ldrh	r3, [r3, #26]
 800984a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800984e:	2b00      	cmp	r3, #0
 8009850:	d035      	beq.n	80098be <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009856:	2b00      	cmp	r3, #0
 8009858:	d118      	bne.n	800988c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800985e:	2b00      	cmp	r3, #0
 8009860:	d00c      	beq.n	800987c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	4618      	mov	r0, r3
 8009870:	f7fb f935 	bl	8004ade <lwip_htonl>
 8009874:	4603      	mov	r3, r0
 8009876:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8009878:	2b00      	cmp	r3, #0
 800987a:	dc20      	bgt.n	80098be <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	8b5b      	ldrh	r3, [r3, #26]
 8009880:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009884:	b29a      	uxth	r2, r3
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800988a:	e018      	b.n	80098be <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009894:	68db      	ldr	r3, [r3, #12]
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	4618      	mov	r0, r3
 800989a:	f7fb f920 	bl	8004ade <lwip_htonl>
 800989e:	4603      	mov	r3, r0
 80098a0:	1ae3      	subs	r3, r4, r3
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	dc0b      	bgt.n	80098be <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	8b5b      	ldrh	r3, [r3, #26]
 80098aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80098ae:	b29a      	uxth	r2, r3
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80098b4:	e003      	b.n	80098be <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f001 ff76 	bl	800b7a8 <tcp_send_empty_ack>
 80098bc:	e000      	b.n	80098c0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80098be:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d05b      	beq.n	8009980 <tcp_receive+0x50c>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098cc:	4b60      	ldr	r3, [pc, #384]	; (8009a50 <tcp_receive+0x5dc>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	1ad3      	subs	r3, r2, r3
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	da54      	bge.n	8009980 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80098d6:	4b5f      	ldr	r3, [pc, #380]	; (8009a54 <tcp_receive+0x5e0>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	b29a      	uxth	r2, r3
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	1ad3      	subs	r3, r2, r3
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80098ea:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80098f4:	10db      	asrs	r3, r3, #3
 80098f6:	b21b      	sxth	r3, r3
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	1ad3      	subs	r3, r2, r3
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009908:	b29a      	uxth	r2, r3
 800990a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800990e:	4413      	add	r3, r2
 8009910:	b29b      	uxth	r3, r3
 8009912:	b21a      	sxth	r2, r3
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8009918:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800991c:	2b00      	cmp	r3, #0
 800991e:	da05      	bge.n	800992c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8009920:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009924:	425b      	negs	r3, r3
 8009926:	b29b      	uxth	r3, r3
 8009928:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800992c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009936:	109b      	asrs	r3, r3, #2
 8009938:	b21b      	sxth	r3, r3
 800993a:	b29b      	uxth	r3, r3
 800993c:	1ad3      	subs	r3, r2, r3
 800993e:	b29b      	uxth	r3, r3
 8009940:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800994a:	b29a      	uxth	r2, r3
 800994c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009950:	4413      	add	r3, r2
 8009952:	b29b      	uxth	r3, r3
 8009954:	b21a      	sxth	r2, r3
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009960:	10db      	asrs	r3, r3, #3
 8009962:	b21b      	sxth	r3, r3
 8009964:	b29a      	uxth	r2, r3
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800996c:	b29b      	uxth	r3, r3
 800996e:	4413      	add	r3, r2
 8009970:	b29b      	uxth	r3, r3
 8009972:	b21a      	sxth	r2, r3
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2200      	movs	r2, #0
 800997e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009980:	4b35      	ldr	r3, [pc, #212]	; (8009a58 <tcp_receive+0x5e4>)
 8009982:	881b      	ldrh	r3, [r3, #0]
 8009984:	2b00      	cmp	r3, #0
 8009986:	f000 84e2 	beq.w	800a34e <tcp_receive+0xeda>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	7d1b      	ldrb	r3, [r3, #20]
 800998e:	2b06      	cmp	r3, #6
 8009990:	f200 84dd 	bhi.w	800a34e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009998:	4b30      	ldr	r3, [pc, #192]	; (8009a5c <tcp_receive+0x5e8>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	1ad3      	subs	r3, r2, r3
 800999e:	3b01      	subs	r3, #1
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	f2c0 808f 	blt.w	8009ac4 <tcp_receive+0x650>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80099aa:	4b2b      	ldr	r3, [pc, #172]	; (8009a58 <tcp_receive+0x5e4>)
 80099ac:	881b      	ldrh	r3, [r3, #0]
 80099ae:	4619      	mov	r1, r3
 80099b0:	4b2a      	ldr	r3, [pc, #168]	; (8009a5c <tcp_receive+0x5e8>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	440b      	add	r3, r1
 80099b6:	1ad3      	subs	r3, r2, r3
 80099b8:	3301      	adds	r3, #1
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	f300 8082 	bgt.w	8009ac4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80099c0:	4b27      	ldr	r3, [pc, #156]	; (8009a60 <tcp_receive+0x5ec>)
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80099ca:	4b24      	ldr	r3, [pc, #144]	; (8009a5c <tcp_receive+0x5e8>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	1ad3      	subs	r3, r2, r3
 80099d0:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80099d2:	4b23      	ldr	r3, [pc, #140]	; (8009a60 <tcp_receive+0x5ec>)
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d106      	bne.n	80099e8 <tcp_receive+0x574>
 80099da:	4b22      	ldr	r3, [pc, #136]	; (8009a64 <tcp_receive+0x5f0>)
 80099dc:	f240 5294 	movw	r2, #1428	; 0x594
 80099e0:	4921      	ldr	r1, [pc, #132]	; (8009a68 <tcp_receive+0x5f4>)
 80099e2:	4822      	ldr	r0, [pc, #136]	; (8009a6c <tcp_receive+0x5f8>)
 80099e4:	f005 fa6a 	bl	800eebc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80099e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d906      	bls.n	8009a00 <tcp_receive+0x58c>
 80099f2:	4b1c      	ldr	r3, [pc, #112]	; (8009a64 <tcp_receive+0x5f0>)
 80099f4:	f240 5295 	movw	r2, #1429	; 0x595
 80099f8:	491d      	ldr	r1, [pc, #116]	; (8009a70 <tcp_receive+0x5fc>)
 80099fa:	481c      	ldr	r0, [pc, #112]	; (8009a6c <tcp_receive+0x5f8>)
 80099fc:	f005 fa5e 	bl	800eebc <iprintf>
      off = (u16_t)off32;
 8009a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a02:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009a06:	4b16      	ldr	r3, [pc, #88]	; (8009a60 <tcp_receive+0x5ec>)
 8009a08:	685b      	ldr	r3, [r3, #4]
 8009a0a:	891b      	ldrh	r3, [r3, #8]
 8009a0c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d906      	bls.n	8009a22 <tcp_receive+0x5ae>
 8009a14:	4b13      	ldr	r3, [pc, #76]	; (8009a64 <tcp_receive+0x5f0>)
 8009a16:	f240 5297 	movw	r2, #1431	; 0x597
 8009a1a:	4916      	ldr	r1, [pc, #88]	; (8009a74 <tcp_receive+0x600>)
 8009a1c:	4813      	ldr	r0, [pc, #76]	; (8009a6c <tcp_receive+0x5f8>)
 8009a1e:	f005 fa4d 	bl	800eebc <iprintf>
      inseg.len -= off;
 8009a22:	4b0f      	ldr	r3, [pc, #60]	; (8009a60 <tcp_receive+0x5ec>)
 8009a24:	891a      	ldrh	r2, [r3, #8]
 8009a26:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009a2a:	1ad3      	subs	r3, r2, r3
 8009a2c:	b29a      	uxth	r2, r3
 8009a2e:	4b0c      	ldr	r3, [pc, #48]	; (8009a60 <tcp_receive+0x5ec>)
 8009a30:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009a32:	4b0b      	ldr	r3, [pc, #44]	; (8009a60 <tcp_receive+0x5ec>)
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	891a      	ldrh	r2, [r3, #8]
 8009a38:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009a3c:	1ad3      	subs	r3, r2, r3
 8009a3e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8009a40:	e02a      	b.n	8009a98 <tcp_receive+0x624>
 8009a42:	bf00      	nop
 8009a44:	08011668 	.word	0x08011668
 8009a48:	08011670 	.word	0x08011670
 8009a4c:	2000a4f4 	.word	0x2000a4f4
 8009a50:	2000a4f0 	.word	0x2000a4f0
 8009a54:	2000a4b4 	.word	0x2000a4b4
 8009a58:	2000a4f6 	.word	0x2000a4f6
 8009a5c:	2000a4ec 	.word	0x2000a4ec
 8009a60:	2000a4cc 	.word	0x2000a4cc
 8009a64:	08011300 	.word	0x08011300
 8009a68:	08011678 	.word	0x08011678
 8009a6c:	0801134c 	.word	0x0801134c
 8009a70:	08011688 	.word	0x08011688
 8009a74:	08011698 	.word	0x08011698
        off -= p->len;
 8009a78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a7a:	895b      	ldrh	r3, [r3, #10]
 8009a7c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009a80:	1ad3      	subs	r3, r2, r3
 8009a82:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8009a86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a88:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009a8a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8009a8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a8e:	2200      	movs	r2, #0
 8009a90:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8009a92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8009a98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a9a:	895b      	ldrh	r3, [r3, #10]
 8009a9c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	d8e9      	bhi.n	8009a78 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8009aa4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009aac:	f7fc fada 	bl	8006064 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab4:	4a91      	ldr	r2, [pc, #580]	; (8009cfc <tcp_receive+0x888>)
 8009ab6:	6013      	str	r3, [r2, #0]
 8009ab8:	4b91      	ldr	r3, [pc, #580]	; (8009d00 <tcp_receive+0x88c>)
 8009aba:	68db      	ldr	r3, [r3, #12]
 8009abc:	4a8f      	ldr	r2, [pc, #572]	; (8009cfc <tcp_receive+0x888>)
 8009abe:	6812      	ldr	r2, [r2, #0]
 8009ac0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009ac2:	e00d      	b.n	8009ae0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009ac4:	4b8d      	ldr	r3, [pc, #564]	; (8009cfc <tcp_receive+0x888>)
 8009ac6:	681a      	ldr	r2, [r3, #0]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009acc:	1ad3      	subs	r3, r2, r3
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	da06      	bge.n	8009ae0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	8b5b      	ldrh	r3, [r3, #26]
 8009ad6:	f043 0302 	orr.w	r3, r3, #2
 8009ada:	b29a      	uxth	r2, r3
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009ae0:	4b86      	ldr	r3, [pc, #536]	; (8009cfc <tcp_receive+0x888>)
 8009ae2:	681a      	ldr	r2, [r3, #0]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae8:	1ad3      	subs	r3, r2, r3
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	f2c0 842a 	blt.w	800a344 <tcp_receive+0xed0>
 8009af0:	4b82      	ldr	r3, [pc, #520]	; (8009cfc <tcp_receive+0x888>)
 8009af2:	681a      	ldr	r2, [r3, #0]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af8:	6879      	ldr	r1, [r7, #4]
 8009afa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009afc:	440b      	add	r3, r1
 8009afe:	1ad3      	subs	r3, r2, r3
 8009b00:	3301      	adds	r3, #1
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	f300 841e 	bgt.w	800a344 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b0c:	4b7b      	ldr	r3, [pc, #492]	; (8009cfc <tcp_receive+0x888>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	429a      	cmp	r2, r3
 8009b12:	f040 829a 	bne.w	800a04a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8009b16:	4b7a      	ldr	r3, [pc, #488]	; (8009d00 <tcp_receive+0x88c>)
 8009b18:	891c      	ldrh	r4, [r3, #8]
 8009b1a:	4b79      	ldr	r3, [pc, #484]	; (8009d00 <tcp_receive+0x88c>)
 8009b1c:	68db      	ldr	r3, [r3, #12]
 8009b1e:	899b      	ldrh	r3, [r3, #12]
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	4618      	mov	r0, r3
 8009b24:	f7fa ffc6 	bl	8004ab4 <lwip_htons>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	b2db      	uxtb	r3, r3
 8009b2c:	f003 0303 	and.w	r3, r3, #3
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d001      	beq.n	8009b38 <tcp_receive+0x6c4>
 8009b34:	2301      	movs	r3, #1
 8009b36:	e000      	b.n	8009b3a <tcp_receive+0x6c6>
 8009b38:	2300      	movs	r3, #0
 8009b3a:	4423      	add	r3, r4
 8009b3c:	b29a      	uxth	r2, r3
 8009b3e:	4b71      	ldr	r3, [pc, #452]	; (8009d04 <tcp_receive+0x890>)
 8009b40:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009b46:	4b6f      	ldr	r3, [pc, #444]	; (8009d04 <tcp_receive+0x890>)
 8009b48:	881b      	ldrh	r3, [r3, #0]
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d275      	bcs.n	8009c3a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009b4e:	4b6c      	ldr	r3, [pc, #432]	; (8009d00 <tcp_receive+0x88c>)
 8009b50:	68db      	ldr	r3, [r3, #12]
 8009b52:	899b      	ldrh	r3, [r3, #12]
 8009b54:	b29b      	uxth	r3, r3
 8009b56:	4618      	mov	r0, r3
 8009b58:	f7fa ffac 	bl	8004ab4 <lwip_htons>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	b2db      	uxtb	r3, r3
 8009b60:	f003 0301 	and.w	r3, r3, #1
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d01f      	beq.n	8009ba8 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009b68:	4b65      	ldr	r3, [pc, #404]	; (8009d00 <tcp_receive+0x88c>)
 8009b6a:	68db      	ldr	r3, [r3, #12]
 8009b6c:	899b      	ldrh	r3, [r3, #12]
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	b21b      	sxth	r3, r3
 8009b72:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009b76:	b21c      	sxth	r4, r3
 8009b78:	4b61      	ldr	r3, [pc, #388]	; (8009d00 <tcp_receive+0x88c>)
 8009b7a:	68db      	ldr	r3, [r3, #12]
 8009b7c:	899b      	ldrh	r3, [r3, #12]
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	4618      	mov	r0, r3
 8009b82:	f7fa ff97 	bl	8004ab4 <lwip_htons>
 8009b86:	4603      	mov	r3, r0
 8009b88:	b2db      	uxtb	r3, r3
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009b90:	b29b      	uxth	r3, r3
 8009b92:	4618      	mov	r0, r3
 8009b94:	f7fa ff8e 	bl	8004ab4 <lwip_htons>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	b21b      	sxth	r3, r3
 8009b9c:	4323      	orrs	r3, r4
 8009b9e:	b21a      	sxth	r2, r3
 8009ba0:	4b57      	ldr	r3, [pc, #348]	; (8009d00 <tcp_receive+0x88c>)
 8009ba2:	68db      	ldr	r3, [r3, #12]
 8009ba4:	b292      	uxth	r2, r2
 8009ba6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009bac:	4b54      	ldr	r3, [pc, #336]	; (8009d00 <tcp_receive+0x88c>)
 8009bae:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009bb0:	4b53      	ldr	r3, [pc, #332]	; (8009d00 <tcp_receive+0x88c>)
 8009bb2:	68db      	ldr	r3, [r3, #12]
 8009bb4:	899b      	ldrh	r3, [r3, #12]
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f7fa ff7b 	bl	8004ab4 <lwip_htons>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	f003 0302 	and.w	r3, r3, #2
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d005      	beq.n	8009bd6 <tcp_receive+0x762>
            inseg.len -= 1;
 8009bca:	4b4d      	ldr	r3, [pc, #308]	; (8009d00 <tcp_receive+0x88c>)
 8009bcc:	891b      	ldrh	r3, [r3, #8]
 8009bce:	3b01      	subs	r3, #1
 8009bd0:	b29a      	uxth	r2, r3
 8009bd2:	4b4b      	ldr	r3, [pc, #300]	; (8009d00 <tcp_receive+0x88c>)
 8009bd4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8009bd6:	4b4a      	ldr	r3, [pc, #296]	; (8009d00 <tcp_receive+0x88c>)
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	4a49      	ldr	r2, [pc, #292]	; (8009d00 <tcp_receive+0x88c>)
 8009bdc:	8912      	ldrh	r2, [r2, #8]
 8009bde:	4611      	mov	r1, r2
 8009be0:	4618      	mov	r0, r3
 8009be2:	f7fc f93f 	bl	8005e64 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009be6:	4b46      	ldr	r3, [pc, #280]	; (8009d00 <tcp_receive+0x88c>)
 8009be8:	891c      	ldrh	r4, [r3, #8]
 8009bea:	4b45      	ldr	r3, [pc, #276]	; (8009d00 <tcp_receive+0x88c>)
 8009bec:	68db      	ldr	r3, [r3, #12]
 8009bee:	899b      	ldrh	r3, [r3, #12]
 8009bf0:	b29b      	uxth	r3, r3
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f7fa ff5e 	bl	8004ab4 <lwip_htons>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	f003 0303 	and.w	r3, r3, #3
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d001      	beq.n	8009c08 <tcp_receive+0x794>
 8009c04:	2301      	movs	r3, #1
 8009c06:	e000      	b.n	8009c0a <tcp_receive+0x796>
 8009c08:	2300      	movs	r3, #0
 8009c0a:	4423      	add	r3, r4
 8009c0c:	b29a      	uxth	r2, r3
 8009c0e:	4b3d      	ldr	r3, [pc, #244]	; (8009d04 <tcp_receive+0x890>)
 8009c10:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009c12:	4b3c      	ldr	r3, [pc, #240]	; (8009d04 <tcp_receive+0x890>)
 8009c14:	881b      	ldrh	r3, [r3, #0]
 8009c16:	461a      	mov	r2, r3
 8009c18:	4b38      	ldr	r3, [pc, #224]	; (8009cfc <tcp_receive+0x888>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	441a      	add	r2, r3
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c22:	6879      	ldr	r1, [r7, #4]
 8009c24:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009c26:	440b      	add	r3, r1
 8009c28:	429a      	cmp	r2, r3
 8009c2a:	d006      	beq.n	8009c3a <tcp_receive+0x7c6>
 8009c2c:	4b36      	ldr	r3, [pc, #216]	; (8009d08 <tcp_receive+0x894>)
 8009c2e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8009c32:	4936      	ldr	r1, [pc, #216]	; (8009d0c <tcp_receive+0x898>)
 8009c34:	4836      	ldr	r0, [pc, #216]	; (8009d10 <tcp_receive+0x89c>)
 8009c36:	f005 f941 	bl	800eebc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	f000 80e7 	beq.w	8009e12 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009c44:	4b2e      	ldr	r3, [pc, #184]	; (8009d00 <tcp_receive+0x88c>)
 8009c46:	68db      	ldr	r3, [r3, #12]
 8009c48:	899b      	ldrh	r3, [r3, #12]
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f7fa ff31 	bl	8004ab4 <lwip_htons>
 8009c52:	4603      	mov	r3, r0
 8009c54:	b2db      	uxtb	r3, r3
 8009c56:	f003 0301 	and.w	r3, r3, #1
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d010      	beq.n	8009c80 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8009c5e:	e00a      	b.n	8009c76 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c64:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8009c70:	68f8      	ldr	r0, [r7, #12]
 8009c72:	f7fd fd92 	bl	800779a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d1f0      	bne.n	8009c60 <tcp_receive+0x7ec>
 8009c7e:	e0c8      	b.n	8009e12 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c84:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8009c86:	e052      	b.n	8009d2e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c8a:	68db      	ldr	r3, [r3, #12]
 8009c8c:	899b      	ldrh	r3, [r3, #12]
 8009c8e:	b29b      	uxth	r3, r3
 8009c90:	4618      	mov	r0, r3
 8009c92:	f7fa ff0f 	bl	8004ab4 <lwip_htons>
 8009c96:	4603      	mov	r3, r0
 8009c98:	b2db      	uxtb	r3, r3
 8009c9a:	f003 0301 	and.w	r3, r3, #1
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d03d      	beq.n	8009d1e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8009ca2:	4b17      	ldr	r3, [pc, #92]	; (8009d00 <tcp_receive+0x88c>)
 8009ca4:	68db      	ldr	r3, [r3, #12]
 8009ca6:	899b      	ldrh	r3, [r3, #12]
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	4618      	mov	r0, r3
 8009cac:	f7fa ff02 	bl	8004ab4 <lwip_htons>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	b2db      	uxtb	r3, r3
 8009cb4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d130      	bne.n	8009d1e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009cbc:	4b10      	ldr	r3, [pc, #64]	; (8009d00 <tcp_receive+0x88c>)
 8009cbe:	68db      	ldr	r3, [r3, #12]
 8009cc0:	899b      	ldrh	r3, [r3, #12]
 8009cc2:	b29c      	uxth	r4, r3
 8009cc4:	2001      	movs	r0, #1
 8009cc6:	f7fa fef5 	bl	8004ab4 <lwip_htons>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	461a      	mov	r2, r3
 8009cce:	4b0c      	ldr	r3, [pc, #48]	; (8009d00 <tcp_receive+0x88c>)
 8009cd0:	68db      	ldr	r3, [r3, #12]
 8009cd2:	4322      	orrs	r2, r4
 8009cd4:	b292      	uxth	r2, r2
 8009cd6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009cd8:	4b09      	ldr	r3, [pc, #36]	; (8009d00 <tcp_receive+0x88c>)
 8009cda:	891c      	ldrh	r4, [r3, #8]
 8009cdc:	4b08      	ldr	r3, [pc, #32]	; (8009d00 <tcp_receive+0x88c>)
 8009cde:	68db      	ldr	r3, [r3, #12]
 8009ce0:	899b      	ldrh	r3, [r3, #12]
 8009ce2:	b29b      	uxth	r3, r3
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f7fa fee5 	bl	8004ab4 <lwip_htons>
 8009cea:	4603      	mov	r3, r0
 8009cec:	b2db      	uxtb	r3, r3
 8009cee:	f003 0303 	and.w	r3, r3, #3
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d00e      	beq.n	8009d14 <tcp_receive+0x8a0>
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	e00d      	b.n	8009d16 <tcp_receive+0x8a2>
 8009cfa:	bf00      	nop
 8009cfc:	2000a4ec 	.word	0x2000a4ec
 8009d00:	2000a4cc 	.word	0x2000a4cc
 8009d04:	2000a4f6 	.word	0x2000a4f6
 8009d08:	08011300 	.word	0x08011300
 8009d0c:	080116a8 	.word	0x080116a8
 8009d10:	0801134c 	.word	0x0801134c
 8009d14:	2300      	movs	r3, #0
 8009d16:	4423      	add	r3, r4
 8009d18:	b29a      	uxth	r2, r3
 8009d1a:	4b98      	ldr	r3, [pc, #608]	; (8009f7c <tcp_receive+0xb08>)
 8009d1c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8009d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d20:	613b      	str	r3, [r7, #16]
              next = next->next;
 8009d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8009d28:	6938      	ldr	r0, [r7, #16]
 8009d2a:	f7fd fd36 	bl	800779a <tcp_seg_free>
            while (next &&
 8009d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d00e      	beq.n	8009d52 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009d34:	4b91      	ldr	r3, [pc, #580]	; (8009f7c <tcp_receive+0xb08>)
 8009d36:	881b      	ldrh	r3, [r3, #0]
 8009d38:	461a      	mov	r2, r3
 8009d3a:	4b91      	ldr	r3, [pc, #580]	; (8009f80 <tcp_receive+0xb0c>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	441a      	add	r2, r3
 8009d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d42:	68db      	ldr	r3, [r3, #12]
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009d48:	8909      	ldrh	r1, [r1, #8]
 8009d4a:	440b      	add	r3, r1
 8009d4c:	1ad3      	subs	r3, r2, r3
            while (next &&
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	da9a      	bge.n	8009c88 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8009d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d059      	beq.n	8009e0c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8009d58:	4b88      	ldr	r3, [pc, #544]	; (8009f7c <tcp_receive+0xb08>)
 8009d5a:	881b      	ldrh	r3, [r3, #0]
 8009d5c:	461a      	mov	r2, r3
 8009d5e:	4b88      	ldr	r3, [pc, #544]	; (8009f80 <tcp_receive+0xb0c>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	441a      	add	r2, r3
 8009d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d66:	68db      	ldr	r3, [r3, #12]
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	1ad3      	subs	r3, r2, r3
            if (next &&
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	dd4d      	ble.n	8009e0c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d72:	68db      	ldr	r3, [r3, #12]
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	b29a      	uxth	r2, r3
 8009d78:	4b81      	ldr	r3, [pc, #516]	; (8009f80 <tcp_receive+0xb0c>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	b29b      	uxth	r3, r3
 8009d7e:	1ad3      	subs	r3, r2, r3
 8009d80:	b29a      	uxth	r2, r3
 8009d82:	4b80      	ldr	r3, [pc, #512]	; (8009f84 <tcp_receive+0xb10>)
 8009d84:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009d86:	4b7f      	ldr	r3, [pc, #508]	; (8009f84 <tcp_receive+0xb10>)
 8009d88:	68db      	ldr	r3, [r3, #12]
 8009d8a:	899b      	ldrh	r3, [r3, #12]
 8009d8c:	b29b      	uxth	r3, r3
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f7fa fe90 	bl	8004ab4 <lwip_htons>
 8009d94:	4603      	mov	r3, r0
 8009d96:	b2db      	uxtb	r3, r3
 8009d98:	f003 0302 	and.w	r3, r3, #2
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d005      	beq.n	8009dac <tcp_receive+0x938>
                inseg.len -= 1;
 8009da0:	4b78      	ldr	r3, [pc, #480]	; (8009f84 <tcp_receive+0xb10>)
 8009da2:	891b      	ldrh	r3, [r3, #8]
 8009da4:	3b01      	subs	r3, #1
 8009da6:	b29a      	uxth	r2, r3
 8009da8:	4b76      	ldr	r3, [pc, #472]	; (8009f84 <tcp_receive+0xb10>)
 8009daa:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8009dac:	4b75      	ldr	r3, [pc, #468]	; (8009f84 <tcp_receive+0xb10>)
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	4a74      	ldr	r2, [pc, #464]	; (8009f84 <tcp_receive+0xb10>)
 8009db2:	8912      	ldrh	r2, [r2, #8]
 8009db4:	4611      	mov	r1, r2
 8009db6:	4618      	mov	r0, r3
 8009db8:	f7fc f854 	bl	8005e64 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8009dbc:	4b71      	ldr	r3, [pc, #452]	; (8009f84 <tcp_receive+0xb10>)
 8009dbe:	891c      	ldrh	r4, [r3, #8]
 8009dc0:	4b70      	ldr	r3, [pc, #448]	; (8009f84 <tcp_receive+0xb10>)
 8009dc2:	68db      	ldr	r3, [r3, #12]
 8009dc4:	899b      	ldrh	r3, [r3, #12]
 8009dc6:	b29b      	uxth	r3, r3
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f7fa fe73 	bl	8004ab4 <lwip_htons>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	b2db      	uxtb	r3, r3
 8009dd2:	f003 0303 	and.w	r3, r3, #3
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d001      	beq.n	8009dde <tcp_receive+0x96a>
 8009dda:	2301      	movs	r3, #1
 8009ddc:	e000      	b.n	8009de0 <tcp_receive+0x96c>
 8009dde:	2300      	movs	r3, #0
 8009de0:	4423      	add	r3, r4
 8009de2:	b29a      	uxth	r2, r3
 8009de4:	4b65      	ldr	r3, [pc, #404]	; (8009f7c <tcp_receive+0xb08>)
 8009de6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8009de8:	4b64      	ldr	r3, [pc, #400]	; (8009f7c <tcp_receive+0xb08>)
 8009dea:	881b      	ldrh	r3, [r3, #0]
 8009dec:	461a      	mov	r2, r3
 8009dee:	4b64      	ldr	r3, [pc, #400]	; (8009f80 <tcp_receive+0xb0c>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	441a      	add	r2, r3
 8009df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009df6:	68db      	ldr	r3, [r3, #12]
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	d006      	beq.n	8009e0c <tcp_receive+0x998>
 8009dfe:	4b62      	ldr	r3, [pc, #392]	; (8009f88 <tcp_receive+0xb14>)
 8009e00:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8009e04:	4961      	ldr	r1, [pc, #388]	; (8009f8c <tcp_receive+0xb18>)
 8009e06:	4862      	ldr	r0, [pc, #392]	; (8009f90 <tcp_receive+0xb1c>)
 8009e08:	f005 f858 	bl	800eebc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009e10:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8009e12:	4b5a      	ldr	r3, [pc, #360]	; (8009f7c <tcp_receive+0xb08>)
 8009e14:	881b      	ldrh	r3, [r3, #0]
 8009e16:	461a      	mov	r2, r3
 8009e18:	4b59      	ldr	r3, [pc, #356]	; (8009f80 <tcp_receive+0xb0c>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	441a      	add	r2, r3
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009e26:	4b55      	ldr	r3, [pc, #340]	; (8009f7c <tcp_receive+0xb08>)
 8009e28:	881b      	ldrh	r3, [r3, #0]
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d206      	bcs.n	8009e3c <tcp_receive+0x9c8>
 8009e2e:	4b56      	ldr	r3, [pc, #344]	; (8009f88 <tcp_receive+0xb14>)
 8009e30:	f240 6207 	movw	r2, #1543	; 0x607
 8009e34:	4957      	ldr	r1, [pc, #348]	; (8009f94 <tcp_receive+0xb20>)
 8009e36:	4856      	ldr	r0, [pc, #344]	; (8009f90 <tcp_receive+0xb1c>)
 8009e38:	f005 f840 	bl	800eebc <iprintf>
        pcb->rcv_wnd -= tcplen;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009e40:	4b4e      	ldr	r3, [pc, #312]	; (8009f7c <tcp_receive+0xb08>)
 8009e42:	881b      	ldrh	r3, [r3, #0]
 8009e44:	1ad3      	subs	r3, r2, r3
 8009e46:	b29a      	uxth	r2, r3
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f7fc ffc5 	bl	8006ddc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8009e52:	4b4c      	ldr	r3, [pc, #304]	; (8009f84 <tcp_receive+0xb10>)
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	891b      	ldrh	r3, [r3, #8]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d006      	beq.n	8009e6a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8009e5c:	4b49      	ldr	r3, [pc, #292]	; (8009f84 <tcp_receive+0xb10>)
 8009e5e:	685b      	ldr	r3, [r3, #4]
 8009e60:	4a4d      	ldr	r2, [pc, #308]	; (8009f98 <tcp_receive+0xb24>)
 8009e62:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8009e64:	4b47      	ldr	r3, [pc, #284]	; (8009f84 <tcp_receive+0xb10>)
 8009e66:	2200      	movs	r2, #0
 8009e68:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009e6a:	4b46      	ldr	r3, [pc, #280]	; (8009f84 <tcp_receive+0xb10>)
 8009e6c:	68db      	ldr	r3, [r3, #12]
 8009e6e:	899b      	ldrh	r3, [r3, #12]
 8009e70:	b29b      	uxth	r3, r3
 8009e72:	4618      	mov	r0, r3
 8009e74:	f7fa fe1e 	bl	8004ab4 <lwip_htons>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	b2db      	uxtb	r3, r3
 8009e7c:	f003 0301 	and.w	r3, r3, #1
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	f000 80b8 	beq.w	8009ff6 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8009e86:	4b45      	ldr	r3, [pc, #276]	; (8009f9c <tcp_receive+0xb28>)
 8009e88:	781b      	ldrb	r3, [r3, #0]
 8009e8a:	f043 0320 	orr.w	r3, r3, #32
 8009e8e:	b2da      	uxtb	r2, r3
 8009e90:	4b42      	ldr	r3, [pc, #264]	; (8009f9c <tcp_receive+0xb28>)
 8009e92:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8009e94:	e0af      	b.n	8009ff6 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e9a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ea0:	68db      	ldr	r3, [r3, #12]
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	4a36      	ldr	r2, [pc, #216]	; (8009f80 <tcp_receive+0xb0c>)
 8009ea6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	891b      	ldrh	r3, [r3, #8]
 8009eac:	461c      	mov	r4, r3
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	68db      	ldr	r3, [r3, #12]
 8009eb2:	899b      	ldrh	r3, [r3, #12]
 8009eb4:	b29b      	uxth	r3, r3
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f7fa fdfc 	bl	8004ab4 <lwip_htons>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	b2db      	uxtb	r3, r3
 8009ec0:	f003 0303 	and.w	r3, r3, #3
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d001      	beq.n	8009ecc <tcp_receive+0xa58>
 8009ec8:	2301      	movs	r3, #1
 8009eca:	e000      	b.n	8009ece <tcp_receive+0xa5a>
 8009ecc:	2300      	movs	r3, #0
 8009ece:	191a      	adds	r2, r3, r4
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ed4:	441a      	add	r2, r3
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ede:	461c      	mov	r4, r3
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	891b      	ldrh	r3, [r3, #8]
 8009ee4:	461d      	mov	r5, r3
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	68db      	ldr	r3, [r3, #12]
 8009eea:	899b      	ldrh	r3, [r3, #12]
 8009eec:	b29b      	uxth	r3, r3
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f7fa fde0 	bl	8004ab4 <lwip_htons>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	b2db      	uxtb	r3, r3
 8009ef8:	f003 0303 	and.w	r3, r3, #3
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d001      	beq.n	8009f04 <tcp_receive+0xa90>
 8009f00:	2301      	movs	r3, #1
 8009f02:	e000      	b.n	8009f06 <tcp_receive+0xa92>
 8009f04:	2300      	movs	r3, #0
 8009f06:	442b      	add	r3, r5
 8009f08:	429c      	cmp	r4, r3
 8009f0a:	d206      	bcs.n	8009f1a <tcp_receive+0xaa6>
 8009f0c:	4b1e      	ldr	r3, [pc, #120]	; (8009f88 <tcp_receive+0xb14>)
 8009f0e:	f240 622b 	movw	r2, #1579	; 0x62b
 8009f12:	4923      	ldr	r1, [pc, #140]	; (8009fa0 <tcp_receive+0xb2c>)
 8009f14:	481e      	ldr	r0, [pc, #120]	; (8009f90 <tcp_receive+0xb1c>)
 8009f16:	f004 ffd1 	bl	800eebc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	891b      	ldrh	r3, [r3, #8]
 8009f1e:	461c      	mov	r4, r3
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	68db      	ldr	r3, [r3, #12]
 8009f24:	899b      	ldrh	r3, [r3, #12]
 8009f26:	b29b      	uxth	r3, r3
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f7fa fdc3 	bl	8004ab4 <lwip_htons>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	b2db      	uxtb	r3, r3
 8009f32:	f003 0303 	and.w	r3, r3, #3
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d001      	beq.n	8009f3e <tcp_receive+0xaca>
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	e000      	b.n	8009f40 <tcp_receive+0xacc>
 8009f3e:	2300      	movs	r3, #0
 8009f40:	1919      	adds	r1, r3, r4
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009f46:	b28b      	uxth	r3, r1
 8009f48:	1ad3      	subs	r3, r2, r3
 8009f4a:	b29a      	uxth	r2, r3
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f7fc ff43 	bl	8006ddc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	891b      	ldrh	r3, [r3, #8]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d028      	beq.n	8009fb2 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8009f60:	4b0d      	ldr	r3, [pc, #52]	; (8009f98 <tcp_receive+0xb24>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d01d      	beq.n	8009fa4 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8009f68:	4b0b      	ldr	r3, [pc, #44]	; (8009f98 <tcp_receive+0xb24>)
 8009f6a:	681a      	ldr	r2, [r3, #0]
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	685b      	ldr	r3, [r3, #4]
 8009f70:	4619      	mov	r1, r3
 8009f72:	4610      	mov	r0, r2
 8009f74:	f7fc f9be 	bl	80062f4 <pbuf_cat>
 8009f78:	e018      	b.n	8009fac <tcp_receive+0xb38>
 8009f7a:	bf00      	nop
 8009f7c:	2000a4f6 	.word	0x2000a4f6
 8009f80:	2000a4ec 	.word	0x2000a4ec
 8009f84:	2000a4cc 	.word	0x2000a4cc
 8009f88:	08011300 	.word	0x08011300
 8009f8c:	080116e0 	.word	0x080116e0
 8009f90:	0801134c 	.word	0x0801134c
 8009f94:	0801171c 	.word	0x0801171c
 8009f98:	2000a4fc 	.word	0x2000a4fc
 8009f9c:	2000a4f9 	.word	0x2000a4f9
 8009fa0:	0801173c 	.word	0x0801173c
            } else {
              recv_data = cseg->p;
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	4a70      	ldr	r2, [pc, #448]	; (800a16c <tcp_receive+0xcf8>)
 8009faa:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	68db      	ldr	r3, [r3, #12]
 8009fb6:	899b      	ldrh	r3, [r3, #12]
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f7fa fd7a 	bl	8004ab4 <lwip_htons>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	b2db      	uxtb	r3, r3
 8009fc4:	f003 0301 	and.w	r3, r3, #1
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d00d      	beq.n	8009fe8 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8009fcc:	4b68      	ldr	r3, [pc, #416]	; (800a170 <tcp_receive+0xcfc>)
 8009fce:	781b      	ldrb	r3, [r3, #0]
 8009fd0:	f043 0320 	orr.w	r3, r3, #32
 8009fd4:	b2da      	uxtb	r2, r3
 8009fd6:	4b66      	ldr	r3, [pc, #408]	; (800a170 <tcp_receive+0xcfc>)
 8009fd8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	7d1b      	ldrb	r3, [r3, #20]
 8009fde:	2b04      	cmp	r3, #4
 8009fe0:	d102      	bne.n	8009fe8 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2207      	movs	r2, #7
 8009fe6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	681a      	ldr	r2, [r3, #0]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8009ff0:	68b8      	ldr	r0, [r7, #8]
 8009ff2:	f7fd fbd2 	bl	800779a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d008      	beq.n	800a010 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a002:	68db      	ldr	r3, [r3, #12]
 800a004:	685a      	ldr	r2, [r3, #4]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800a00a:	429a      	cmp	r2, r3
 800a00c:	f43f af43 	beq.w	8009e96 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	8b5b      	ldrh	r3, [r3, #26]
 800a014:	f003 0301 	and.w	r3, r3, #1
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d00e      	beq.n	800a03a <tcp_receive+0xbc6>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	8b5b      	ldrh	r3, [r3, #26]
 800a020:	f023 0301 	bic.w	r3, r3, #1
 800a024:	b29a      	uxth	r2, r3
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	835a      	strh	r2, [r3, #26]
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	8b5b      	ldrh	r3, [r3, #26]
 800a02e:	f043 0302 	orr.w	r3, r3, #2
 800a032:	b29a      	uxth	r2, r3
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a038:	e188      	b.n	800a34c <tcp_receive+0xed8>
        tcp_ack(pcb);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	8b5b      	ldrh	r3, [r3, #26]
 800a03e:	f043 0301 	orr.w	r3, r3, #1
 800a042:	b29a      	uxth	r2, r3
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a048:	e180      	b.n	800a34c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d106      	bne.n	800a060 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800a052:	4848      	ldr	r0, [pc, #288]	; (800a174 <tcp_receive+0xd00>)
 800a054:	f7fd fbba 	bl	80077cc <tcp_seg_copy>
 800a058:	4602      	mov	r2, r0
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	675a      	str	r2, [r3, #116]	; 0x74
 800a05e:	e16d      	b.n	800a33c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800a060:	2300      	movs	r3, #0
 800a062:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a068:	63bb      	str	r3, [r7, #56]	; 0x38
 800a06a:	e157      	b.n	800a31c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800a06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a06e:	68db      	ldr	r3, [r3, #12]
 800a070:	685a      	ldr	r2, [r3, #4]
 800a072:	4b41      	ldr	r3, [pc, #260]	; (800a178 <tcp_receive+0xd04>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	429a      	cmp	r2, r3
 800a078:	d11d      	bne.n	800a0b6 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800a07a:	4b3e      	ldr	r3, [pc, #248]	; (800a174 <tcp_receive+0xd00>)
 800a07c:	891a      	ldrh	r2, [r3, #8]
 800a07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a080:	891b      	ldrh	r3, [r3, #8]
 800a082:	429a      	cmp	r2, r3
 800a084:	f240 814f 	bls.w	800a326 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a088:	483a      	ldr	r0, [pc, #232]	; (800a174 <tcp_receive+0xd00>)
 800a08a:	f7fd fb9f 	bl	80077cc <tcp_seg_copy>
 800a08e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	2b00      	cmp	r3, #0
 800a094:	f000 8149 	beq.w	800a32a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800a098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d003      	beq.n	800a0a6 <tcp_receive+0xc32>
                    prev->next = cseg;
 800a09e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0a0:	697a      	ldr	r2, [r7, #20]
 800a0a2:	601a      	str	r2, [r3, #0]
 800a0a4:	e002      	b.n	800a0ac <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	697a      	ldr	r2, [r7, #20]
 800a0aa:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800a0ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a0ae:	6978      	ldr	r0, [r7, #20]
 800a0b0:	f7ff f8dc 	bl	800926c <tcp_oos_insert_segment>
                }
                break;
 800a0b4:	e139      	b.n	800a32a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800a0b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d117      	bne.n	800a0ec <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800a0bc:	4b2e      	ldr	r3, [pc, #184]	; (800a178 <tcp_receive+0xd04>)
 800a0be:	681a      	ldr	r2, [r3, #0]
 800a0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0c2:	68db      	ldr	r3, [r3, #12]
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	1ad3      	subs	r3, r2, r3
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	da57      	bge.n	800a17c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a0cc:	4829      	ldr	r0, [pc, #164]	; (800a174 <tcp_receive+0xd00>)
 800a0ce:	f7fd fb7d 	bl	80077cc <tcp_seg_copy>
 800a0d2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800a0d4:	69bb      	ldr	r3, [r7, #24]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	f000 8129 	beq.w	800a32e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	69ba      	ldr	r2, [r7, #24]
 800a0e0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800a0e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a0e4:	69b8      	ldr	r0, [r7, #24]
 800a0e6:	f7ff f8c1 	bl	800926c <tcp_oos_insert_segment>
                  }
                  break;
 800a0ea:	e120      	b.n	800a32e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800a0ec:	4b22      	ldr	r3, [pc, #136]	; (800a178 <tcp_receive+0xd04>)
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0f2:	68db      	ldr	r3, [r3, #12]
 800a0f4:	685b      	ldr	r3, [r3, #4]
 800a0f6:	1ad3      	subs	r3, r2, r3
 800a0f8:	3b01      	subs	r3, #1
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	db3e      	blt.n	800a17c <tcp_receive+0xd08>
 800a0fe:	4b1e      	ldr	r3, [pc, #120]	; (800a178 <tcp_receive+0xd04>)
 800a100:	681a      	ldr	r2, [r3, #0]
 800a102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a104:	68db      	ldr	r3, [r3, #12]
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	1ad3      	subs	r3, r2, r3
 800a10a:	3301      	adds	r3, #1
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	dc35      	bgt.n	800a17c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a110:	4818      	ldr	r0, [pc, #96]	; (800a174 <tcp_receive+0xd00>)
 800a112:	f7fd fb5b 	bl	80077cc <tcp_seg_copy>
 800a116:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800a118:	69fb      	ldr	r3, [r7, #28]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	f000 8109 	beq.w	800a332 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800a120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a122:	68db      	ldr	r3, [r3, #12]
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a128:	8912      	ldrh	r2, [r2, #8]
 800a12a:	441a      	add	r2, r3
 800a12c:	4b12      	ldr	r3, [pc, #72]	; (800a178 <tcp_receive+0xd04>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	1ad3      	subs	r3, r2, r3
 800a132:	2b00      	cmp	r3, #0
 800a134:	dd12      	ble.n	800a15c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800a136:	4b10      	ldr	r3, [pc, #64]	; (800a178 <tcp_receive+0xd04>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	b29a      	uxth	r2, r3
 800a13c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a13e:	68db      	ldr	r3, [r3, #12]
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	b29b      	uxth	r3, r3
 800a144:	1ad3      	subs	r3, r2, r3
 800a146:	b29a      	uxth	r2, r3
 800a148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a14a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800a14c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a14e:	685a      	ldr	r2, [r3, #4]
 800a150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a152:	891b      	ldrh	r3, [r3, #8]
 800a154:	4619      	mov	r1, r3
 800a156:	4610      	mov	r0, r2
 800a158:	f7fb fe84 	bl	8005e64 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800a15c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a15e:	69fa      	ldr	r2, [r7, #28]
 800a160:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a162:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a164:	69f8      	ldr	r0, [r7, #28]
 800a166:	f7ff f881 	bl	800926c <tcp_oos_insert_segment>
                  }
                  break;
 800a16a:	e0e2      	b.n	800a332 <tcp_receive+0xebe>
 800a16c:	2000a4fc 	.word	0x2000a4fc
 800a170:	2000a4f9 	.word	0x2000a4f9
 800a174:	2000a4cc 	.word	0x2000a4cc
 800a178:	2000a4ec 	.word	0x2000a4ec
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800a17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a17e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800a180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	2b00      	cmp	r3, #0
 800a186:	f040 80c6 	bne.w	800a316 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800a18a:	4b80      	ldr	r3, [pc, #512]	; (800a38c <tcp_receive+0xf18>)
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a190:	68db      	ldr	r3, [r3, #12]
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800a196:	2b00      	cmp	r3, #0
 800a198:	f340 80bd 	ble.w	800a316 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a19e:	68db      	ldr	r3, [r3, #12]
 800a1a0:	899b      	ldrh	r3, [r3, #12]
 800a1a2:	b29b      	uxth	r3, r3
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f7fa fc85 	bl	8004ab4 <lwip_htons>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	b2db      	uxtb	r3, r3
 800a1ae:	f003 0301 	and.w	r3, r3, #1
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	f040 80bf 	bne.w	800a336 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800a1b8:	4875      	ldr	r0, [pc, #468]	; (800a390 <tcp_receive+0xf1c>)
 800a1ba:	f7fd fb07 	bl	80077cc <tcp_seg_copy>
 800a1be:	4602      	mov	r2, r0
 800a1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800a1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	f000 80b6 	beq.w	800a33a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1d0:	68db      	ldr	r3, [r3, #12]
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a1d6:	8912      	ldrh	r2, [r2, #8]
 800a1d8:	441a      	add	r2, r3
 800a1da:	4b6c      	ldr	r3, [pc, #432]	; (800a38c <tcp_receive+0xf18>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	1ad3      	subs	r3, r2, r3
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	dd12      	ble.n	800a20a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a1e4:	4b69      	ldr	r3, [pc, #420]	; (800a38c <tcp_receive+0xf18>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	b29a      	uxth	r2, r3
 800a1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ec:	68db      	ldr	r3, [r3, #12]
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	1ad3      	subs	r3, r2, r3
 800a1f4:	b29a      	uxth	r2, r3
 800a1f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800a1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1fc:	685a      	ldr	r2, [r3, #4]
 800a1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a200:	891b      	ldrh	r3, [r3, #8]
 800a202:	4619      	mov	r1, r3
 800a204:	4610      	mov	r0, r2
 800a206:	f7fb fe2d 	bl	8005e64 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800a20a:	4b62      	ldr	r3, [pc, #392]	; (800a394 <tcp_receive+0xf20>)
 800a20c:	881b      	ldrh	r3, [r3, #0]
 800a20e:	461a      	mov	r2, r3
 800a210:	4b5e      	ldr	r3, [pc, #376]	; (800a38c <tcp_receive+0xf18>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	441a      	add	r2, r3
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a21a:	6879      	ldr	r1, [r7, #4]
 800a21c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a21e:	440b      	add	r3, r1
 800a220:	1ad3      	subs	r3, r2, r3
 800a222:	2b00      	cmp	r3, #0
 800a224:	f340 8089 	ble.w	800a33a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	68db      	ldr	r3, [r3, #12]
 800a22e:	899b      	ldrh	r3, [r3, #12]
 800a230:	b29b      	uxth	r3, r3
 800a232:	4618      	mov	r0, r3
 800a234:	f7fa fc3e 	bl	8004ab4 <lwip_htons>
 800a238:	4603      	mov	r3, r0
 800a23a:	b2db      	uxtb	r3, r3
 800a23c:	f003 0301 	and.w	r3, r3, #1
 800a240:	2b00      	cmp	r3, #0
 800a242:	d022      	beq.n	800a28a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	68db      	ldr	r3, [r3, #12]
 800a24a:	899b      	ldrh	r3, [r3, #12]
 800a24c:	b29b      	uxth	r3, r3
 800a24e:	b21b      	sxth	r3, r3
 800a250:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a254:	b21c      	sxth	r4, r3
 800a256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	68db      	ldr	r3, [r3, #12]
 800a25c:	899b      	ldrh	r3, [r3, #12]
 800a25e:	b29b      	uxth	r3, r3
 800a260:	4618      	mov	r0, r3
 800a262:	f7fa fc27 	bl	8004ab4 <lwip_htons>
 800a266:	4603      	mov	r3, r0
 800a268:	b2db      	uxtb	r3, r3
 800a26a:	b29b      	uxth	r3, r3
 800a26c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a270:	b29b      	uxth	r3, r3
 800a272:	4618      	mov	r0, r3
 800a274:	f7fa fc1e 	bl	8004ab4 <lwip_htons>
 800a278:	4603      	mov	r3, r0
 800a27a:	b21b      	sxth	r3, r3
 800a27c:	4323      	orrs	r3, r4
 800a27e:	b21a      	sxth	r2, r3
 800a280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	68db      	ldr	r3, [r3, #12]
 800a286:	b292      	uxth	r2, r2
 800a288:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a28e:	b29a      	uxth	r2, r3
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a294:	4413      	add	r3, r2
 800a296:	b299      	uxth	r1, r3
 800a298:	4b3c      	ldr	r3, [pc, #240]	; (800a38c <tcp_receive+0xf18>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	b29a      	uxth	r2, r3
 800a29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	1a8a      	subs	r2, r1, r2
 800a2a4:	b292      	uxth	r2, r2
 800a2a6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	685a      	ldr	r2, [r3, #4]
 800a2ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	891b      	ldrh	r3, [r3, #8]
 800a2b4:	4619      	mov	r1, r3
 800a2b6:	4610      	mov	r0, r2
 800a2b8:	f7fb fdd4 	bl	8005e64 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	891c      	ldrh	r4, [r3, #8]
 800a2c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	68db      	ldr	r3, [r3, #12]
 800a2c8:	899b      	ldrh	r3, [r3, #12]
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f7fa fbf1 	bl	8004ab4 <lwip_htons>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	b2db      	uxtb	r3, r3
 800a2d6:	f003 0303 	and.w	r3, r3, #3
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d001      	beq.n	800a2e2 <tcp_receive+0xe6e>
 800a2de:	2301      	movs	r3, #1
 800a2e0:	e000      	b.n	800a2e4 <tcp_receive+0xe70>
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	4423      	add	r3, r4
 800a2e6:	b29a      	uxth	r2, r3
 800a2e8:	4b2a      	ldr	r3, [pc, #168]	; (800a394 <tcp_receive+0xf20>)
 800a2ea:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a2ec:	4b29      	ldr	r3, [pc, #164]	; (800a394 <tcp_receive+0xf20>)
 800a2ee:	881b      	ldrh	r3, [r3, #0]
 800a2f0:	461a      	mov	r2, r3
 800a2f2:	4b26      	ldr	r3, [pc, #152]	; (800a38c <tcp_receive+0xf18>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	441a      	add	r2, r3
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2fc:	6879      	ldr	r1, [r7, #4]
 800a2fe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a300:	440b      	add	r3, r1
 800a302:	429a      	cmp	r2, r3
 800a304:	d019      	beq.n	800a33a <tcp_receive+0xec6>
 800a306:	4b24      	ldr	r3, [pc, #144]	; (800a398 <tcp_receive+0xf24>)
 800a308:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800a30c:	4923      	ldr	r1, [pc, #140]	; (800a39c <tcp_receive+0xf28>)
 800a30e:	4824      	ldr	r0, [pc, #144]	; (800a3a0 <tcp_receive+0xf2c>)
 800a310:	f004 fdd4 	bl	800eebc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800a314:	e011      	b.n	800a33a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a31e:	2b00      	cmp	r3, #0
 800a320:	f47f aea4 	bne.w	800a06c <tcp_receive+0xbf8>
 800a324:	e00a      	b.n	800a33c <tcp_receive+0xec8>
                break;
 800a326:	bf00      	nop
 800a328:	e008      	b.n	800a33c <tcp_receive+0xec8>
                break;
 800a32a:	bf00      	nop
 800a32c:	e006      	b.n	800a33c <tcp_receive+0xec8>
                  break;
 800a32e:	bf00      	nop
 800a330:	e004      	b.n	800a33c <tcp_receive+0xec8>
                  break;
 800a332:	bf00      	nop
 800a334:	e002      	b.n	800a33c <tcp_receive+0xec8>
                  break;
 800a336:	bf00      	nop
 800a338:	e000      	b.n	800a33c <tcp_receive+0xec8>
                break;
 800a33a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f001 fa33 	bl	800b7a8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800a342:	e003      	b.n	800a34c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f001 fa2f 	bl	800b7a8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a34a:	e01a      	b.n	800a382 <tcp_receive+0xf0e>
 800a34c:	e019      	b.n	800a382 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a34e:	4b0f      	ldr	r3, [pc, #60]	; (800a38c <tcp_receive+0xf18>)
 800a350:	681a      	ldr	r2, [r3, #0]
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a356:	1ad3      	subs	r3, r2, r3
 800a358:	2b00      	cmp	r3, #0
 800a35a:	db0a      	blt.n	800a372 <tcp_receive+0xefe>
 800a35c:	4b0b      	ldr	r3, [pc, #44]	; (800a38c <tcp_receive+0xf18>)
 800a35e:	681a      	ldr	r2, [r3, #0]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a364:	6879      	ldr	r1, [r7, #4]
 800a366:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a368:	440b      	add	r3, r1
 800a36a:	1ad3      	subs	r3, r2, r3
 800a36c:	3301      	adds	r3, #1
 800a36e:	2b00      	cmp	r3, #0
 800a370:	dd07      	ble.n	800a382 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	8b5b      	ldrh	r3, [r3, #26]
 800a376:	f043 0302 	orr.w	r3, r3, #2
 800a37a:	b29a      	uxth	r2, r3
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800a380:	e7ff      	b.n	800a382 <tcp_receive+0xf0e>
 800a382:	bf00      	nop
 800a384:	3750      	adds	r7, #80	; 0x50
 800a386:	46bd      	mov	sp, r7
 800a388:	bdb0      	pop	{r4, r5, r7, pc}
 800a38a:	bf00      	nop
 800a38c:	2000a4ec 	.word	0x2000a4ec
 800a390:	2000a4cc 	.word	0x2000a4cc
 800a394:	2000a4f6 	.word	0x2000a4f6
 800a398:	08011300 	.word	0x08011300
 800a39c:	080116a8 	.word	0x080116a8
 800a3a0:	0801134c 	.word	0x0801134c

0800a3a4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b083      	sub	sp, #12
 800a3a8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800a3aa:	4b15      	ldr	r3, [pc, #84]	; (800a400 <tcp_get_next_optbyte+0x5c>)
 800a3ac:	881b      	ldrh	r3, [r3, #0]
 800a3ae:	1c5a      	adds	r2, r3, #1
 800a3b0:	b291      	uxth	r1, r2
 800a3b2:	4a13      	ldr	r2, [pc, #76]	; (800a400 <tcp_get_next_optbyte+0x5c>)
 800a3b4:	8011      	strh	r1, [r2, #0]
 800a3b6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a3b8:	4b12      	ldr	r3, [pc, #72]	; (800a404 <tcp_get_next_optbyte+0x60>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d004      	beq.n	800a3ca <tcp_get_next_optbyte+0x26>
 800a3c0:	4b11      	ldr	r3, [pc, #68]	; (800a408 <tcp_get_next_optbyte+0x64>)
 800a3c2:	881b      	ldrh	r3, [r3, #0]
 800a3c4:	88fa      	ldrh	r2, [r7, #6]
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	d208      	bcs.n	800a3dc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a3ca:	4b10      	ldr	r3, [pc, #64]	; (800a40c <tcp_get_next_optbyte+0x68>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	3314      	adds	r3, #20
 800a3d0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800a3d2:	88fb      	ldrh	r3, [r7, #6]
 800a3d4:	683a      	ldr	r2, [r7, #0]
 800a3d6:	4413      	add	r3, r2
 800a3d8:	781b      	ldrb	r3, [r3, #0]
 800a3da:	e00b      	b.n	800a3f4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a3dc:	88fb      	ldrh	r3, [r7, #6]
 800a3de:	b2da      	uxtb	r2, r3
 800a3e0:	4b09      	ldr	r3, [pc, #36]	; (800a408 <tcp_get_next_optbyte+0x64>)
 800a3e2:	881b      	ldrh	r3, [r3, #0]
 800a3e4:	b2db      	uxtb	r3, r3
 800a3e6:	1ad3      	subs	r3, r2, r3
 800a3e8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800a3ea:	4b06      	ldr	r3, [pc, #24]	; (800a404 <tcp_get_next_optbyte+0x60>)
 800a3ec:	681a      	ldr	r2, [r3, #0]
 800a3ee:	797b      	ldrb	r3, [r7, #5]
 800a3f0:	4413      	add	r3, r2
 800a3f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	370c      	adds	r7, #12
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fe:	4770      	bx	lr
 800a400:	2000a4e8 	.word	0x2000a4e8
 800a404:	2000a4e4 	.word	0x2000a4e4
 800a408:	2000a4e2 	.word	0x2000a4e2
 800a40c:	2000a4dc 	.word	0x2000a4dc

0800a410 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d106      	bne.n	800a42c <tcp_parseopt+0x1c>
 800a41e:	4b32      	ldr	r3, [pc, #200]	; (800a4e8 <tcp_parseopt+0xd8>)
 800a420:	f240 727d 	movw	r2, #1917	; 0x77d
 800a424:	4931      	ldr	r1, [pc, #196]	; (800a4ec <tcp_parseopt+0xdc>)
 800a426:	4832      	ldr	r0, [pc, #200]	; (800a4f0 <tcp_parseopt+0xe0>)
 800a428:	f004 fd48 	bl	800eebc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a42c:	4b31      	ldr	r3, [pc, #196]	; (800a4f4 <tcp_parseopt+0xe4>)
 800a42e:	881b      	ldrh	r3, [r3, #0]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d055      	beq.n	800a4e0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a434:	4b30      	ldr	r3, [pc, #192]	; (800a4f8 <tcp_parseopt+0xe8>)
 800a436:	2200      	movs	r2, #0
 800a438:	801a      	strh	r2, [r3, #0]
 800a43a:	e045      	b.n	800a4c8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800a43c:	f7ff ffb2 	bl	800a3a4 <tcp_get_next_optbyte>
 800a440:	4603      	mov	r3, r0
 800a442:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800a444:	7bfb      	ldrb	r3, [r7, #15]
 800a446:	2b02      	cmp	r3, #2
 800a448:	d006      	beq.n	800a458 <tcp_parseopt+0x48>
 800a44a:	2b02      	cmp	r3, #2
 800a44c:	dc2b      	bgt.n	800a4a6 <tcp_parseopt+0x96>
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d041      	beq.n	800a4d6 <tcp_parseopt+0xc6>
 800a452:	2b01      	cmp	r3, #1
 800a454:	d127      	bne.n	800a4a6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800a456:	e037      	b.n	800a4c8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a458:	f7ff ffa4 	bl	800a3a4 <tcp_get_next_optbyte>
 800a45c:	4603      	mov	r3, r0
 800a45e:	2b04      	cmp	r3, #4
 800a460:	d13b      	bne.n	800a4da <tcp_parseopt+0xca>
 800a462:	4b25      	ldr	r3, [pc, #148]	; (800a4f8 <tcp_parseopt+0xe8>)
 800a464:	881b      	ldrh	r3, [r3, #0]
 800a466:	3301      	adds	r3, #1
 800a468:	4a22      	ldr	r2, [pc, #136]	; (800a4f4 <tcp_parseopt+0xe4>)
 800a46a:	8812      	ldrh	r2, [r2, #0]
 800a46c:	4293      	cmp	r3, r2
 800a46e:	da34      	bge.n	800a4da <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a470:	f7ff ff98 	bl	800a3a4 <tcp_get_next_optbyte>
 800a474:	4603      	mov	r3, r0
 800a476:	b29b      	uxth	r3, r3
 800a478:	021b      	lsls	r3, r3, #8
 800a47a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800a47c:	f7ff ff92 	bl	800a3a4 <tcp_get_next_optbyte>
 800a480:	4603      	mov	r3, r0
 800a482:	b29a      	uxth	r2, r3
 800a484:	89bb      	ldrh	r3, [r7, #12]
 800a486:	4313      	orrs	r3, r2
 800a488:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a48a:	89bb      	ldrh	r3, [r7, #12]
 800a48c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a490:	d804      	bhi.n	800a49c <tcp_parseopt+0x8c>
 800a492:	89bb      	ldrh	r3, [r7, #12]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d001      	beq.n	800a49c <tcp_parseopt+0x8c>
 800a498:	89ba      	ldrh	r2, [r7, #12]
 800a49a:	e001      	b.n	800a4a0 <tcp_parseopt+0x90>
 800a49c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800a4a4:	e010      	b.n	800a4c8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800a4a6:	f7ff ff7d 	bl	800a3a4 <tcp_get_next_optbyte>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800a4ae:	7afb      	ldrb	r3, [r7, #11]
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d914      	bls.n	800a4de <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800a4b4:	7afb      	ldrb	r3, [r7, #11]
 800a4b6:	b29a      	uxth	r2, r3
 800a4b8:	4b0f      	ldr	r3, [pc, #60]	; (800a4f8 <tcp_parseopt+0xe8>)
 800a4ba:	881b      	ldrh	r3, [r3, #0]
 800a4bc:	4413      	add	r3, r2
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	3b02      	subs	r3, #2
 800a4c2:	b29a      	uxth	r2, r3
 800a4c4:	4b0c      	ldr	r3, [pc, #48]	; (800a4f8 <tcp_parseopt+0xe8>)
 800a4c6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a4c8:	4b0b      	ldr	r3, [pc, #44]	; (800a4f8 <tcp_parseopt+0xe8>)
 800a4ca:	881a      	ldrh	r2, [r3, #0]
 800a4cc:	4b09      	ldr	r3, [pc, #36]	; (800a4f4 <tcp_parseopt+0xe4>)
 800a4ce:	881b      	ldrh	r3, [r3, #0]
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	d3b3      	bcc.n	800a43c <tcp_parseopt+0x2c>
 800a4d4:	e004      	b.n	800a4e0 <tcp_parseopt+0xd0>
          return;
 800a4d6:	bf00      	nop
 800a4d8:	e002      	b.n	800a4e0 <tcp_parseopt+0xd0>
            return;
 800a4da:	bf00      	nop
 800a4dc:	e000      	b.n	800a4e0 <tcp_parseopt+0xd0>
            return;
 800a4de:	bf00      	nop
      }
    }
  }
}
 800a4e0:	3710      	adds	r7, #16
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}
 800a4e6:	bf00      	nop
 800a4e8:	08011300 	.word	0x08011300
 800a4ec:	08011764 	.word	0x08011764
 800a4f0:	0801134c 	.word	0x0801134c
 800a4f4:	2000a4e0 	.word	0x2000a4e0
 800a4f8:	2000a4e8 	.word	0x2000a4e8

0800a4fc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800a500:	4b05      	ldr	r3, [pc, #20]	; (800a518 <tcp_trigger_input_pcb_close+0x1c>)
 800a502:	781b      	ldrb	r3, [r3, #0]
 800a504:	f043 0310 	orr.w	r3, r3, #16
 800a508:	b2da      	uxtb	r2, r3
 800a50a:	4b03      	ldr	r3, [pc, #12]	; (800a518 <tcp_trigger_input_pcb_close+0x1c>)
 800a50c:	701a      	strb	r2, [r3, #0]
}
 800a50e:	bf00      	nop
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr
 800a518:	2000a4f9 	.word	0x2000a4f9

0800a51c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b084      	sub	sp, #16
 800a520:	af00      	add	r7, sp, #0
 800a522:	60f8      	str	r0, [r7, #12]
 800a524:	60b9      	str	r1, [r7, #8]
 800a526:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d00a      	beq.n	800a544 <tcp_route+0x28>
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	7a1b      	ldrb	r3, [r3, #8]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d006      	beq.n	800a544 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	7a1b      	ldrb	r3, [r3, #8]
 800a53a:	4618      	mov	r0, r3
 800a53c:	f7fb fab8 	bl	8005ab0 <netif_get_by_index>
 800a540:	4603      	mov	r3, r0
 800a542:	e003      	b.n	800a54c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f003 f9cd 	bl	800d8e4 <ip4_route>
 800a54a:	4603      	mov	r3, r0
  }
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3710      	adds	r7, #16
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800a554:	b590      	push	{r4, r7, lr}
 800a556:	b087      	sub	sp, #28
 800a558:	af00      	add	r7, sp, #0
 800a55a:	60f8      	str	r0, [r7, #12]
 800a55c:	60b9      	str	r1, [r7, #8]
 800a55e:	603b      	str	r3, [r7, #0]
 800a560:	4613      	mov	r3, r2
 800a562:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d105      	bne.n	800a576 <tcp_create_segment+0x22>
 800a56a:	4b44      	ldr	r3, [pc, #272]	; (800a67c <tcp_create_segment+0x128>)
 800a56c:	22a3      	movs	r2, #163	; 0xa3
 800a56e:	4944      	ldr	r1, [pc, #272]	; (800a680 <tcp_create_segment+0x12c>)
 800a570:	4844      	ldr	r0, [pc, #272]	; (800a684 <tcp_create_segment+0x130>)
 800a572:	f004 fca3 	bl	800eebc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d105      	bne.n	800a588 <tcp_create_segment+0x34>
 800a57c:	4b3f      	ldr	r3, [pc, #252]	; (800a67c <tcp_create_segment+0x128>)
 800a57e:	22a4      	movs	r2, #164	; 0xa4
 800a580:	4941      	ldr	r1, [pc, #260]	; (800a688 <tcp_create_segment+0x134>)
 800a582:	4840      	ldr	r0, [pc, #256]	; (800a684 <tcp_create_segment+0x130>)
 800a584:	f004 fc9a 	bl	800eebc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a588:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a58c:	009b      	lsls	r3, r3, #2
 800a58e:	b2db      	uxtb	r3, r3
 800a590:	f003 0304 	and.w	r3, r3, #4
 800a594:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800a596:	2003      	movs	r0, #3
 800a598:	f7fa ff04 	bl	80053a4 <memp_malloc>
 800a59c:	6138      	str	r0, [r7, #16]
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d104      	bne.n	800a5ae <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800a5a4:	68b8      	ldr	r0, [r7, #8]
 800a5a6:	f7fb fde3 	bl	8006170 <pbuf_free>
    return NULL;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	e061      	b.n	800a672 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800a5b4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	68ba      	ldr	r2, [r7, #8]
 800a5c0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	891a      	ldrh	r2, [r3, #8]
 800a5c6:	7dfb      	ldrb	r3, [r7, #23]
 800a5c8:	b29b      	uxth	r3, r3
 800a5ca:	429a      	cmp	r2, r3
 800a5cc:	d205      	bcs.n	800a5da <tcp_create_segment+0x86>
 800a5ce:	4b2b      	ldr	r3, [pc, #172]	; (800a67c <tcp_create_segment+0x128>)
 800a5d0:	22b0      	movs	r2, #176	; 0xb0
 800a5d2:	492e      	ldr	r1, [pc, #184]	; (800a68c <tcp_create_segment+0x138>)
 800a5d4:	482b      	ldr	r0, [pc, #172]	; (800a684 <tcp_create_segment+0x130>)
 800a5d6:	f004 fc71 	bl	800eebc <iprintf>
  seg->len = p->tot_len - optlen;
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	891a      	ldrh	r2, [r3, #8]
 800a5de:	7dfb      	ldrb	r3, [r7, #23]
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	1ad3      	subs	r3, r2, r3
 800a5e4:	b29a      	uxth	r2, r3
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800a5ea:	2114      	movs	r1, #20
 800a5ec:	68b8      	ldr	r0, [r7, #8]
 800a5ee:	f7fb fd29 	bl	8006044 <pbuf_add_header>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d004      	beq.n	800a602 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800a5f8:	6938      	ldr	r0, [r7, #16]
 800a5fa:	f7fd f8ce 	bl	800779a <tcp_seg_free>
    return NULL;
 800a5fe:	2300      	movs	r3, #0
 800a600:	e037      	b.n	800a672 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	685b      	ldr	r3, [r3, #4]
 800a606:	685a      	ldr	r2, [r3, #4]
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	8ada      	ldrh	r2, [r3, #22]
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	68dc      	ldr	r4, [r3, #12]
 800a614:	4610      	mov	r0, r2
 800a616:	f7fa fa4d 	bl	8004ab4 <lwip_htons>
 800a61a:	4603      	mov	r3, r0
 800a61c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	8b1a      	ldrh	r2, [r3, #24]
 800a622:	693b      	ldr	r3, [r7, #16]
 800a624:	68dc      	ldr	r4, [r3, #12]
 800a626:	4610      	mov	r0, r2
 800a628:	f7fa fa44 	bl	8004ab4 <lwip_htons>
 800a62c:	4603      	mov	r3, r0
 800a62e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	68dc      	ldr	r4, [r3, #12]
 800a634:	6838      	ldr	r0, [r7, #0]
 800a636:	f7fa fa52 	bl	8004ade <lwip_htonl>
 800a63a:	4603      	mov	r3, r0
 800a63c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800a63e:	7dfb      	ldrb	r3, [r7, #23]
 800a640:	089b      	lsrs	r3, r3, #2
 800a642:	b2db      	uxtb	r3, r3
 800a644:	b29b      	uxth	r3, r3
 800a646:	3305      	adds	r3, #5
 800a648:	b29b      	uxth	r3, r3
 800a64a:	031b      	lsls	r3, r3, #12
 800a64c:	b29a      	uxth	r2, r3
 800a64e:	79fb      	ldrb	r3, [r7, #7]
 800a650:	b29b      	uxth	r3, r3
 800a652:	4313      	orrs	r3, r2
 800a654:	b29a      	uxth	r2, r3
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	68dc      	ldr	r4, [r3, #12]
 800a65a:	4610      	mov	r0, r2
 800a65c:	f7fa fa2a 	bl	8004ab4 <lwip_htons>
 800a660:	4603      	mov	r3, r0
 800a662:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	68db      	ldr	r3, [r3, #12]
 800a668:	2200      	movs	r2, #0
 800a66a:	749a      	strb	r2, [r3, #18]
 800a66c:	2200      	movs	r2, #0
 800a66e:	74da      	strb	r2, [r3, #19]
  return seg;
 800a670:	693b      	ldr	r3, [r7, #16]
}
 800a672:	4618      	mov	r0, r3
 800a674:	371c      	adds	r7, #28
 800a676:	46bd      	mov	sp, r7
 800a678:	bd90      	pop	{r4, r7, pc}
 800a67a:	bf00      	nop
 800a67c:	08011780 	.word	0x08011780
 800a680:	080117b4 	.word	0x080117b4
 800a684:	080117d4 	.word	0x080117d4
 800a688:	080117fc 	.word	0x080117fc
 800a68c:	08011820 	.word	0x08011820

0800a690 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800a690:	b590      	push	{r4, r7, lr}
 800a692:	b08b      	sub	sp, #44	; 0x2c
 800a694:	af02      	add	r7, sp, #8
 800a696:	6078      	str	r0, [r7, #4]
 800a698:	460b      	mov	r3, r1
 800a69a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800a69c:	2300      	movs	r3, #0
 800a69e:	61fb      	str	r3, [r7, #28]
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d106      	bne.n	800a6bc <tcp_split_unsent_seg+0x2c>
 800a6ae:	4b95      	ldr	r3, [pc, #596]	; (800a904 <tcp_split_unsent_seg+0x274>)
 800a6b0:	f240 324b 	movw	r2, #843	; 0x34b
 800a6b4:	4994      	ldr	r1, [pc, #592]	; (800a908 <tcp_split_unsent_seg+0x278>)
 800a6b6:	4895      	ldr	r0, [pc, #596]	; (800a90c <tcp_split_unsent_seg+0x27c>)
 800a6b8:	f004 fc00 	bl	800eebc <iprintf>

  useg = pcb->unsent;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6c0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d102      	bne.n	800a6ce <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800a6c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a6cc:	e116      	b.n	800a8fc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800a6ce:	887b      	ldrh	r3, [r7, #2]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d109      	bne.n	800a6e8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800a6d4:	4b8b      	ldr	r3, [pc, #556]	; (800a904 <tcp_split_unsent_seg+0x274>)
 800a6d6:	f240 3253 	movw	r2, #851	; 0x353
 800a6da:	498d      	ldr	r1, [pc, #564]	; (800a910 <tcp_split_unsent_seg+0x280>)
 800a6dc:	488b      	ldr	r0, [pc, #556]	; (800a90c <tcp_split_unsent_seg+0x27c>)
 800a6de:	f004 fbed 	bl	800eebc <iprintf>
    return ERR_VAL;
 800a6e2:	f06f 0305 	mvn.w	r3, #5
 800a6e6:	e109      	b.n	800a8fc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	891b      	ldrh	r3, [r3, #8]
 800a6ec:	887a      	ldrh	r2, [r7, #2]
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	d301      	bcc.n	800a6f6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	e102      	b.n	800a8fc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a6fa:	887a      	ldrh	r2, [r7, #2]
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d906      	bls.n	800a70e <tcp_split_unsent_seg+0x7e>
 800a700:	4b80      	ldr	r3, [pc, #512]	; (800a904 <tcp_split_unsent_seg+0x274>)
 800a702:	f240 325b 	movw	r2, #859	; 0x35b
 800a706:	4983      	ldr	r1, [pc, #524]	; (800a914 <tcp_split_unsent_seg+0x284>)
 800a708:	4880      	ldr	r0, [pc, #512]	; (800a90c <tcp_split_unsent_seg+0x27c>)
 800a70a:	f004 fbd7 	bl	800eebc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	891b      	ldrh	r3, [r3, #8]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d106      	bne.n	800a724 <tcp_split_unsent_seg+0x94>
 800a716:	4b7b      	ldr	r3, [pc, #492]	; (800a904 <tcp_split_unsent_seg+0x274>)
 800a718:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800a71c:	497e      	ldr	r1, [pc, #504]	; (800a918 <tcp_split_unsent_seg+0x288>)
 800a71e:	487b      	ldr	r0, [pc, #492]	; (800a90c <tcp_split_unsent_seg+0x27c>)
 800a720:	f004 fbcc 	bl	800eebc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	7a9b      	ldrb	r3, [r3, #10]
 800a728:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a72a:	7bfb      	ldrb	r3, [r7, #15]
 800a72c:	009b      	lsls	r3, r3, #2
 800a72e:	b2db      	uxtb	r3, r3
 800a730:	f003 0304 	and.w	r3, r3, #4
 800a734:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	891a      	ldrh	r2, [r3, #8]
 800a73a:	887b      	ldrh	r3, [r7, #2]
 800a73c:	1ad3      	subs	r3, r2, r3
 800a73e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800a740:	7bbb      	ldrb	r3, [r7, #14]
 800a742:	b29a      	uxth	r2, r3
 800a744:	89bb      	ldrh	r3, [r7, #12]
 800a746:	4413      	add	r3, r2
 800a748:	b29b      	uxth	r3, r3
 800a74a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a74e:	4619      	mov	r1, r3
 800a750:	2036      	movs	r0, #54	; 0x36
 800a752:	f7fb fa29 	bl	8005ba8 <pbuf_alloc>
 800a756:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	f000 80b7 	beq.w	800a8ce <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800a760:	697b      	ldr	r3, [r7, #20]
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	891a      	ldrh	r2, [r3, #8]
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	891b      	ldrh	r3, [r3, #8]
 800a76a:	1ad3      	subs	r3, r2, r3
 800a76c:	b29a      	uxth	r2, r3
 800a76e:	887b      	ldrh	r3, [r7, #2]
 800a770:	4413      	add	r3, r2
 800a772:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	6858      	ldr	r0, [r3, #4]
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	685a      	ldr	r2, [r3, #4]
 800a77c:	7bbb      	ldrb	r3, [r7, #14]
 800a77e:	18d1      	adds	r1, r2, r3
 800a780:	897b      	ldrh	r3, [r7, #10]
 800a782:	89ba      	ldrh	r2, [r7, #12]
 800a784:	f7fb feee 	bl	8006564 <pbuf_copy_partial>
 800a788:	4603      	mov	r3, r0
 800a78a:	461a      	mov	r2, r3
 800a78c:	89bb      	ldrh	r3, [r7, #12]
 800a78e:	4293      	cmp	r3, r2
 800a790:	f040 809f 	bne.w	800a8d2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	68db      	ldr	r3, [r3, #12]
 800a798:	899b      	ldrh	r3, [r3, #12]
 800a79a:	b29b      	uxth	r3, r3
 800a79c:	4618      	mov	r0, r3
 800a79e:	f7fa f989 	bl	8004ab4 <lwip_htons>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	b2db      	uxtb	r3, r3
 800a7a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a7aa:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800a7b0:	7efb      	ldrb	r3, [r7, #27]
 800a7b2:	f003 0308 	and.w	r3, r3, #8
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d007      	beq.n	800a7ca <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800a7ba:	7efb      	ldrb	r3, [r7, #27]
 800a7bc:	f023 0308 	bic.w	r3, r3, #8
 800a7c0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800a7c2:	7ebb      	ldrb	r3, [r7, #26]
 800a7c4:	f043 0308 	orr.w	r3, r3, #8
 800a7c8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800a7ca:	7efb      	ldrb	r3, [r7, #27]
 800a7cc:	f003 0301 	and.w	r3, r3, #1
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d007      	beq.n	800a7e4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800a7d4:	7efb      	ldrb	r3, [r7, #27]
 800a7d6:	f023 0301 	bic.w	r3, r3, #1
 800a7da:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800a7dc:	7ebb      	ldrb	r3, [r7, #26]
 800a7de:	f043 0301 	orr.w	r3, r3, #1
 800a7e2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	68db      	ldr	r3, [r3, #12]
 800a7e8:	685b      	ldr	r3, [r3, #4]
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f7fa f977 	bl	8004ade <lwip_htonl>
 800a7f0:	4602      	mov	r2, r0
 800a7f2:	887b      	ldrh	r3, [r7, #2]
 800a7f4:	18d1      	adds	r1, r2, r3
 800a7f6:	7eba      	ldrb	r2, [r7, #26]
 800a7f8:	7bfb      	ldrb	r3, [r7, #15]
 800a7fa:	9300      	str	r3, [sp, #0]
 800a7fc:	460b      	mov	r3, r1
 800a7fe:	6939      	ldr	r1, [r7, #16]
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f7ff fea7 	bl	800a554 <tcp_create_segment>
 800a806:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800a808:	69fb      	ldr	r3, [r7, #28]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d063      	beq.n	800a8d6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	685b      	ldr	r3, [r3, #4]
 800a812:	4618      	mov	r0, r3
 800a814:	f7fb fd34 	bl	8006280 <pbuf_clen>
 800a818:	4603      	mov	r3, r0
 800a81a:	461a      	mov	r2, r3
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a822:	1a9b      	subs	r3, r3, r2
 800a824:	b29a      	uxth	r2, r3
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	6858      	ldr	r0, [r3, #4]
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	891a      	ldrh	r2, [r3, #8]
 800a836:	89bb      	ldrh	r3, [r7, #12]
 800a838:	1ad3      	subs	r3, r2, r3
 800a83a:	b29b      	uxth	r3, r3
 800a83c:	4619      	mov	r1, r3
 800a83e:	f7fb fb11 	bl	8005e64 <pbuf_realloc>
  useg->len -= remainder;
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	891a      	ldrh	r2, [r3, #8]
 800a846:	89bb      	ldrh	r3, [r7, #12]
 800a848:	1ad3      	subs	r3, r2, r3
 800a84a:	b29a      	uxth	r2, r3
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	68db      	ldr	r3, [r3, #12]
 800a854:	899b      	ldrh	r3, [r3, #12]
 800a856:	b29c      	uxth	r4, r3
 800a858:	7efb      	ldrb	r3, [r7, #27]
 800a85a:	b29b      	uxth	r3, r3
 800a85c:	4618      	mov	r0, r3
 800a85e:	f7fa f929 	bl	8004ab4 <lwip_htons>
 800a862:	4603      	mov	r3, r0
 800a864:	461a      	mov	r2, r3
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	68db      	ldr	r3, [r3, #12]
 800a86a:	4322      	orrs	r2, r4
 800a86c:	b292      	uxth	r2, r2
 800a86e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	685b      	ldr	r3, [r3, #4]
 800a874:	4618      	mov	r0, r3
 800a876:	f7fb fd03 	bl	8006280 <pbuf_clen>
 800a87a:	4603      	mov	r3, r0
 800a87c:	461a      	mov	r2, r3
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a884:	4413      	add	r3, r2
 800a886:	b29a      	uxth	r2, r3
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a88e:	69fb      	ldr	r3, [r7, #28]
 800a890:	685b      	ldr	r3, [r3, #4]
 800a892:	4618      	mov	r0, r3
 800a894:	f7fb fcf4 	bl	8006280 <pbuf_clen>
 800a898:	4603      	mov	r3, r0
 800a89a:	461a      	mov	r2, r3
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a8a2:	4413      	add	r3, r2
 800a8a4:	b29a      	uxth	r2, r3
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	681a      	ldr	r2, [r3, #0]
 800a8b0:	69fb      	ldr	r3, [r7, #28]
 800a8b2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	69fa      	ldr	r2, [r7, #28]
 800a8b8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800a8ba:	69fb      	ldr	r3, [r7, #28]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d103      	bne.n	800a8ca <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	e016      	b.n	800a8fc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800a8ce:	bf00      	nop
 800a8d0:	e002      	b.n	800a8d8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a8d2:	bf00      	nop
 800a8d4:	e000      	b.n	800a8d8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a8d6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800a8d8:	69fb      	ldr	r3, [r7, #28]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d006      	beq.n	800a8ec <tcp_split_unsent_seg+0x25c>
 800a8de:	4b09      	ldr	r3, [pc, #36]	; (800a904 <tcp_split_unsent_seg+0x274>)
 800a8e0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800a8e4:	490d      	ldr	r1, [pc, #52]	; (800a91c <tcp_split_unsent_seg+0x28c>)
 800a8e6:	4809      	ldr	r0, [pc, #36]	; (800a90c <tcp_split_unsent_seg+0x27c>)
 800a8e8:	f004 fae8 	bl	800eebc <iprintf>
  if (p != NULL) {
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d002      	beq.n	800a8f8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800a8f2:	6938      	ldr	r0, [r7, #16]
 800a8f4:	f7fb fc3c 	bl	8006170 <pbuf_free>
  }

  return ERR_MEM;
 800a8f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3724      	adds	r7, #36	; 0x24
 800a900:	46bd      	mov	sp, r7
 800a902:	bd90      	pop	{r4, r7, pc}
 800a904:	08011780 	.word	0x08011780
 800a908:	08011b14 	.word	0x08011b14
 800a90c:	080117d4 	.word	0x080117d4
 800a910:	08011b38 	.word	0x08011b38
 800a914:	08011b5c 	.word	0x08011b5c
 800a918:	08011b6c 	.word	0x08011b6c
 800a91c:	08011b7c 	.word	0x08011b7c

0800a920 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800a920:	b590      	push	{r4, r7, lr}
 800a922:	b085      	sub	sp, #20
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d106      	bne.n	800a93c <tcp_send_fin+0x1c>
 800a92e:	4b21      	ldr	r3, [pc, #132]	; (800a9b4 <tcp_send_fin+0x94>)
 800a930:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800a934:	4920      	ldr	r1, [pc, #128]	; (800a9b8 <tcp_send_fin+0x98>)
 800a936:	4821      	ldr	r0, [pc, #132]	; (800a9bc <tcp_send_fin+0x9c>)
 800a938:	f004 fac0 	bl	800eebc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a940:	2b00      	cmp	r3, #0
 800a942:	d02e      	beq.n	800a9a2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a948:	60fb      	str	r3, [r7, #12]
 800a94a:	e002      	b.n	800a952 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d1f8      	bne.n	800a94c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	68db      	ldr	r3, [r3, #12]
 800a95e:	899b      	ldrh	r3, [r3, #12]
 800a960:	b29b      	uxth	r3, r3
 800a962:	4618      	mov	r0, r3
 800a964:	f7fa f8a6 	bl	8004ab4 <lwip_htons>
 800a968:	4603      	mov	r3, r0
 800a96a:	b2db      	uxtb	r3, r3
 800a96c:	f003 0307 	and.w	r3, r3, #7
 800a970:	2b00      	cmp	r3, #0
 800a972:	d116      	bne.n	800a9a2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	68db      	ldr	r3, [r3, #12]
 800a978:	899b      	ldrh	r3, [r3, #12]
 800a97a:	b29c      	uxth	r4, r3
 800a97c:	2001      	movs	r0, #1
 800a97e:	f7fa f899 	bl	8004ab4 <lwip_htons>
 800a982:	4603      	mov	r3, r0
 800a984:	461a      	mov	r2, r3
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	68db      	ldr	r3, [r3, #12]
 800a98a:	4322      	orrs	r2, r4
 800a98c:	b292      	uxth	r2, r2
 800a98e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	8b5b      	ldrh	r3, [r3, #26]
 800a994:	f043 0320 	orr.w	r3, r3, #32
 800a998:	b29a      	uxth	r2, r3
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	e004      	b.n	800a9ac <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800a9a2:	2101      	movs	r1, #1
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f000 f80b 	bl	800a9c0 <tcp_enqueue_flags>
 800a9aa:	4603      	mov	r3, r0
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3714      	adds	r7, #20
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd90      	pop	{r4, r7, pc}
 800a9b4:	08011780 	.word	0x08011780
 800a9b8:	08011b88 	.word	0x08011b88
 800a9bc:	080117d4 	.word	0x080117d4

0800a9c0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b08a      	sub	sp, #40	; 0x28
 800a9c4:	af02      	add	r7, sp, #8
 800a9c6:	6078      	str	r0, [r7, #4]
 800a9c8:	460b      	mov	r3, r1
 800a9ca:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800a9d4:	78fb      	ldrb	r3, [r7, #3]
 800a9d6:	f003 0303 	and.w	r3, r3, #3
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d106      	bne.n	800a9ec <tcp_enqueue_flags+0x2c>
 800a9de:	4b67      	ldr	r3, [pc, #412]	; (800ab7c <tcp_enqueue_flags+0x1bc>)
 800a9e0:	f240 4211 	movw	r2, #1041	; 0x411
 800a9e4:	4966      	ldr	r1, [pc, #408]	; (800ab80 <tcp_enqueue_flags+0x1c0>)
 800a9e6:	4867      	ldr	r0, [pc, #412]	; (800ab84 <tcp_enqueue_flags+0x1c4>)
 800a9e8:	f004 fa68 	bl	800eebc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d106      	bne.n	800aa00 <tcp_enqueue_flags+0x40>
 800a9f2:	4b62      	ldr	r3, [pc, #392]	; (800ab7c <tcp_enqueue_flags+0x1bc>)
 800a9f4:	f240 4213 	movw	r2, #1043	; 0x413
 800a9f8:	4963      	ldr	r1, [pc, #396]	; (800ab88 <tcp_enqueue_flags+0x1c8>)
 800a9fa:	4862      	ldr	r0, [pc, #392]	; (800ab84 <tcp_enqueue_flags+0x1c4>)
 800a9fc:	f004 fa5e 	bl	800eebc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800aa00:	78fb      	ldrb	r3, [r7, #3]
 800aa02:	f003 0302 	and.w	r3, r3, #2
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d001      	beq.n	800aa0e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800aa0e:	7ffb      	ldrb	r3, [r7, #31]
 800aa10:	009b      	lsls	r3, r3, #2
 800aa12:	b2db      	uxtb	r3, r3
 800aa14:	f003 0304 	and.w	r3, r3, #4
 800aa18:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800aa1a:	7dfb      	ldrb	r3, [r7, #23]
 800aa1c:	b29b      	uxth	r3, r3
 800aa1e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800aa22:	4619      	mov	r1, r3
 800aa24:	2036      	movs	r0, #54	; 0x36
 800aa26:	f7fb f8bf 	bl	8005ba8 <pbuf_alloc>
 800aa2a:	6138      	str	r0, [r7, #16]
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d109      	bne.n	800aa46 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	8b5b      	ldrh	r3, [r3, #26]
 800aa36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa3a:	b29a      	uxth	r2, r3
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800aa40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa44:	e095      	b.n	800ab72 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	895a      	ldrh	r2, [r3, #10]
 800aa4a:	7dfb      	ldrb	r3, [r7, #23]
 800aa4c:	b29b      	uxth	r3, r3
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d206      	bcs.n	800aa60 <tcp_enqueue_flags+0xa0>
 800aa52:	4b4a      	ldr	r3, [pc, #296]	; (800ab7c <tcp_enqueue_flags+0x1bc>)
 800aa54:	f240 4239 	movw	r2, #1081	; 0x439
 800aa58:	494c      	ldr	r1, [pc, #304]	; (800ab8c <tcp_enqueue_flags+0x1cc>)
 800aa5a:	484a      	ldr	r0, [pc, #296]	; (800ab84 <tcp_enqueue_flags+0x1c4>)
 800aa5c:	f004 fa2e 	bl	800eebc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800aa64:	78fa      	ldrb	r2, [r7, #3]
 800aa66:	7ffb      	ldrb	r3, [r7, #31]
 800aa68:	9300      	str	r3, [sp, #0]
 800aa6a:	460b      	mov	r3, r1
 800aa6c:	6939      	ldr	r1, [r7, #16]
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f7ff fd70 	bl	800a554 <tcp_create_segment>
 800aa74:	60f8      	str	r0, [r7, #12]
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d109      	bne.n	800aa90 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	8b5b      	ldrh	r3, [r3, #26]
 800aa80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa84:	b29a      	uxth	r2, r3
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800aa8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa8e:	e070      	b.n	800ab72 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	68db      	ldr	r3, [r3, #12]
 800aa94:	f003 0303 	and.w	r3, r3, #3
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d006      	beq.n	800aaaa <tcp_enqueue_flags+0xea>
 800aa9c:	4b37      	ldr	r3, [pc, #220]	; (800ab7c <tcp_enqueue_flags+0x1bc>)
 800aa9e:	f240 4242 	movw	r2, #1090	; 0x442
 800aaa2:	493b      	ldr	r1, [pc, #236]	; (800ab90 <tcp_enqueue_flags+0x1d0>)
 800aaa4:	4837      	ldr	r0, [pc, #220]	; (800ab84 <tcp_enqueue_flags+0x1c4>)
 800aaa6:	f004 fa09 	bl	800eebc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	891b      	ldrh	r3, [r3, #8]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d006      	beq.n	800aac0 <tcp_enqueue_flags+0x100>
 800aab2:	4b32      	ldr	r3, [pc, #200]	; (800ab7c <tcp_enqueue_flags+0x1bc>)
 800aab4:	f240 4243 	movw	r2, #1091	; 0x443
 800aab8:	4936      	ldr	r1, [pc, #216]	; (800ab94 <tcp_enqueue_flags+0x1d4>)
 800aaba:	4832      	ldr	r0, [pc, #200]	; (800ab84 <tcp_enqueue_flags+0x1c4>)
 800aabc:	f004 f9fe 	bl	800eebc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d103      	bne.n	800aad0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	68fa      	ldr	r2, [r7, #12]
 800aacc:	66da      	str	r2, [r3, #108]	; 0x6c
 800aace:	e00d      	b.n	800aaec <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aad4:	61bb      	str	r3, [r7, #24]
 800aad6:	e002      	b.n	800aade <tcp_enqueue_flags+0x11e>
 800aad8:	69bb      	ldr	r3, [r7, #24]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	61bb      	str	r3, [r7, #24]
 800aade:	69bb      	ldr	r3, [r7, #24]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d1f8      	bne.n	800aad8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800aae6:	69bb      	ldr	r3, [r7, #24]
 800aae8:	68fa      	ldr	r2, [r7, #12]
 800aaea:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800aaf4:	78fb      	ldrb	r3, [r7, #3]
 800aaf6:	f003 0302 	and.w	r3, r3, #2
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d104      	bne.n	800ab08 <tcp_enqueue_flags+0x148>
 800aafe:	78fb      	ldrb	r3, [r7, #3]
 800ab00:	f003 0301 	and.w	r3, r3, #1
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d004      	beq.n	800ab12 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab0c:	1c5a      	adds	r2, r3, #1
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800ab12:	78fb      	ldrb	r3, [r7, #3]
 800ab14:	f003 0301 	and.w	r3, r3, #1
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d006      	beq.n	800ab2a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	8b5b      	ldrh	r3, [r3, #26]
 800ab20:	f043 0320 	orr.w	r3, r3, #32
 800ab24:	b29a      	uxth	r2, r3
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	685b      	ldr	r3, [r3, #4]
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f7fb fba6 	bl	8006280 <pbuf_clen>
 800ab34:	4603      	mov	r3, r0
 800ab36:	461a      	mov	r2, r3
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ab3e:	4413      	add	r3, r2
 800ab40:	b29a      	uxth	r2, r3
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d00e      	beq.n	800ab70 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d10a      	bne.n	800ab70 <tcp_enqueue_flags+0x1b0>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d106      	bne.n	800ab70 <tcp_enqueue_flags+0x1b0>
 800ab62:	4b06      	ldr	r3, [pc, #24]	; (800ab7c <tcp_enqueue_flags+0x1bc>)
 800ab64:	f240 4265 	movw	r2, #1125	; 0x465
 800ab68:	490b      	ldr	r1, [pc, #44]	; (800ab98 <tcp_enqueue_flags+0x1d8>)
 800ab6a:	4806      	ldr	r0, [pc, #24]	; (800ab84 <tcp_enqueue_flags+0x1c4>)
 800ab6c:	f004 f9a6 	bl	800eebc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800ab70:	2300      	movs	r3, #0
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3720      	adds	r7, #32
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
 800ab7a:	bf00      	nop
 800ab7c:	08011780 	.word	0x08011780
 800ab80:	08011ba4 	.word	0x08011ba4
 800ab84:	080117d4 	.word	0x080117d4
 800ab88:	08011bfc 	.word	0x08011bfc
 800ab8c:	08011c1c 	.word	0x08011c1c
 800ab90:	08011c58 	.word	0x08011c58
 800ab94:	08011c70 	.word	0x08011c70
 800ab98:	08011c9c 	.word	0x08011c9c

0800ab9c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800ab9c:	b5b0      	push	{r4, r5, r7, lr}
 800ab9e:	b08a      	sub	sp, #40	; 0x28
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d106      	bne.n	800abb8 <tcp_output+0x1c>
 800abaa:	4b8a      	ldr	r3, [pc, #552]	; (800add4 <tcp_output+0x238>)
 800abac:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800abb0:	4989      	ldr	r1, [pc, #548]	; (800add8 <tcp_output+0x23c>)
 800abb2:	488a      	ldr	r0, [pc, #552]	; (800addc <tcp_output+0x240>)
 800abb4:	f004 f982 	bl	800eebc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	7d1b      	ldrb	r3, [r3, #20]
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	d106      	bne.n	800abce <tcp_output+0x32>
 800abc0:	4b84      	ldr	r3, [pc, #528]	; (800add4 <tcp_output+0x238>)
 800abc2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800abc6:	4986      	ldr	r1, [pc, #536]	; (800ade0 <tcp_output+0x244>)
 800abc8:	4884      	ldr	r0, [pc, #528]	; (800addc <tcp_output+0x240>)
 800abca:	f004 f977 	bl	800eebc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800abce:	4b85      	ldr	r3, [pc, #532]	; (800ade4 <tcp_output+0x248>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	687a      	ldr	r2, [r7, #4]
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d101      	bne.n	800abdc <tcp_output+0x40>
    return ERR_OK;
 800abd8:	2300      	movs	r3, #0
 800abda:	e1ce      	b.n	800af7a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800abe8:	4293      	cmp	r3, r2
 800abea:	bf28      	it	cs
 800abec:	4613      	movcs	r3, r2
 800abee:	b29b      	uxth	r3, r3
 800abf0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abf6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800abf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d10b      	bne.n	800ac16 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	8b5b      	ldrh	r3, [r3, #26]
 800ac02:	f003 0302 	and.w	r3, r3, #2
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	f000 81aa 	beq.w	800af60 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f000 fdcb 	bl	800b7a8 <tcp_send_empty_ack>
 800ac12:	4603      	mov	r3, r0
 800ac14:	e1b1      	b.n	800af7a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800ac16:	6879      	ldr	r1, [r7, #4]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	3304      	adds	r3, #4
 800ac1c:	461a      	mov	r2, r3
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f7ff fc7c 	bl	800a51c <tcp_route>
 800ac24:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d102      	bne.n	800ac32 <tcp_output+0x96>
    return ERR_RTE;
 800ac2c:	f06f 0303 	mvn.w	r3, #3
 800ac30:	e1a3      	b.n	800af7a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d003      	beq.n	800ac40 <tcp_output+0xa4>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d111      	bne.n	800ac64 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d002      	beq.n	800ac4c <tcp_output+0xb0>
 800ac46:	697b      	ldr	r3, [r7, #20]
 800ac48:	3304      	adds	r3, #4
 800ac4a:	e000      	b.n	800ac4e <tcp_output+0xb2>
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d102      	bne.n	800ac5c <tcp_output+0xc0>
      return ERR_RTE;
 800ac56:	f06f 0303 	mvn.w	r3, #3
 800ac5a:	e18e      	b.n	800af7a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ac5c:	693b      	ldr	r3, [r7, #16]
 800ac5e:	681a      	ldr	r2, [r3, #0]
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800ac64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac66:	68db      	ldr	r3, [r3, #12]
 800ac68:	685b      	ldr	r3, [r3, #4]
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f7f9 ff37 	bl	8004ade <lwip_htonl>
 800ac70:	4602      	mov	r2, r0
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac76:	1ad3      	subs	r3, r2, r3
 800ac78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac7a:	8912      	ldrh	r2, [r2, #8]
 800ac7c:	4413      	add	r3, r2
 800ac7e:	69ba      	ldr	r2, [r7, #24]
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d227      	bcs.n	800acd4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	69bb      	ldr	r3, [r7, #24]
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d114      	bne.n	800acbc <tcp_output+0x120>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d110      	bne.n	800acbc <tcp_output+0x120>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d10b      	bne.n	800acbc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2200      	movs	r2, #0
 800aca8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2201      	movs	r2, #1
 800acb0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2200      	movs	r2, #0
 800acb8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	8b5b      	ldrh	r3, [r3, #26]
 800acc0:	f003 0302 	and.w	r3, r3, #2
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	f000 814d 	beq.w	800af64 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f000 fd6c 	bl	800b7a8 <tcp_send_empty_ack>
 800acd0:	4603      	mov	r3, r0
 800acd2:	e152      	b.n	800af7a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2200      	movs	r2, #0
 800acd8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ace0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800ace2:	6a3b      	ldr	r3, [r7, #32]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	f000 811c 	beq.w	800af22 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800acea:	e002      	b.n	800acf2 <tcp_output+0x156>
 800acec:	6a3b      	ldr	r3, [r7, #32]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	623b      	str	r3, [r7, #32]
 800acf2:	6a3b      	ldr	r3, [r7, #32]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d1f8      	bne.n	800acec <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800acfa:	e112      	b.n	800af22 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800acfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acfe:	68db      	ldr	r3, [r3, #12]
 800ad00:	899b      	ldrh	r3, [r3, #12]
 800ad02:	b29b      	uxth	r3, r3
 800ad04:	4618      	mov	r0, r3
 800ad06:	f7f9 fed5 	bl	8004ab4 <lwip_htons>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	b2db      	uxtb	r3, r3
 800ad0e:	f003 0304 	and.w	r3, r3, #4
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d006      	beq.n	800ad24 <tcp_output+0x188>
 800ad16:	4b2f      	ldr	r3, [pc, #188]	; (800add4 <tcp_output+0x238>)
 800ad18:	f240 5236 	movw	r2, #1334	; 0x536
 800ad1c:	4932      	ldr	r1, [pc, #200]	; (800ade8 <tcp_output+0x24c>)
 800ad1e:	482f      	ldr	r0, [pc, #188]	; (800addc <tcp_output+0x240>)
 800ad20:	f004 f8cc 	bl	800eebc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d01f      	beq.n	800ad6c <tcp_output+0x1d0>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	8b5b      	ldrh	r3, [r3, #26]
 800ad30:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d119      	bne.n	800ad6c <tcp_output+0x1d0>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d00b      	beq.n	800ad58 <tcp_output+0x1bc>
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d110      	bne.n	800ad6c <tcp_output+0x1d0>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad4e:	891a      	ldrh	r2, [r3, #8]
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ad54:	429a      	cmp	r2, r3
 800ad56:	d209      	bcs.n	800ad6c <tcp_output+0x1d0>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d004      	beq.n	800ad6c <tcp_output+0x1d0>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ad68:	2b08      	cmp	r3, #8
 800ad6a:	d901      	bls.n	800ad70 <tcp_output+0x1d4>
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	e000      	b.n	800ad72 <tcp_output+0x1d6>
 800ad70:	2300      	movs	r3, #0
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d106      	bne.n	800ad84 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	8b5b      	ldrh	r3, [r3, #26]
 800ad7a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	f000 80e4 	beq.w	800af4c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	7d1b      	ldrb	r3, [r3, #20]
 800ad88:	2b02      	cmp	r3, #2
 800ad8a:	d00d      	beq.n	800ada8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800ad8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad8e:	68db      	ldr	r3, [r3, #12]
 800ad90:	899b      	ldrh	r3, [r3, #12]
 800ad92:	b29c      	uxth	r4, r3
 800ad94:	2010      	movs	r0, #16
 800ad96:	f7f9 fe8d 	bl	8004ab4 <lwip_htons>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	461a      	mov	r2, r3
 800ad9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada0:	68db      	ldr	r3, [r3, #12]
 800ada2:	4322      	orrs	r2, r4
 800ada4:	b292      	uxth	r2, r2
 800ada6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800ada8:	697a      	ldr	r2, [r7, #20]
 800adaa:	6879      	ldr	r1, [r7, #4]
 800adac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800adae:	f000 f909 	bl	800afc4 <tcp_output_segment>
 800adb2:	4603      	mov	r3, r0
 800adb4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800adb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d016      	beq.n	800adec <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	8b5b      	ldrh	r3, [r3, #26]
 800adc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adc6:	b29a      	uxth	r2, r3
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	835a      	strh	r2, [r3, #26]
      return err;
 800adcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800add0:	e0d3      	b.n	800af7a <tcp_output+0x3de>
 800add2:	bf00      	nop
 800add4:	08011780 	.word	0x08011780
 800add8:	08011cc4 	.word	0x08011cc4
 800addc:	080117d4 	.word	0x080117d4
 800ade0:	08011cdc 	.word	0x08011cdc
 800ade4:	2000a500 	.word	0x2000a500
 800ade8:	08011d04 	.word	0x08011d04
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800adec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adee:	681a      	ldr	r2, [r3, #0]
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	7d1b      	ldrb	r3, [r3, #20]
 800adf8:	2b02      	cmp	r3, #2
 800adfa:	d006      	beq.n	800ae0a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	8b5b      	ldrh	r3, [r3, #26]
 800ae00:	f023 0303 	bic.w	r3, r3, #3
 800ae04:	b29a      	uxth	r2, r3
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ae0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae0c:	68db      	ldr	r3, [r3, #12]
 800ae0e:	685b      	ldr	r3, [r3, #4]
 800ae10:	4618      	mov	r0, r3
 800ae12:	f7f9 fe64 	bl	8004ade <lwip_htonl>
 800ae16:	4604      	mov	r4, r0
 800ae18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae1a:	891b      	ldrh	r3, [r3, #8]
 800ae1c:	461d      	mov	r5, r3
 800ae1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae20:	68db      	ldr	r3, [r3, #12]
 800ae22:	899b      	ldrh	r3, [r3, #12]
 800ae24:	b29b      	uxth	r3, r3
 800ae26:	4618      	mov	r0, r3
 800ae28:	f7f9 fe44 	bl	8004ab4 <lwip_htons>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	b2db      	uxtb	r3, r3
 800ae30:	f003 0303 	and.w	r3, r3, #3
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d001      	beq.n	800ae3c <tcp_output+0x2a0>
 800ae38:	2301      	movs	r3, #1
 800ae3a:	e000      	b.n	800ae3e <tcp_output+0x2a2>
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	442b      	add	r3, r5
 800ae40:	4423      	add	r3, r4
 800ae42:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	1ad3      	subs	r3, r2, r3
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	da02      	bge.n	800ae56 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	68ba      	ldr	r2, [r7, #8]
 800ae54:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800ae56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae58:	891b      	ldrh	r3, [r3, #8]
 800ae5a:	461c      	mov	r4, r3
 800ae5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae5e:	68db      	ldr	r3, [r3, #12]
 800ae60:	899b      	ldrh	r3, [r3, #12]
 800ae62:	b29b      	uxth	r3, r3
 800ae64:	4618      	mov	r0, r3
 800ae66:	f7f9 fe25 	bl	8004ab4 <lwip_htons>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	b2db      	uxtb	r3, r3
 800ae6e:	f003 0303 	and.w	r3, r3, #3
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d001      	beq.n	800ae7a <tcp_output+0x2de>
 800ae76:	2301      	movs	r3, #1
 800ae78:	e000      	b.n	800ae7c <tcp_output+0x2e0>
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	4423      	add	r3, r4
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d049      	beq.n	800af16 <tcp_output+0x37a>
      seg->next = NULL;
 800ae82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae84:	2200      	movs	r2, #0
 800ae86:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d105      	bne.n	800ae9c <tcp_output+0x300>
        pcb->unacked = seg;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae94:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800ae96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae98:	623b      	str	r3, [r7, #32]
 800ae9a:	e03f      	b.n	800af1c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800ae9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae9e:	68db      	ldr	r3, [r3, #12]
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	4618      	mov	r0, r3
 800aea4:	f7f9 fe1b 	bl	8004ade <lwip_htonl>
 800aea8:	4604      	mov	r4, r0
 800aeaa:	6a3b      	ldr	r3, [r7, #32]
 800aeac:	68db      	ldr	r3, [r3, #12]
 800aeae:	685b      	ldr	r3, [r3, #4]
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f7f9 fe14 	bl	8004ade <lwip_htonl>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	1ae3      	subs	r3, r4, r3
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	da24      	bge.n	800af08 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	3370      	adds	r3, #112	; 0x70
 800aec2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800aec4:	e002      	b.n	800aecc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800aec6:	69fb      	ldr	r3, [r7, #28]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800aecc:	69fb      	ldr	r3, [r7, #28]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d011      	beq.n	800aef8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800aed4:	69fb      	ldr	r3, [r7, #28]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	68db      	ldr	r3, [r3, #12]
 800aeda:	685b      	ldr	r3, [r3, #4]
 800aedc:	4618      	mov	r0, r3
 800aede:	f7f9 fdfe 	bl	8004ade <lwip_htonl>
 800aee2:	4604      	mov	r4, r0
 800aee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee6:	68db      	ldr	r3, [r3, #12]
 800aee8:	685b      	ldr	r3, [r3, #4]
 800aeea:	4618      	mov	r0, r3
 800aeec:	f7f9 fdf7 	bl	8004ade <lwip_htonl>
 800aef0:	4603      	mov	r3, r0
 800aef2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	dbe6      	blt.n	800aec6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800aef8:	69fb      	ldr	r3, [r7, #28]
 800aefa:	681a      	ldr	r2, [r3, #0]
 800aefc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aefe:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800af00:	69fb      	ldr	r3, [r7, #28]
 800af02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af04:	601a      	str	r2, [r3, #0]
 800af06:	e009      	b.n	800af1c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800af08:	6a3b      	ldr	r3, [r7, #32]
 800af0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af0c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800af0e:	6a3b      	ldr	r3, [r7, #32]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	623b      	str	r3, [r7, #32]
 800af14:	e002      	b.n	800af1c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800af16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800af18:	f7fc fc3f 	bl	800779a <tcp_seg_free>
    }
    seg = pcb->unsent;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af20:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800af22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af24:	2b00      	cmp	r3, #0
 800af26:	d012      	beq.n	800af4e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800af28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af2a:	68db      	ldr	r3, [r3, #12]
 800af2c:	685b      	ldr	r3, [r3, #4]
 800af2e:	4618      	mov	r0, r3
 800af30:	f7f9 fdd5 	bl	8004ade <lwip_htonl>
 800af34:	4602      	mov	r2, r0
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af3a:	1ad3      	subs	r3, r2, r3
 800af3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af3e:	8912      	ldrh	r2, [r2, #8]
 800af40:	4413      	add	r3, r2
  while (seg != NULL &&
 800af42:	69ba      	ldr	r2, [r7, #24]
 800af44:	429a      	cmp	r2, r3
 800af46:	f4bf aed9 	bcs.w	800acfc <tcp_output+0x160>
 800af4a:	e000      	b.n	800af4e <tcp_output+0x3b2>
      break;
 800af4c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af52:	2b00      	cmp	r3, #0
 800af54:	d108      	bne.n	800af68 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2200      	movs	r2, #0
 800af5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800af5e:	e004      	b.n	800af6a <tcp_output+0x3ce>
    goto output_done;
 800af60:	bf00      	nop
 800af62:	e002      	b.n	800af6a <tcp_output+0x3ce>
    goto output_done;
 800af64:	bf00      	nop
 800af66:	e000      	b.n	800af6a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800af68:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	8b5b      	ldrh	r3, [r3, #26]
 800af6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af72:	b29a      	uxth	r2, r3
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800af78:	2300      	movs	r3, #0
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3728      	adds	r7, #40	; 0x28
 800af7e:	46bd      	mov	sp, r7
 800af80:	bdb0      	pop	{r4, r5, r7, pc}
 800af82:	bf00      	nop

0800af84 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b082      	sub	sp, #8
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d106      	bne.n	800afa0 <tcp_output_segment_busy+0x1c>
 800af92:	4b09      	ldr	r3, [pc, #36]	; (800afb8 <tcp_output_segment_busy+0x34>)
 800af94:	f240 529a 	movw	r2, #1434	; 0x59a
 800af98:	4908      	ldr	r1, [pc, #32]	; (800afbc <tcp_output_segment_busy+0x38>)
 800af9a:	4809      	ldr	r0, [pc, #36]	; (800afc0 <tcp_output_segment_busy+0x3c>)
 800af9c:	f003 ff8e 	bl	800eebc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	7b9b      	ldrb	r3, [r3, #14]
 800afa6:	2b01      	cmp	r3, #1
 800afa8:	d001      	beq.n	800afae <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800afaa:	2301      	movs	r3, #1
 800afac:	e000      	b.n	800afb0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800afae:	2300      	movs	r3, #0
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3708      	adds	r7, #8
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}
 800afb8:	08011780 	.word	0x08011780
 800afbc:	08011d1c 	.word	0x08011d1c
 800afc0:	080117d4 	.word	0x080117d4

0800afc4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800afc4:	b5b0      	push	{r4, r5, r7, lr}
 800afc6:	b08c      	sub	sp, #48	; 0x30
 800afc8:	af04      	add	r7, sp, #16
 800afca:	60f8      	str	r0, [r7, #12]
 800afcc:	60b9      	str	r1, [r7, #8]
 800afce:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d106      	bne.n	800afe4 <tcp_output_segment+0x20>
 800afd6:	4b64      	ldr	r3, [pc, #400]	; (800b168 <tcp_output_segment+0x1a4>)
 800afd8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800afdc:	4963      	ldr	r1, [pc, #396]	; (800b16c <tcp_output_segment+0x1a8>)
 800afde:	4864      	ldr	r0, [pc, #400]	; (800b170 <tcp_output_segment+0x1ac>)
 800afe0:	f003 ff6c 	bl	800eebc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d106      	bne.n	800aff8 <tcp_output_segment+0x34>
 800afea:	4b5f      	ldr	r3, [pc, #380]	; (800b168 <tcp_output_segment+0x1a4>)
 800afec:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800aff0:	4960      	ldr	r1, [pc, #384]	; (800b174 <tcp_output_segment+0x1b0>)
 800aff2:	485f      	ldr	r0, [pc, #380]	; (800b170 <tcp_output_segment+0x1ac>)
 800aff4:	f003 ff62 	bl	800eebc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d106      	bne.n	800b00c <tcp_output_segment+0x48>
 800affe:	4b5a      	ldr	r3, [pc, #360]	; (800b168 <tcp_output_segment+0x1a4>)
 800b000:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800b004:	495c      	ldr	r1, [pc, #368]	; (800b178 <tcp_output_segment+0x1b4>)
 800b006:	485a      	ldr	r0, [pc, #360]	; (800b170 <tcp_output_segment+0x1ac>)
 800b008:	f003 ff58 	bl	800eebc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800b00c:	68f8      	ldr	r0, [r7, #12]
 800b00e:	f7ff ffb9 	bl	800af84 <tcp_output_segment_busy>
 800b012:	4603      	mov	r3, r0
 800b014:	2b00      	cmp	r3, #0
 800b016:	d001      	beq.n	800b01c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800b018:	2300      	movs	r3, #0
 800b01a:	e0a1      	b.n	800b160 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	68dc      	ldr	r4, [r3, #12]
 800b024:	4610      	mov	r0, r2
 800b026:	f7f9 fd5a 	bl	8004ade <lwip_htonl>
 800b02a:	4603      	mov	r3, r0
 800b02c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	68dc      	ldr	r4, [r3, #12]
 800b036:	4610      	mov	r0, r2
 800b038:	f7f9 fd3c 	bl	8004ab4 <lwip_htons>
 800b03c:	4603      	mov	r3, r0
 800b03e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b044:	68ba      	ldr	r2, [r7, #8]
 800b046:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b048:	441a      	add	r2, r3
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	68db      	ldr	r3, [r3, #12]
 800b052:	3314      	adds	r3, #20
 800b054:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	7a9b      	ldrb	r3, [r3, #10]
 800b05a:	f003 0301 	and.w	r3, r3, #1
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d015      	beq.n	800b08e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	3304      	adds	r3, #4
 800b066:	461a      	mov	r2, r3
 800b068:	6879      	ldr	r1, [r7, #4]
 800b06a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800b06e:	f7fc fe8b 	bl	8007d88 <tcp_eff_send_mss_netif>
 800b072:	4603      	mov	r3, r0
 800b074:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800b076:	8b7b      	ldrh	r3, [r7, #26]
 800b078:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800b07c:	4618      	mov	r0, r3
 800b07e:	f7f9 fd2e 	bl	8004ade <lwip_htonl>
 800b082:	4602      	mov	r2, r0
 800b084:	69fb      	ldr	r3, [r7, #28]
 800b086:	601a      	str	r2, [r3, #0]
    opts += 1;
 800b088:	69fb      	ldr	r3, [r7, #28]
 800b08a:	3304      	adds	r3, #4
 800b08c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b094:	2b00      	cmp	r3, #0
 800b096:	da02      	bge.n	800b09e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	2200      	movs	r2, #0
 800b09c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d10c      	bne.n	800b0c0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800b0a6:	4b35      	ldr	r3, [pc, #212]	; (800b17c <tcp_output_segment+0x1b8>)
 800b0a8:	681a      	ldr	r2, [r3, #0]
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	68db      	ldr	r3, [r3, #12]
 800b0b2:	685b      	ldr	r3, [r3, #4]
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f7f9 fd12 	bl	8004ade <lwip_htonl>
 800b0ba:	4602      	mov	r2, r0
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	68da      	ldr	r2, [r3, #12]
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	685b      	ldr	r3, [r3, #4]
 800b0c8:	685b      	ldr	r3, [r3, #4]
 800b0ca:	1ad3      	subs	r3, r2, r3
 800b0cc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	685b      	ldr	r3, [r3, #4]
 800b0d2:	8959      	ldrh	r1, [r3, #10]
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	8b3a      	ldrh	r2, [r7, #24]
 800b0da:	1a8a      	subs	r2, r1, r2
 800b0dc:	b292      	uxth	r2, r2
 800b0de:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	685b      	ldr	r3, [r3, #4]
 800b0e4:	8919      	ldrh	r1, [r3, #8]
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	685b      	ldr	r3, [r3, #4]
 800b0ea:	8b3a      	ldrh	r2, [r7, #24]
 800b0ec:	1a8a      	subs	r2, r1, r2
 800b0ee:	b292      	uxth	r2, r2
 800b0f0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	68fa      	ldr	r2, [r7, #12]
 800b0f8:	68d2      	ldr	r2, [r2, #12]
 800b0fa:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	68db      	ldr	r3, [r3, #12]
 800b100:	2200      	movs	r2, #0
 800b102:	741a      	strb	r2, [r3, #16]
 800b104:	2200      	movs	r2, #0
 800b106:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	68da      	ldr	r2, [r3, #12]
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	7a9b      	ldrb	r3, [r3, #10]
 800b110:	f003 0301 	and.w	r3, r3, #1
 800b114:	2b00      	cmp	r3, #0
 800b116:	d001      	beq.n	800b11c <tcp_output_segment+0x158>
 800b118:	2318      	movs	r3, #24
 800b11a:	e000      	b.n	800b11e <tcp_output_segment+0x15a>
 800b11c:	2314      	movs	r3, #20
 800b11e:	4413      	add	r3, r2
 800b120:	69fa      	ldr	r2, [r7, #28]
 800b122:	429a      	cmp	r2, r3
 800b124:	d006      	beq.n	800b134 <tcp_output_segment+0x170>
 800b126:	4b10      	ldr	r3, [pc, #64]	; (800b168 <tcp_output_segment+0x1a4>)
 800b128:	f240 621c 	movw	r2, #1564	; 0x61c
 800b12c:	4914      	ldr	r1, [pc, #80]	; (800b180 <tcp_output_segment+0x1bc>)
 800b12e:	4810      	ldr	r0, [pc, #64]	; (800b170 <tcp_output_segment+0x1ac>)
 800b130:	f003 fec4 	bl	800eebc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	6858      	ldr	r0, [r3, #4]
 800b138:	68b9      	ldr	r1, [r7, #8]
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	1d1c      	adds	r4, r3, #4
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	7add      	ldrb	r5, [r3, #11]
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	7a9b      	ldrb	r3, [r3, #10]
 800b146:	687a      	ldr	r2, [r7, #4]
 800b148:	9202      	str	r2, [sp, #8]
 800b14a:	2206      	movs	r2, #6
 800b14c:	9201      	str	r2, [sp, #4]
 800b14e:	9300      	str	r3, [sp, #0]
 800b150:	462b      	mov	r3, r5
 800b152:	4622      	mov	r2, r4
 800b154:	f002 fd84 	bl	800dc60 <ip4_output_if>
 800b158:	4603      	mov	r3, r0
 800b15a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800b15c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b160:	4618      	mov	r0, r3
 800b162:	3720      	adds	r7, #32
 800b164:	46bd      	mov	sp, r7
 800b166:	bdb0      	pop	{r4, r5, r7, pc}
 800b168:	08011780 	.word	0x08011780
 800b16c:	08011d44 	.word	0x08011d44
 800b170:	080117d4 	.word	0x080117d4
 800b174:	08011d64 	.word	0x08011d64
 800b178:	08011d84 	.word	0x08011d84
 800b17c:	2000a4b4 	.word	0x2000a4b4
 800b180:	08011da8 	.word	0x08011da8

0800b184 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800b184:	b5b0      	push	{r4, r5, r7, lr}
 800b186:	b084      	sub	sp, #16
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d106      	bne.n	800b1a0 <tcp_rexmit_rto_prepare+0x1c>
 800b192:	4b31      	ldr	r3, [pc, #196]	; (800b258 <tcp_rexmit_rto_prepare+0xd4>)
 800b194:	f240 6263 	movw	r2, #1635	; 0x663
 800b198:	4930      	ldr	r1, [pc, #192]	; (800b25c <tcp_rexmit_rto_prepare+0xd8>)
 800b19a:	4831      	ldr	r0, [pc, #196]	; (800b260 <tcp_rexmit_rto_prepare+0xdc>)
 800b19c:	f003 fe8e 	bl	800eebc <iprintf>

  if (pcb->unacked == NULL) {
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d102      	bne.n	800b1ae <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800b1a8:	f06f 0305 	mvn.w	r3, #5
 800b1ac:	e050      	b.n	800b250 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1b2:	60fb      	str	r3, [r7, #12]
 800b1b4:	e00b      	b.n	800b1ce <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800b1b6:	68f8      	ldr	r0, [r7, #12]
 800b1b8:	f7ff fee4 	bl	800af84 <tcp_output_segment_busy>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d002      	beq.n	800b1c8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800b1c2:	f06f 0305 	mvn.w	r3, #5
 800b1c6:	e043      	b.n	800b250 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	60fb      	str	r3, [r7, #12]
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d1ef      	bne.n	800b1b6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800b1d6:	68f8      	ldr	r0, [r7, #12]
 800b1d8:	f7ff fed4 	bl	800af84 <tcp_output_segment_busy>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d002      	beq.n	800b1e8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800b1e2:	f06f 0305 	mvn.w	r3, #5
 800b1e6:	e033      	b.n	800b250 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	8b5b      	ldrh	r3, [r3, #26]
 800b202:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b206:	b29a      	uxth	r2, r3
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	68db      	ldr	r3, [r3, #12]
 800b210:	685b      	ldr	r3, [r3, #4]
 800b212:	4618      	mov	r0, r3
 800b214:	f7f9 fc63 	bl	8004ade <lwip_htonl>
 800b218:	4604      	mov	r4, r0
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	891b      	ldrh	r3, [r3, #8]
 800b21e:	461d      	mov	r5, r3
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	68db      	ldr	r3, [r3, #12]
 800b224:	899b      	ldrh	r3, [r3, #12]
 800b226:	b29b      	uxth	r3, r3
 800b228:	4618      	mov	r0, r3
 800b22a:	f7f9 fc43 	bl	8004ab4 <lwip_htons>
 800b22e:	4603      	mov	r3, r0
 800b230:	b2db      	uxtb	r3, r3
 800b232:	f003 0303 	and.w	r3, r3, #3
 800b236:	2b00      	cmp	r3, #0
 800b238:	d001      	beq.n	800b23e <tcp_rexmit_rto_prepare+0xba>
 800b23a:	2301      	movs	r3, #1
 800b23c:	e000      	b.n	800b240 <tcp_rexmit_rto_prepare+0xbc>
 800b23e:	2300      	movs	r3, #0
 800b240:	442b      	add	r3, r5
 800b242:	18e2      	adds	r2, r4, r3
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2200      	movs	r2, #0
 800b24c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800b24e:	2300      	movs	r3, #0
}
 800b250:	4618      	mov	r0, r3
 800b252:	3710      	adds	r7, #16
 800b254:	46bd      	mov	sp, r7
 800b256:	bdb0      	pop	{r4, r5, r7, pc}
 800b258:	08011780 	.word	0x08011780
 800b25c:	08011dbc 	.word	0x08011dbc
 800b260:	080117d4 	.word	0x080117d4

0800b264 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b082      	sub	sp, #8
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d106      	bne.n	800b280 <tcp_rexmit_rto_commit+0x1c>
 800b272:	4b0d      	ldr	r3, [pc, #52]	; (800b2a8 <tcp_rexmit_rto_commit+0x44>)
 800b274:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b278:	490c      	ldr	r1, [pc, #48]	; (800b2ac <tcp_rexmit_rto_commit+0x48>)
 800b27a:	480d      	ldr	r0, [pc, #52]	; (800b2b0 <tcp_rexmit_rto_commit+0x4c>)
 800b27c:	f003 fe1e 	bl	800eebc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b286:	2bff      	cmp	r3, #255	; 0xff
 800b288:	d007      	beq.n	800b29a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b290:	3301      	adds	r3, #1
 800b292:	b2da      	uxtb	r2, r3
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f7ff fc7e 	bl	800ab9c <tcp_output>
}
 800b2a0:	bf00      	nop
 800b2a2:	3708      	adds	r7, #8
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd80      	pop	{r7, pc}
 800b2a8:	08011780 	.word	0x08011780
 800b2ac:	08011de0 	.word	0x08011de0
 800b2b0:	080117d4 	.word	0x080117d4

0800b2b4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b082      	sub	sp, #8
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d106      	bne.n	800b2d0 <tcp_rexmit_rto+0x1c>
 800b2c2:	4b0a      	ldr	r3, [pc, #40]	; (800b2ec <tcp_rexmit_rto+0x38>)
 800b2c4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800b2c8:	4909      	ldr	r1, [pc, #36]	; (800b2f0 <tcp_rexmit_rto+0x3c>)
 800b2ca:	480a      	ldr	r0, [pc, #40]	; (800b2f4 <tcp_rexmit_rto+0x40>)
 800b2cc:	f003 fdf6 	bl	800eebc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f7ff ff57 	bl	800b184 <tcp_rexmit_rto_prepare>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d102      	bne.n	800b2e2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f7ff ffc1 	bl	800b264 <tcp_rexmit_rto_commit>
  }
}
 800b2e2:	bf00      	nop
 800b2e4:	3708      	adds	r7, #8
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}
 800b2ea:	bf00      	nop
 800b2ec:	08011780 	.word	0x08011780
 800b2f0:	08011e04 	.word	0x08011e04
 800b2f4:	080117d4 	.word	0x080117d4

0800b2f8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800b2f8:	b590      	push	{r4, r7, lr}
 800b2fa:	b085      	sub	sp, #20
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d106      	bne.n	800b314 <tcp_rexmit+0x1c>
 800b306:	4b2f      	ldr	r3, [pc, #188]	; (800b3c4 <tcp_rexmit+0xcc>)
 800b308:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800b30c:	492e      	ldr	r1, [pc, #184]	; (800b3c8 <tcp_rexmit+0xd0>)
 800b30e:	482f      	ldr	r0, [pc, #188]	; (800b3cc <tcp_rexmit+0xd4>)
 800b310:	f003 fdd4 	bl	800eebc <iprintf>

  if (pcb->unacked == NULL) {
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d102      	bne.n	800b322 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800b31c:	f06f 0305 	mvn.w	r3, #5
 800b320:	e04c      	b.n	800b3bc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b326:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800b328:	68b8      	ldr	r0, [r7, #8]
 800b32a:	f7ff fe2b 	bl	800af84 <tcp_output_segment_busy>
 800b32e:	4603      	mov	r3, r0
 800b330:	2b00      	cmp	r3, #0
 800b332:	d002      	beq.n	800b33a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800b334:	f06f 0305 	mvn.w	r3, #5
 800b338:	e040      	b.n	800b3bc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	681a      	ldr	r2, [r3, #0]
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	336c      	adds	r3, #108	; 0x6c
 800b346:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b348:	e002      	b.n	800b350 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d011      	beq.n	800b37c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	68db      	ldr	r3, [r3, #12]
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	4618      	mov	r0, r3
 800b362:	f7f9 fbbc 	bl	8004ade <lwip_htonl>
 800b366:	4604      	mov	r4, r0
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	68db      	ldr	r3, [r3, #12]
 800b36c:	685b      	ldr	r3, [r3, #4]
 800b36e:	4618      	mov	r0, r3
 800b370:	f7f9 fbb5 	bl	8004ade <lwip_htonl>
 800b374:	4603      	mov	r3, r0
 800b376:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800b378:	2b00      	cmp	r3, #0
 800b37a:	dbe6      	blt.n	800b34a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	681a      	ldr	r2, [r3, #0]
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	68ba      	ldr	r2, [r7, #8]
 800b388:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d103      	bne.n	800b39a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2200      	movs	r2, #0
 800b396:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b3a0:	2bff      	cmp	r3, #255	; 0xff
 800b3a2:	d007      	beq.n	800b3b4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b3aa:	3301      	adds	r3, #1
 800b3ac:	b2da      	uxtb	r2, r3
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800b3ba:	2300      	movs	r3, #0
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3714      	adds	r7, #20
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd90      	pop	{r4, r7, pc}
 800b3c4:	08011780 	.word	0x08011780
 800b3c8:	08011e20 	.word	0x08011e20
 800b3cc:	080117d4 	.word	0x080117d4

0800b3d0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b082      	sub	sp, #8
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d106      	bne.n	800b3ec <tcp_rexmit_fast+0x1c>
 800b3de:	4b2a      	ldr	r3, [pc, #168]	; (800b488 <tcp_rexmit_fast+0xb8>)
 800b3e0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800b3e4:	4929      	ldr	r1, [pc, #164]	; (800b48c <tcp_rexmit_fast+0xbc>)
 800b3e6:	482a      	ldr	r0, [pc, #168]	; (800b490 <tcp_rexmit_fast+0xc0>)
 800b3e8:	f003 fd68 	bl	800eebc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d045      	beq.n	800b480 <tcp_rexmit_fast+0xb0>
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	8b5b      	ldrh	r3, [r3, #26]
 800b3f8:	f003 0304 	and.w	r3, r3, #4
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d13f      	bne.n	800b480 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f7ff ff79 	bl	800b2f8 <tcp_rexmit>
 800b406:	4603      	mov	r3, r0
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d139      	bne.n	800b480 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b418:	4293      	cmp	r3, r2
 800b41a:	bf28      	it	cs
 800b41c:	4613      	movcs	r3, r2
 800b41e:	b29b      	uxth	r3, r3
 800b420:	2b00      	cmp	r3, #0
 800b422:	da00      	bge.n	800b426 <tcp_rexmit_fast+0x56>
 800b424:	3301      	adds	r3, #1
 800b426:	105b      	asrs	r3, r3, #1
 800b428:	b29a      	uxth	r2, r3
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b436:	461a      	mov	r2, r3
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b43c:	005b      	lsls	r3, r3, #1
 800b43e:	429a      	cmp	r2, r3
 800b440:	d206      	bcs.n	800b450 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b446:	005b      	lsls	r3, r3, #1
 800b448:	b29a      	uxth	r2, r3
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b45a:	4619      	mov	r1, r3
 800b45c:	0049      	lsls	r1, r1, #1
 800b45e:	440b      	add	r3, r1
 800b460:	b29b      	uxth	r3, r3
 800b462:	4413      	add	r3, r2
 800b464:	b29a      	uxth	r2, r3
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	8b5b      	ldrh	r3, [r3, #26]
 800b470:	f043 0304 	orr.w	r3, r3, #4
 800b474:	b29a      	uxth	r2, r3
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2200      	movs	r2, #0
 800b47e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800b480:	bf00      	nop
 800b482:	3708      	adds	r7, #8
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}
 800b488:	08011780 	.word	0x08011780
 800b48c:	08011e38 	.word	0x08011e38
 800b490:	080117d4 	.word	0x080117d4

0800b494 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b086      	sub	sp, #24
 800b498:	af00      	add	r7, sp, #0
 800b49a:	60f8      	str	r0, [r7, #12]
 800b49c:	607b      	str	r3, [r7, #4]
 800b49e:	460b      	mov	r3, r1
 800b4a0:	817b      	strh	r3, [r7, #10]
 800b4a2:	4613      	mov	r3, r2
 800b4a4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b4a6:	897a      	ldrh	r2, [r7, #10]
 800b4a8:	893b      	ldrh	r3, [r7, #8]
 800b4aa:	4413      	add	r3, r2
 800b4ac:	b29b      	uxth	r3, r3
 800b4ae:	3314      	adds	r3, #20
 800b4b0:	b29b      	uxth	r3, r3
 800b4b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b4b6:	4619      	mov	r1, r3
 800b4b8:	2022      	movs	r0, #34	; 0x22
 800b4ba:	f7fa fb75 	bl	8005ba8 <pbuf_alloc>
 800b4be:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d04d      	beq.n	800b562 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b4c6:	897b      	ldrh	r3, [r7, #10]
 800b4c8:	3313      	adds	r3, #19
 800b4ca:	697a      	ldr	r2, [r7, #20]
 800b4cc:	8952      	ldrh	r2, [r2, #10]
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	db06      	blt.n	800b4e0 <tcp_output_alloc_header_common+0x4c>
 800b4d2:	4b26      	ldr	r3, [pc, #152]	; (800b56c <tcp_output_alloc_header_common+0xd8>)
 800b4d4:	f240 7223 	movw	r2, #1827	; 0x723
 800b4d8:	4925      	ldr	r1, [pc, #148]	; (800b570 <tcp_output_alloc_header_common+0xdc>)
 800b4da:	4826      	ldr	r0, [pc, #152]	; (800b574 <tcp_output_alloc_header_common+0xe0>)
 800b4dc:	f003 fcee 	bl	800eebc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	685b      	ldr	r3, [r3, #4]
 800b4e4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800b4e6:	8c3b      	ldrh	r3, [r7, #32]
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f7f9 fae3 	bl	8004ab4 <lwip_htons>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	461a      	mov	r2, r3
 800b4f2:	693b      	ldr	r3, [r7, #16]
 800b4f4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800b4f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f7f9 fadb 	bl	8004ab4 <lwip_htons>
 800b4fe:	4603      	mov	r3, r0
 800b500:	461a      	mov	r2, r3
 800b502:	693b      	ldr	r3, [r7, #16]
 800b504:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	687a      	ldr	r2, [r7, #4]
 800b50a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800b50c:	68f8      	ldr	r0, [r7, #12]
 800b50e:	f7f9 fae6 	bl	8004ade <lwip_htonl>
 800b512:	4602      	mov	r2, r0
 800b514:	693b      	ldr	r3, [r7, #16]
 800b516:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800b518:	897b      	ldrh	r3, [r7, #10]
 800b51a:	089b      	lsrs	r3, r3, #2
 800b51c:	b29b      	uxth	r3, r3
 800b51e:	3305      	adds	r3, #5
 800b520:	b29b      	uxth	r3, r3
 800b522:	031b      	lsls	r3, r3, #12
 800b524:	b29a      	uxth	r2, r3
 800b526:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b52a:	b29b      	uxth	r3, r3
 800b52c:	4313      	orrs	r3, r2
 800b52e:	b29b      	uxth	r3, r3
 800b530:	4618      	mov	r0, r3
 800b532:	f7f9 fabf 	bl	8004ab4 <lwip_htons>
 800b536:	4603      	mov	r3, r0
 800b538:	461a      	mov	r2, r3
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800b53e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b540:	4618      	mov	r0, r3
 800b542:	f7f9 fab7 	bl	8004ab4 <lwip_htons>
 800b546:	4603      	mov	r3, r0
 800b548:	461a      	mov	r2, r3
 800b54a:	693b      	ldr	r3, [r7, #16]
 800b54c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	2200      	movs	r2, #0
 800b552:	741a      	strb	r2, [r3, #16]
 800b554:	2200      	movs	r2, #0
 800b556:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	2200      	movs	r2, #0
 800b55c:	749a      	strb	r2, [r3, #18]
 800b55e:	2200      	movs	r2, #0
 800b560:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800b562:	697b      	ldr	r3, [r7, #20]
}
 800b564:	4618      	mov	r0, r3
 800b566:	3718      	adds	r7, #24
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}
 800b56c:	08011780 	.word	0x08011780
 800b570:	08011e58 	.word	0x08011e58
 800b574:	080117d4 	.word	0x080117d4

0800b578 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800b578:	b5b0      	push	{r4, r5, r7, lr}
 800b57a:	b08a      	sub	sp, #40	; 0x28
 800b57c:	af04      	add	r7, sp, #16
 800b57e:	60f8      	str	r0, [r7, #12]
 800b580:	607b      	str	r3, [r7, #4]
 800b582:	460b      	mov	r3, r1
 800b584:	817b      	strh	r3, [r7, #10]
 800b586:	4613      	mov	r3, r2
 800b588:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d106      	bne.n	800b59e <tcp_output_alloc_header+0x26>
 800b590:	4b15      	ldr	r3, [pc, #84]	; (800b5e8 <tcp_output_alloc_header+0x70>)
 800b592:	f240 7242 	movw	r2, #1858	; 0x742
 800b596:	4915      	ldr	r1, [pc, #84]	; (800b5ec <tcp_output_alloc_header+0x74>)
 800b598:	4815      	ldr	r0, [pc, #84]	; (800b5f0 <tcp_output_alloc_header+0x78>)
 800b59a:	f003 fc8f 	bl	800eebc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	8adb      	ldrh	r3, [r3, #22]
 800b5a6:	68fa      	ldr	r2, [r7, #12]
 800b5a8:	8b12      	ldrh	r2, [r2, #24]
 800b5aa:	68f9      	ldr	r1, [r7, #12]
 800b5ac:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800b5ae:	893d      	ldrh	r5, [r7, #8]
 800b5b0:	897c      	ldrh	r4, [r7, #10]
 800b5b2:	9103      	str	r1, [sp, #12]
 800b5b4:	2110      	movs	r1, #16
 800b5b6:	9102      	str	r1, [sp, #8]
 800b5b8:	9201      	str	r2, [sp, #4]
 800b5ba:	9300      	str	r3, [sp, #0]
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	462a      	mov	r2, r5
 800b5c0:	4621      	mov	r1, r4
 800b5c2:	f7ff ff67 	bl	800b494 <tcp_output_alloc_header_common>
 800b5c6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800b5c8:	697b      	ldr	r3, [r7, #20]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d006      	beq.n	800b5dc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d2:	68fa      	ldr	r2, [r7, #12]
 800b5d4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b5d6:	441a      	add	r2, r3
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800b5dc:	697b      	ldr	r3, [r7, #20]
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3718      	adds	r7, #24
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bdb0      	pop	{r4, r5, r7, pc}
 800b5e6:	bf00      	nop
 800b5e8:	08011780 	.word	0x08011780
 800b5ec:	08011e88 	.word	0x08011e88
 800b5f0:	080117d4 	.word	0x080117d4

0800b5f4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b088      	sub	sp, #32
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	60f8      	str	r0, [r7, #12]
 800b5fc:	60b9      	str	r1, [r7, #8]
 800b5fe:	4611      	mov	r1, r2
 800b600:	461a      	mov	r2, r3
 800b602:	460b      	mov	r3, r1
 800b604:	71fb      	strb	r3, [r7, #7]
 800b606:	4613      	mov	r3, r2
 800b608:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800b60a:	2300      	movs	r3, #0
 800b60c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d106      	bne.n	800b622 <tcp_output_fill_options+0x2e>
 800b614:	4b12      	ldr	r3, [pc, #72]	; (800b660 <tcp_output_fill_options+0x6c>)
 800b616:	f240 7256 	movw	r2, #1878	; 0x756
 800b61a:	4912      	ldr	r1, [pc, #72]	; (800b664 <tcp_output_fill_options+0x70>)
 800b61c:	4812      	ldr	r0, [pc, #72]	; (800b668 <tcp_output_fill_options+0x74>)
 800b61e:	f003 fc4d 	bl	800eebc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	685b      	ldr	r3, [r3, #4]
 800b626:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800b628:	69bb      	ldr	r3, [r7, #24]
 800b62a:	3314      	adds	r3, #20
 800b62c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800b62e:	8bfb      	ldrh	r3, [r7, #30]
 800b630:	009b      	lsls	r3, r3, #2
 800b632:	461a      	mov	r2, r3
 800b634:	79fb      	ldrb	r3, [r7, #7]
 800b636:	009b      	lsls	r3, r3, #2
 800b638:	f003 0304 	and.w	r3, r3, #4
 800b63c:	4413      	add	r3, r2
 800b63e:	3314      	adds	r3, #20
 800b640:	69ba      	ldr	r2, [r7, #24]
 800b642:	4413      	add	r3, r2
 800b644:	697a      	ldr	r2, [r7, #20]
 800b646:	429a      	cmp	r2, r3
 800b648:	d006      	beq.n	800b658 <tcp_output_fill_options+0x64>
 800b64a:	4b05      	ldr	r3, [pc, #20]	; (800b660 <tcp_output_fill_options+0x6c>)
 800b64c:	f240 7275 	movw	r2, #1909	; 0x775
 800b650:	4906      	ldr	r1, [pc, #24]	; (800b66c <tcp_output_fill_options+0x78>)
 800b652:	4805      	ldr	r0, [pc, #20]	; (800b668 <tcp_output_fill_options+0x74>)
 800b654:	f003 fc32 	bl	800eebc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800b658:	bf00      	nop
 800b65a:	3720      	adds	r7, #32
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}
 800b660:	08011780 	.word	0x08011780
 800b664:	08011eb0 	.word	0x08011eb0
 800b668:	080117d4 	.word	0x080117d4
 800b66c:	08011da8 	.word	0x08011da8

0800b670 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b08a      	sub	sp, #40	; 0x28
 800b674:	af04      	add	r7, sp, #16
 800b676:	60f8      	str	r0, [r7, #12]
 800b678:	60b9      	str	r1, [r7, #8]
 800b67a:	607a      	str	r2, [r7, #4]
 800b67c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d106      	bne.n	800b692 <tcp_output_control_segment+0x22>
 800b684:	4b1c      	ldr	r3, [pc, #112]	; (800b6f8 <tcp_output_control_segment+0x88>)
 800b686:	f240 7287 	movw	r2, #1927	; 0x787
 800b68a:	491c      	ldr	r1, [pc, #112]	; (800b6fc <tcp_output_control_segment+0x8c>)
 800b68c:	481c      	ldr	r0, [pc, #112]	; (800b700 <tcp_output_control_segment+0x90>)
 800b68e:	f003 fc15 	bl	800eebc <iprintf>

  netif = tcp_route(pcb, src, dst);
 800b692:	683a      	ldr	r2, [r7, #0]
 800b694:	6879      	ldr	r1, [r7, #4]
 800b696:	68f8      	ldr	r0, [r7, #12]
 800b698:	f7fe ff40 	bl	800a51c <tcp_route>
 800b69c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800b69e:	693b      	ldr	r3, [r7, #16]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d102      	bne.n	800b6aa <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800b6a4:	23fc      	movs	r3, #252	; 0xfc
 800b6a6:	75fb      	strb	r3, [r7, #23]
 800b6a8:	e01c      	b.n	800b6e4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d006      	beq.n	800b6be <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	7adb      	ldrb	r3, [r3, #11]
 800b6b4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	7a9b      	ldrb	r3, [r3, #10]
 800b6ba:	757b      	strb	r3, [r7, #21]
 800b6bc:	e003      	b.n	800b6c6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800b6be:	23ff      	movs	r3, #255	; 0xff
 800b6c0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800b6c6:	7dba      	ldrb	r2, [r7, #22]
 800b6c8:	693b      	ldr	r3, [r7, #16]
 800b6ca:	9302      	str	r3, [sp, #8]
 800b6cc:	2306      	movs	r3, #6
 800b6ce:	9301      	str	r3, [sp, #4]
 800b6d0:	7d7b      	ldrb	r3, [r7, #21]
 800b6d2:	9300      	str	r3, [sp, #0]
 800b6d4:	4613      	mov	r3, r2
 800b6d6:	683a      	ldr	r2, [r7, #0]
 800b6d8:	6879      	ldr	r1, [r7, #4]
 800b6da:	68b8      	ldr	r0, [r7, #8]
 800b6dc:	f002 fac0 	bl	800dc60 <ip4_output_if>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800b6e4:	68b8      	ldr	r0, [r7, #8]
 800b6e6:	f7fa fd43 	bl	8006170 <pbuf_free>
  return err;
 800b6ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3718      	adds	r7, #24
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}
 800b6f6:	bf00      	nop
 800b6f8:	08011780 	.word	0x08011780
 800b6fc:	08011ed8 	.word	0x08011ed8
 800b700:	080117d4 	.word	0x080117d4

0800b704 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800b704:	b590      	push	{r4, r7, lr}
 800b706:	b08b      	sub	sp, #44	; 0x2c
 800b708:	af04      	add	r7, sp, #16
 800b70a:	60f8      	str	r0, [r7, #12]
 800b70c:	60b9      	str	r1, [r7, #8]
 800b70e:	607a      	str	r2, [r7, #4]
 800b710:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d106      	bne.n	800b726 <tcp_rst+0x22>
 800b718:	4b1f      	ldr	r3, [pc, #124]	; (800b798 <tcp_rst+0x94>)
 800b71a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800b71e:	491f      	ldr	r1, [pc, #124]	; (800b79c <tcp_rst+0x98>)
 800b720:	481f      	ldr	r0, [pc, #124]	; (800b7a0 <tcp_rst+0x9c>)
 800b722:	f003 fbcb 	bl	800eebc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800b726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d106      	bne.n	800b73a <tcp_rst+0x36>
 800b72c:	4b1a      	ldr	r3, [pc, #104]	; (800b798 <tcp_rst+0x94>)
 800b72e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800b732:	491c      	ldr	r1, [pc, #112]	; (800b7a4 <tcp_rst+0xa0>)
 800b734:	481a      	ldr	r0, [pc, #104]	; (800b7a0 <tcp_rst+0x9c>)
 800b736:	f003 fbc1 	bl	800eebc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b73a:	2300      	movs	r3, #0
 800b73c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800b73e:	f246 0308 	movw	r3, #24584	; 0x6008
 800b742:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800b744:	7dfb      	ldrb	r3, [r7, #23]
 800b746:	b29c      	uxth	r4, r3
 800b748:	68b8      	ldr	r0, [r7, #8]
 800b74a:	f7f9 f9c8 	bl	8004ade <lwip_htonl>
 800b74e:	4602      	mov	r2, r0
 800b750:	8abb      	ldrh	r3, [r7, #20]
 800b752:	9303      	str	r3, [sp, #12]
 800b754:	2314      	movs	r3, #20
 800b756:	9302      	str	r3, [sp, #8]
 800b758:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b75a:	9301      	str	r3, [sp, #4]
 800b75c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b75e:	9300      	str	r3, [sp, #0]
 800b760:	4613      	mov	r3, r2
 800b762:	2200      	movs	r2, #0
 800b764:	4621      	mov	r1, r4
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f7ff fe94 	bl	800b494 <tcp_output_alloc_header_common>
 800b76c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d00c      	beq.n	800b78e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b774:	7dfb      	ldrb	r3, [r7, #23]
 800b776:	2200      	movs	r2, #0
 800b778:	6939      	ldr	r1, [r7, #16]
 800b77a:	68f8      	ldr	r0, [r7, #12]
 800b77c:	f7ff ff3a 	bl	800b5f4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800b780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b782:	683a      	ldr	r2, [r7, #0]
 800b784:	6939      	ldr	r1, [r7, #16]
 800b786:	68f8      	ldr	r0, [r7, #12]
 800b788:	f7ff ff72 	bl	800b670 <tcp_output_control_segment>
 800b78c:	e000      	b.n	800b790 <tcp_rst+0x8c>
    return;
 800b78e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800b790:	371c      	adds	r7, #28
 800b792:	46bd      	mov	sp, r7
 800b794:	bd90      	pop	{r4, r7, pc}
 800b796:	bf00      	nop
 800b798:	08011780 	.word	0x08011780
 800b79c:	08011f04 	.word	0x08011f04
 800b7a0:	080117d4 	.word	0x080117d4
 800b7a4:	08011f20 	.word	0x08011f20

0800b7a8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800b7a8:	b590      	push	{r4, r7, lr}
 800b7aa:	b087      	sub	sp, #28
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d106      	bne.n	800b7cc <tcp_send_empty_ack+0x24>
 800b7be:	4b28      	ldr	r3, [pc, #160]	; (800b860 <tcp_send_empty_ack+0xb8>)
 800b7c0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800b7c4:	4927      	ldr	r1, [pc, #156]	; (800b864 <tcp_send_empty_ack+0xbc>)
 800b7c6:	4828      	ldr	r0, [pc, #160]	; (800b868 <tcp_send_empty_ack+0xc0>)
 800b7c8:	f003 fb78 	bl	800eebc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b7cc:	7dfb      	ldrb	r3, [r7, #23]
 800b7ce:	009b      	lsls	r3, r3, #2
 800b7d0:	b2db      	uxtb	r3, r3
 800b7d2:	f003 0304 	and.w	r3, r3, #4
 800b7d6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800b7d8:	7d7b      	ldrb	r3, [r7, #21]
 800b7da:	b29c      	uxth	r4, r3
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f7f9 f97c 	bl	8004ade <lwip_htonl>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	4621      	mov	r1, r4
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f7ff fec3 	bl	800b578 <tcp_output_alloc_header>
 800b7f2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d109      	bne.n	800b80e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	8b5b      	ldrh	r3, [r3, #26]
 800b7fe:	f043 0303 	orr.w	r3, r3, #3
 800b802:	b29a      	uxth	r2, r3
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800b808:	f06f 0301 	mvn.w	r3, #1
 800b80c:	e023      	b.n	800b856 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800b80e:	7dbb      	ldrb	r3, [r7, #22]
 800b810:	7dfa      	ldrb	r2, [r7, #23]
 800b812:	6939      	ldr	r1, [r7, #16]
 800b814:	6878      	ldr	r0, [r7, #4]
 800b816:	f7ff feed 	bl	800b5f4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b81a:	687a      	ldr	r2, [r7, #4]
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	3304      	adds	r3, #4
 800b820:	6939      	ldr	r1, [r7, #16]
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f7ff ff24 	bl	800b670 <tcp_output_control_segment>
 800b828:	4603      	mov	r3, r0
 800b82a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b82c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d007      	beq.n	800b844 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	8b5b      	ldrh	r3, [r3, #26]
 800b838:	f043 0303 	orr.w	r3, r3, #3
 800b83c:	b29a      	uxth	r2, r3
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	835a      	strh	r2, [r3, #26]
 800b842:	e006      	b.n	800b852 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	8b5b      	ldrh	r3, [r3, #26]
 800b848:	f023 0303 	bic.w	r3, r3, #3
 800b84c:	b29a      	uxth	r2, r3
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800b852:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b856:	4618      	mov	r0, r3
 800b858:	371c      	adds	r7, #28
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd90      	pop	{r4, r7, pc}
 800b85e:	bf00      	nop
 800b860:	08011780 	.word	0x08011780
 800b864:	08011f3c 	.word	0x08011f3c
 800b868:	080117d4 	.word	0x080117d4

0800b86c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800b86c:	b590      	push	{r4, r7, lr}
 800b86e:	b087      	sub	sp, #28
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b874:	2300      	movs	r3, #0
 800b876:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d106      	bne.n	800b88c <tcp_keepalive+0x20>
 800b87e:	4b18      	ldr	r3, [pc, #96]	; (800b8e0 <tcp_keepalive+0x74>)
 800b880:	f640 0224 	movw	r2, #2084	; 0x824
 800b884:	4917      	ldr	r1, [pc, #92]	; (800b8e4 <tcp_keepalive+0x78>)
 800b886:	4818      	ldr	r0, [pc, #96]	; (800b8e8 <tcp_keepalive+0x7c>)
 800b888:	f003 fb18 	bl	800eebc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800b88c:	7dfb      	ldrb	r3, [r7, #23]
 800b88e:	b29c      	uxth	r4, r3
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b894:	3b01      	subs	r3, #1
 800b896:	4618      	mov	r0, r3
 800b898:	f7f9 f921 	bl	8004ade <lwip_htonl>
 800b89c:	4603      	mov	r3, r0
 800b89e:	2200      	movs	r2, #0
 800b8a0:	4621      	mov	r1, r4
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f7ff fe68 	bl	800b578 <tcp_output_alloc_header>
 800b8a8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d102      	bne.n	800b8b6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800b8b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b8b4:	e010      	b.n	800b8d8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b8b6:	7dfb      	ldrb	r3, [r7, #23]
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	6939      	ldr	r1, [r7, #16]
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	f7ff fe99 	bl	800b5f4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b8c2:	687a      	ldr	r2, [r7, #4]
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	3304      	adds	r3, #4
 800b8c8:	6939      	ldr	r1, [r7, #16]
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f7ff fed0 	bl	800b670 <tcp_output_control_segment>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b8d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	371c      	adds	r7, #28
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd90      	pop	{r4, r7, pc}
 800b8e0:	08011780 	.word	0x08011780
 800b8e4:	08011f5c 	.word	0x08011f5c
 800b8e8:	080117d4 	.word	0x080117d4

0800b8ec <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800b8ec:	b590      	push	{r4, r7, lr}
 800b8ee:	b08b      	sub	sp, #44	; 0x2c
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d106      	bne.n	800b90e <tcp_zero_window_probe+0x22>
 800b900:	4b4c      	ldr	r3, [pc, #304]	; (800ba34 <tcp_zero_window_probe+0x148>)
 800b902:	f640 024f 	movw	r2, #2127	; 0x84f
 800b906:	494c      	ldr	r1, [pc, #304]	; (800ba38 <tcp_zero_window_probe+0x14c>)
 800b908:	484c      	ldr	r0, [pc, #304]	; (800ba3c <tcp_zero_window_probe+0x150>)
 800b90a:	f003 fad7 	bl	800eebc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b912:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800b914:	6a3b      	ldr	r3, [r7, #32]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d101      	bne.n	800b91e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800b91a:	2300      	movs	r3, #0
 800b91c:	e086      	b.n	800ba2c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b924:	2bff      	cmp	r3, #255	; 0xff
 800b926:	d007      	beq.n	800b938 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b92e:	3301      	adds	r3, #1
 800b930:	b2da      	uxtb	r2, r3
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800b938:	6a3b      	ldr	r3, [r7, #32]
 800b93a:	68db      	ldr	r3, [r3, #12]
 800b93c:	899b      	ldrh	r3, [r3, #12]
 800b93e:	b29b      	uxth	r3, r3
 800b940:	4618      	mov	r0, r3
 800b942:	f7f9 f8b7 	bl	8004ab4 <lwip_htons>
 800b946:	4603      	mov	r3, r0
 800b948:	b2db      	uxtb	r3, r3
 800b94a:	f003 0301 	and.w	r3, r3, #1
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d005      	beq.n	800b95e <tcp_zero_window_probe+0x72>
 800b952:	6a3b      	ldr	r3, [r7, #32]
 800b954:	891b      	ldrh	r3, [r3, #8]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d101      	bne.n	800b95e <tcp_zero_window_probe+0x72>
 800b95a:	2301      	movs	r3, #1
 800b95c:	e000      	b.n	800b960 <tcp_zero_window_probe+0x74>
 800b95e:	2300      	movs	r3, #0
 800b960:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800b962:	7ffb      	ldrb	r3, [r7, #31]
 800b964:	2b00      	cmp	r3, #0
 800b966:	bf0c      	ite	eq
 800b968:	2301      	moveq	r3, #1
 800b96a:	2300      	movne	r3, #0
 800b96c:	b2db      	uxtb	r3, r3
 800b96e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800b970:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b974:	b299      	uxth	r1, r3
 800b976:	6a3b      	ldr	r3, [r7, #32]
 800b978:	68db      	ldr	r3, [r3, #12]
 800b97a:	685b      	ldr	r3, [r3, #4]
 800b97c:	8bba      	ldrh	r2, [r7, #28]
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f7ff fdfa 	bl	800b578 <tcp_output_alloc_header>
 800b984:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800b986:	69bb      	ldr	r3, [r7, #24]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d102      	bne.n	800b992 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800b98c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b990:	e04c      	b.n	800ba2c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800b992:	69bb      	ldr	r3, [r7, #24]
 800b994:	685b      	ldr	r3, [r3, #4]
 800b996:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800b998:	7ffb      	ldrb	r3, [r7, #31]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d011      	beq.n	800b9c2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	899b      	ldrh	r3, [r3, #12]
 800b9a2:	b29b      	uxth	r3, r3
 800b9a4:	b21b      	sxth	r3, r3
 800b9a6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b9aa:	b21c      	sxth	r4, r3
 800b9ac:	2011      	movs	r0, #17
 800b9ae:	f7f9 f881 	bl	8004ab4 <lwip_htons>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	b21b      	sxth	r3, r3
 800b9b6:	4323      	orrs	r3, r4
 800b9b8:	b21b      	sxth	r3, r3
 800b9ba:	b29a      	uxth	r2, r3
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	819a      	strh	r2, [r3, #12]
 800b9c0:	e010      	b.n	800b9e4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800b9c2:	69bb      	ldr	r3, [r7, #24]
 800b9c4:	685b      	ldr	r3, [r3, #4]
 800b9c6:	3314      	adds	r3, #20
 800b9c8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800b9ca:	6a3b      	ldr	r3, [r7, #32]
 800b9cc:	6858      	ldr	r0, [r3, #4]
 800b9ce:	6a3b      	ldr	r3, [r7, #32]
 800b9d0:	685b      	ldr	r3, [r3, #4]
 800b9d2:	891a      	ldrh	r2, [r3, #8]
 800b9d4:	6a3b      	ldr	r3, [r7, #32]
 800b9d6:	891b      	ldrh	r3, [r3, #8]
 800b9d8:	1ad3      	subs	r3, r2, r3
 800b9da:	b29b      	uxth	r3, r3
 800b9dc:	2201      	movs	r2, #1
 800b9de:	6939      	ldr	r1, [r7, #16]
 800b9e0:	f7fa fdc0 	bl	8006564 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800b9e4:	6a3b      	ldr	r3, [r7, #32]
 800b9e6:	68db      	ldr	r3, [r3, #12]
 800b9e8:	685b      	ldr	r3, [r3, #4]
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f7f9 f877 	bl	8004ade <lwip_htonl>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	3301      	adds	r3, #1
 800b9f4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	1ad3      	subs	r3, r2, r3
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	da02      	bge.n	800ba08 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	68fa      	ldr	r2, [r7, #12]
 800ba06:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ba08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	69b9      	ldr	r1, [r7, #24]
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	f7ff fdef 	bl	800b5f4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ba16:	687a      	ldr	r2, [r7, #4]
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	3304      	adds	r3, #4
 800ba1c:	69b9      	ldr	r1, [r7, #24]
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f7ff fe26 	bl	800b670 <tcp_output_control_segment>
 800ba24:	4603      	mov	r3, r0
 800ba26:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ba28:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	372c      	adds	r7, #44	; 0x2c
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd90      	pop	{r4, r7, pc}
 800ba34:	08011780 	.word	0x08011780
 800ba38:	08011f78 	.word	0x08011f78
 800ba3c:	080117d4 	.word	0x080117d4

0800ba40 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b082      	sub	sp, #8
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800ba48:	f7fa ff0c 	bl	8006864 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ba4c:	4b0a      	ldr	r3, [pc, #40]	; (800ba78 <tcpip_tcp_timer+0x38>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d103      	bne.n	800ba5c <tcpip_tcp_timer+0x1c>
 800ba54:	4b09      	ldr	r3, [pc, #36]	; (800ba7c <tcpip_tcp_timer+0x3c>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d005      	beq.n	800ba68 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	4908      	ldr	r1, [pc, #32]	; (800ba80 <tcpip_tcp_timer+0x40>)
 800ba60:	20fa      	movs	r0, #250	; 0xfa
 800ba62:	f000 f8f3 	bl	800bc4c <sys_timeout>
 800ba66:	e003      	b.n	800ba70 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800ba68:	4b06      	ldr	r3, [pc, #24]	; (800ba84 <tcpip_tcp_timer+0x44>)
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	601a      	str	r2, [r3, #0]
  }
}
 800ba6e:	bf00      	nop
 800ba70:	bf00      	nop
 800ba72:	3708      	adds	r7, #8
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}
 800ba78:	2000a4c0 	.word	0x2000a4c0
 800ba7c:	2000a4c4 	.word	0x2000a4c4
 800ba80:	0800ba41 	.word	0x0800ba41
 800ba84:	2000a50c 	.word	0x2000a50c

0800ba88 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ba8c:	4b0a      	ldr	r3, [pc, #40]	; (800bab8 <tcp_timer_needed+0x30>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d10f      	bne.n	800bab4 <tcp_timer_needed+0x2c>
 800ba94:	4b09      	ldr	r3, [pc, #36]	; (800babc <tcp_timer_needed+0x34>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d103      	bne.n	800baa4 <tcp_timer_needed+0x1c>
 800ba9c:	4b08      	ldr	r3, [pc, #32]	; (800bac0 <tcp_timer_needed+0x38>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d007      	beq.n	800bab4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800baa4:	4b04      	ldr	r3, [pc, #16]	; (800bab8 <tcp_timer_needed+0x30>)
 800baa6:	2201      	movs	r2, #1
 800baa8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800baaa:	2200      	movs	r2, #0
 800baac:	4905      	ldr	r1, [pc, #20]	; (800bac4 <tcp_timer_needed+0x3c>)
 800baae:	20fa      	movs	r0, #250	; 0xfa
 800bab0:	f000 f8cc 	bl	800bc4c <sys_timeout>
  }
}
 800bab4:	bf00      	nop
 800bab6:	bd80      	pop	{r7, pc}
 800bab8:	2000a50c 	.word	0x2000a50c
 800babc:	2000a4c0 	.word	0x2000a4c0
 800bac0:	2000a4c4 	.word	0x2000a4c4
 800bac4:	0800ba41 	.word	0x0800ba41

0800bac8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b086      	sub	sp, #24
 800bacc:	af00      	add	r7, sp, #0
 800bace:	60f8      	str	r0, [r7, #12]
 800bad0:	60b9      	str	r1, [r7, #8]
 800bad2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800bad4:	2006      	movs	r0, #6
 800bad6:	f7f9 fc65 	bl	80053a4 <memp_malloc>
 800bada:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d109      	bne.n	800baf6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d151      	bne.n	800bb8c <sys_timeout_abs+0xc4>
 800bae8:	4b2a      	ldr	r3, [pc, #168]	; (800bb94 <sys_timeout_abs+0xcc>)
 800baea:	22be      	movs	r2, #190	; 0xbe
 800baec:	492a      	ldr	r1, [pc, #168]	; (800bb98 <sys_timeout_abs+0xd0>)
 800baee:	482b      	ldr	r0, [pc, #172]	; (800bb9c <sys_timeout_abs+0xd4>)
 800baf0:	f003 f9e4 	bl	800eebc <iprintf>
    return;
 800baf4:	e04a      	b.n	800bb8c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	2200      	movs	r2, #0
 800bafa:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	68ba      	ldr	r2, [r7, #8]
 800bb00:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	687a      	ldr	r2, [r7, #4]
 800bb06:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	68fa      	ldr	r2, [r7, #12]
 800bb0c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800bb0e:	4b24      	ldr	r3, [pc, #144]	; (800bba0 <sys_timeout_abs+0xd8>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d103      	bne.n	800bb1e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800bb16:	4a22      	ldr	r2, [pc, #136]	; (800bba0 <sys_timeout_abs+0xd8>)
 800bb18:	693b      	ldr	r3, [r7, #16]
 800bb1a:	6013      	str	r3, [r2, #0]
    return;
 800bb1c:	e037      	b.n	800bb8e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800bb1e:	693b      	ldr	r3, [r7, #16]
 800bb20:	685a      	ldr	r2, [r3, #4]
 800bb22:	4b1f      	ldr	r3, [pc, #124]	; (800bba0 <sys_timeout_abs+0xd8>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	685b      	ldr	r3, [r3, #4]
 800bb28:	1ad3      	subs	r3, r2, r3
 800bb2a:	0fdb      	lsrs	r3, r3, #31
 800bb2c:	f003 0301 	and.w	r3, r3, #1
 800bb30:	b2db      	uxtb	r3, r3
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d007      	beq.n	800bb46 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800bb36:	4b1a      	ldr	r3, [pc, #104]	; (800bba0 <sys_timeout_abs+0xd8>)
 800bb38:	681a      	ldr	r2, [r3, #0]
 800bb3a:	693b      	ldr	r3, [r7, #16]
 800bb3c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800bb3e:	4a18      	ldr	r2, [pc, #96]	; (800bba0 <sys_timeout_abs+0xd8>)
 800bb40:	693b      	ldr	r3, [r7, #16]
 800bb42:	6013      	str	r3, [r2, #0]
 800bb44:	e023      	b.n	800bb8e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800bb46:	4b16      	ldr	r3, [pc, #88]	; (800bba0 <sys_timeout_abs+0xd8>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	617b      	str	r3, [r7, #20]
 800bb4c:	e01a      	b.n	800bb84 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d00b      	beq.n	800bb6e <sys_timeout_abs+0xa6>
 800bb56:	693b      	ldr	r3, [r7, #16]
 800bb58:	685a      	ldr	r2, [r3, #4]
 800bb5a:	697b      	ldr	r3, [r7, #20]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	685b      	ldr	r3, [r3, #4]
 800bb60:	1ad3      	subs	r3, r2, r3
 800bb62:	0fdb      	lsrs	r3, r3, #31
 800bb64:	f003 0301 	and.w	r3, r3, #1
 800bb68:	b2db      	uxtb	r3, r3
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d007      	beq.n	800bb7e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	681a      	ldr	r2, [r3, #0]
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	693a      	ldr	r2, [r7, #16]
 800bb7a:	601a      	str	r2, [r3, #0]
        break;
 800bb7c:	e007      	b.n	800bb8e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	617b      	str	r3, [r7, #20]
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d1e1      	bne.n	800bb4e <sys_timeout_abs+0x86>
 800bb8a:	e000      	b.n	800bb8e <sys_timeout_abs+0xc6>
    return;
 800bb8c:	bf00      	nop
      }
    }
  }
}
 800bb8e:	3718      	adds	r7, #24
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bd80      	pop	{r7, pc}
 800bb94:	08011f9c 	.word	0x08011f9c
 800bb98:	08011fd0 	.word	0x08011fd0
 800bb9c:	08012010 	.word	0x08012010
 800bba0:	2000a504 	.word	0x2000a504

0800bba4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b086      	sub	sp, #24
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	685b      	ldr	r3, [r3, #4]
 800bbb4:	4798      	blx	r3

  now = sys_now();
 800bbb6:	f7f8 fd69 	bl	800468c <sys_now>
 800bbba:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800bbbc:	697b      	ldr	r3, [r7, #20]
 800bbbe:	681a      	ldr	r2, [r3, #0]
 800bbc0:	4b0f      	ldr	r3, [pc, #60]	; (800bc00 <lwip_cyclic_timer+0x5c>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	4413      	add	r3, r2
 800bbc6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800bbc8:	68fa      	ldr	r2, [r7, #12]
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	1ad3      	subs	r3, r2, r3
 800bbce:	0fdb      	lsrs	r3, r3, #31
 800bbd0:	f003 0301 	and.w	r3, r3, #1
 800bbd4:	b2db      	uxtb	r3, r3
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d009      	beq.n	800bbee <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800bbda:	697b      	ldr	r3, [r7, #20]
 800bbdc:	681a      	ldr	r2, [r3, #0]
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	4413      	add	r3, r2
 800bbe2:	687a      	ldr	r2, [r7, #4]
 800bbe4:	4907      	ldr	r1, [pc, #28]	; (800bc04 <lwip_cyclic_timer+0x60>)
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f7ff ff6e 	bl	800bac8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800bbec:	e004      	b.n	800bbf8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800bbee:	687a      	ldr	r2, [r7, #4]
 800bbf0:	4904      	ldr	r1, [pc, #16]	; (800bc04 <lwip_cyclic_timer+0x60>)
 800bbf2:	68f8      	ldr	r0, [r7, #12]
 800bbf4:	f7ff ff68 	bl	800bac8 <sys_timeout_abs>
}
 800bbf8:	bf00      	nop
 800bbfa:	3718      	adds	r7, #24
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}
 800bc00:	2000a508 	.word	0x2000a508
 800bc04:	0800bba5 	.word	0x0800bba5

0800bc08 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b082      	sub	sp, #8
 800bc0c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800bc0e:	2301      	movs	r3, #1
 800bc10:	607b      	str	r3, [r7, #4]
 800bc12:	e00e      	b.n	800bc32 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800bc14:	4a0b      	ldr	r2, [pc, #44]	; (800bc44 <sys_timeouts_init+0x3c>)
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	00db      	lsls	r3, r3, #3
 800bc20:	4a08      	ldr	r2, [pc, #32]	; (800bc44 <sys_timeouts_init+0x3c>)
 800bc22:	4413      	add	r3, r2
 800bc24:	461a      	mov	r2, r3
 800bc26:	4908      	ldr	r1, [pc, #32]	; (800bc48 <sys_timeouts_init+0x40>)
 800bc28:	f000 f810 	bl	800bc4c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	3301      	adds	r3, #1
 800bc30:	607b      	str	r3, [r7, #4]
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2b02      	cmp	r3, #2
 800bc36:	d9ed      	bls.n	800bc14 <sys_timeouts_init+0xc>
  }
}
 800bc38:	bf00      	nop
 800bc3a:	bf00      	nop
 800bc3c:	3708      	adds	r7, #8
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
 800bc42:	bf00      	nop
 800bc44:	08012b80 	.word	0x08012b80
 800bc48:	0800bba5 	.word	0x0800bba5

0800bc4c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b086      	sub	sp, #24
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	60f8      	str	r0, [r7, #12]
 800bc54:	60b9      	str	r1, [r7, #8]
 800bc56:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc5e:	d306      	bcc.n	800bc6e <sys_timeout+0x22>
 800bc60:	4b0a      	ldr	r3, [pc, #40]	; (800bc8c <sys_timeout+0x40>)
 800bc62:	f240 1229 	movw	r2, #297	; 0x129
 800bc66:	490a      	ldr	r1, [pc, #40]	; (800bc90 <sys_timeout+0x44>)
 800bc68:	480a      	ldr	r0, [pc, #40]	; (800bc94 <sys_timeout+0x48>)
 800bc6a:	f003 f927 	bl	800eebc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800bc6e:	f7f8 fd0d 	bl	800468c <sys_now>
 800bc72:	4602      	mov	r2, r0
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	4413      	add	r3, r2
 800bc78:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800bc7a:	687a      	ldr	r2, [r7, #4]
 800bc7c:	68b9      	ldr	r1, [r7, #8]
 800bc7e:	6978      	ldr	r0, [r7, #20]
 800bc80:	f7ff ff22 	bl	800bac8 <sys_timeout_abs>
#endif
}
 800bc84:	bf00      	nop
 800bc86:	3718      	adds	r7, #24
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}
 800bc8c:	08011f9c 	.word	0x08011f9c
 800bc90:	08012038 	.word	0x08012038
 800bc94:	08012010 	.word	0x08012010

0800bc98 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b084      	sub	sp, #16
 800bc9c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800bc9e:	f7f8 fcf5 	bl	800468c <sys_now>
 800bca2:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800bca4:	4b1a      	ldr	r3, [pc, #104]	; (800bd10 <sys_check_timeouts+0x78>)
 800bca6:	781b      	ldrb	r3, [r3, #0]
 800bca8:	b2db      	uxtb	r3, r3
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d001      	beq.n	800bcb2 <sys_check_timeouts+0x1a>
 800bcae:	f7f9 ff25 	bl	8005afc <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800bcb2:	4b18      	ldr	r3, [pc, #96]	; (800bd14 <sys_check_timeouts+0x7c>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d022      	beq.n	800bd04 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	685b      	ldr	r3, [r3, #4]
 800bcc2:	68fa      	ldr	r2, [r7, #12]
 800bcc4:	1ad3      	subs	r3, r2, r3
 800bcc6:	0fdb      	lsrs	r3, r3, #31
 800bcc8:	f003 0301 	and.w	r3, r3, #1
 800bccc:	b2db      	uxtb	r3, r3
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d11a      	bne.n	800bd08 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	4a0f      	ldr	r2, [pc, #60]	; (800bd14 <sys_check_timeouts+0x7c>)
 800bcd8:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800bcda:	68bb      	ldr	r3, [r7, #8]
 800bcdc:	689b      	ldr	r3, [r3, #8]
 800bcde:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	68db      	ldr	r3, [r3, #12]
 800bce4:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800bce6:	68bb      	ldr	r3, [r7, #8]
 800bce8:	685b      	ldr	r3, [r3, #4]
 800bcea:	4a0b      	ldr	r2, [pc, #44]	; (800bd18 <sys_check_timeouts+0x80>)
 800bcec:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800bcee:	68b9      	ldr	r1, [r7, #8]
 800bcf0:	2006      	movs	r0, #6
 800bcf2:	f7f9 fbc7 	bl	8005484 <memp_free>
    if (handler != NULL) {
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d0d3      	beq.n	800bca4 <sys_check_timeouts+0xc>
      handler(arg);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	6838      	ldr	r0, [r7, #0]
 800bd00:	4798      	blx	r3
  do {
 800bd02:	e7cf      	b.n	800bca4 <sys_check_timeouts+0xc>
      return;
 800bd04:	bf00      	nop
 800bd06:	e000      	b.n	800bd0a <sys_check_timeouts+0x72>
      return;
 800bd08:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800bd0a:	3710      	adds	r7, #16
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}
 800bd10:	2000a4b1 	.word	0x2000a4b1
 800bd14:	2000a504 	.word	0x2000a504
 800bd18:	2000a508 	.word	0x2000a508

0800bd1c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bd20:	f002 ffcc 	bl	800ecbc <rand>
 800bd24:	4603      	mov	r3, r0
 800bd26:	b29b      	uxth	r3, r3
 800bd28:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bd2c:	b29b      	uxth	r3, r3
 800bd2e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800bd32:	b29a      	uxth	r2, r3
 800bd34:	4b01      	ldr	r3, [pc, #4]	; (800bd3c <udp_init+0x20>)
 800bd36:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800bd38:	bf00      	nop
 800bd3a:	bd80      	pop	{r7, pc}
 800bd3c:	20000028 	.word	0x20000028

0800bd40 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800bd40:	b480      	push	{r7}
 800bd42:	b083      	sub	sp, #12
 800bd44:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800bd46:	2300      	movs	r3, #0
 800bd48:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800bd4a:	4b17      	ldr	r3, [pc, #92]	; (800bda8 <udp_new_port+0x68>)
 800bd4c:	881b      	ldrh	r3, [r3, #0]
 800bd4e:	1c5a      	adds	r2, r3, #1
 800bd50:	b291      	uxth	r1, r2
 800bd52:	4a15      	ldr	r2, [pc, #84]	; (800bda8 <udp_new_port+0x68>)
 800bd54:	8011      	strh	r1, [r2, #0]
 800bd56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd5a:	4293      	cmp	r3, r2
 800bd5c:	d103      	bne.n	800bd66 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800bd5e:	4b12      	ldr	r3, [pc, #72]	; (800bda8 <udp_new_port+0x68>)
 800bd60:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800bd64:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bd66:	4b11      	ldr	r3, [pc, #68]	; (800bdac <udp_new_port+0x6c>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	603b      	str	r3, [r7, #0]
 800bd6c:	e011      	b.n	800bd92 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	8a5a      	ldrh	r2, [r3, #18]
 800bd72:	4b0d      	ldr	r3, [pc, #52]	; (800bda8 <udp_new_port+0x68>)
 800bd74:	881b      	ldrh	r3, [r3, #0]
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d108      	bne.n	800bd8c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800bd7a:	88fb      	ldrh	r3, [r7, #6]
 800bd7c:	3301      	adds	r3, #1
 800bd7e:	80fb      	strh	r3, [r7, #6]
 800bd80:	88fb      	ldrh	r3, [r7, #6]
 800bd82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bd86:	d3e0      	bcc.n	800bd4a <udp_new_port+0xa>
        return 0;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	e007      	b.n	800bd9c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	68db      	ldr	r3, [r3, #12]
 800bd90:	603b      	str	r3, [r7, #0]
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d1ea      	bne.n	800bd6e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800bd98:	4b03      	ldr	r3, [pc, #12]	; (800bda8 <udp_new_port+0x68>)
 800bd9a:	881b      	ldrh	r3, [r3, #0]
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	370c      	adds	r7, #12
 800bda0:	46bd      	mov	sp, r7
 800bda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda6:	4770      	bx	lr
 800bda8:	20000028 	.word	0x20000028
 800bdac:	2000a510 	.word	0x2000a510

0800bdb0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b084      	sub	sp, #16
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	60f8      	str	r0, [r7, #12]
 800bdb8:	60b9      	str	r1, [r7, #8]
 800bdba:	4613      	mov	r3, r2
 800bdbc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d105      	bne.n	800bdd0 <udp_input_local_match+0x20>
 800bdc4:	4b27      	ldr	r3, [pc, #156]	; (800be64 <udp_input_local_match+0xb4>)
 800bdc6:	2287      	movs	r2, #135	; 0x87
 800bdc8:	4927      	ldr	r1, [pc, #156]	; (800be68 <udp_input_local_match+0xb8>)
 800bdca:	4828      	ldr	r0, [pc, #160]	; (800be6c <udp_input_local_match+0xbc>)
 800bdcc:	f003 f876 	bl	800eebc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d105      	bne.n	800bde2 <udp_input_local_match+0x32>
 800bdd6:	4b23      	ldr	r3, [pc, #140]	; (800be64 <udp_input_local_match+0xb4>)
 800bdd8:	2288      	movs	r2, #136	; 0x88
 800bdda:	4925      	ldr	r1, [pc, #148]	; (800be70 <udp_input_local_match+0xc0>)
 800bddc:	4823      	ldr	r0, [pc, #140]	; (800be6c <udp_input_local_match+0xbc>)
 800bdde:	f003 f86d 	bl	800eebc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	7a1b      	ldrb	r3, [r3, #8]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d00b      	beq.n	800be02 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	7a1a      	ldrb	r2, [r3, #8]
 800bdee:	4b21      	ldr	r3, [pc, #132]	; (800be74 <udp_input_local_match+0xc4>)
 800bdf0:	685b      	ldr	r3, [r3, #4]
 800bdf2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bdf6:	3301      	adds	r3, #1
 800bdf8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bdfa:	429a      	cmp	r2, r3
 800bdfc:	d001      	beq.n	800be02 <udp_input_local_match+0x52>
    return 0;
 800bdfe:	2300      	movs	r3, #0
 800be00:	e02b      	b.n	800be5a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800be02:	79fb      	ldrb	r3, [r7, #7]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d018      	beq.n	800be3a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d013      	beq.n	800be36 <udp_input_local_match+0x86>
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d00f      	beq.n	800be36 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800be16:	4b17      	ldr	r3, [pc, #92]	; (800be74 <udp_input_local_match+0xc4>)
 800be18:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800be1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be1e:	d00a      	beq.n	800be36 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	681a      	ldr	r2, [r3, #0]
 800be24:	4b13      	ldr	r3, [pc, #76]	; (800be74 <udp_input_local_match+0xc4>)
 800be26:	695b      	ldr	r3, [r3, #20]
 800be28:	405a      	eors	r2, r3
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	3308      	adds	r3, #8
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800be32:	2b00      	cmp	r3, #0
 800be34:	d110      	bne.n	800be58 <udp_input_local_match+0xa8>
          return 1;
 800be36:	2301      	movs	r3, #1
 800be38:	e00f      	b.n	800be5a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d009      	beq.n	800be54 <udp_input_local_match+0xa4>
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d005      	beq.n	800be54 <udp_input_local_match+0xa4>
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	681a      	ldr	r2, [r3, #0]
 800be4c:	4b09      	ldr	r3, [pc, #36]	; (800be74 <udp_input_local_match+0xc4>)
 800be4e:	695b      	ldr	r3, [r3, #20]
 800be50:	429a      	cmp	r2, r3
 800be52:	d101      	bne.n	800be58 <udp_input_local_match+0xa8>
        return 1;
 800be54:	2301      	movs	r3, #1
 800be56:	e000      	b.n	800be5a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800be58:	2300      	movs	r3, #0
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	3710      	adds	r7, #16
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}
 800be62:	bf00      	nop
 800be64:	08012084 	.word	0x08012084
 800be68:	080120b4 	.word	0x080120b4
 800be6c:	080120d8 	.word	0x080120d8
 800be70:	08012100 	.word	0x08012100
 800be74:	20004d84 	.word	0x20004d84

0800be78 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800be78:	b590      	push	{r4, r7, lr}
 800be7a:	b08d      	sub	sp, #52	; 0x34
 800be7c:	af02      	add	r7, sp, #8
 800be7e:	6078      	str	r0, [r7, #4]
 800be80:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800be82:	2300      	movs	r3, #0
 800be84:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d105      	bne.n	800be98 <udp_input+0x20>
 800be8c:	4b7c      	ldr	r3, [pc, #496]	; (800c080 <udp_input+0x208>)
 800be8e:	22cf      	movs	r2, #207	; 0xcf
 800be90:	497c      	ldr	r1, [pc, #496]	; (800c084 <udp_input+0x20c>)
 800be92:	487d      	ldr	r0, [pc, #500]	; (800c088 <udp_input+0x210>)
 800be94:	f003 f812 	bl	800eebc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d105      	bne.n	800beaa <udp_input+0x32>
 800be9e:	4b78      	ldr	r3, [pc, #480]	; (800c080 <udp_input+0x208>)
 800bea0:	22d0      	movs	r2, #208	; 0xd0
 800bea2:	497a      	ldr	r1, [pc, #488]	; (800c08c <udp_input+0x214>)
 800bea4:	4878      	ldr	r0, [pc, #480]	; (800c088 <udp_input+0x210>)
 800bea6:	f003 f809 	bl	800eebc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	895b      	ldrh	r3, [r3, #10]
 800beae:	2b07      	cmp	r3, #7
 800beb0:	d803      	bhi.n	800beba <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f7fa f95c 	bl	8006170 <pbuf_free>
    goto end;
 800beb8:	e0de      	b.n	800c078 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	685b      	ldr	r3, [r3, #4]
 800bebe:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800bec0:	4b73      	ldr	r3, [pc, #460]	; (800c090 <udp_input+0x218>)
 800bec2:	695b      	ldr	r3, [r3, #20]
 800bec4:	4a72      	ldr	r2, [pc, #456]	; (800c090 <udp_input+0x218>)
 800bec6:	6812      	ldr	r2, [r2, #0]
 800bec8:	4611      	mov	r1, r2
 800beca:	4618      	mov	r0, r3
 800becc:	f001 ffa0 	bl	800de10 <ip4_addr_isbroadcast_u32>
 800bed0:	4603      	mov	r3, r0
 800bed2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800bed4:	697b      	ldr	r3, [r7, #20]
 800bed6:	881b      	ldrh	r3, [r3, #0]
 800bed8:	b29b      	uxth	r3, r3
 800beda:	4618      	mov	r0, r3
 800bedc:	f7f8 fdea 	bl	8004ab4 <lwip_htons>
 800bee0:	4603      	mov	r3, r0
 800bee2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800bee4:	697b      	ldr	r3, [r7, #20]
 800bee6:	885b      	ldrh	r3, [r3, #2]
 800bee8:	b29b      	uxth	r3, r3
 800beea:	4618      	mov	r0, r3
 800beec:	f7f8 fde2 	bl	8004ab4 <lwip_htons>
 800bef0:	4603      	mov	r3, r0
 800bef2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800bef4:	2300      	movs	r3, #0
 800bef6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800bef8:	2300      	movs	r3, #0
 800befa:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800befc:	2300      	movs	r3, #0
 800befe:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bf00:	4b64      	ldr	r3, [pc, #400]	; (800c094 <udp_input+0x21c>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	627b      	str	r3, [r7, #36]	; 0x24
 800bf06:	e054      	b.n	800bfb2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800bf08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf0a:	8a5b      	ldrh	r3, [r3, #18]
 800bf0c:	89fa      	ldrh	r2, [r7, #14]
 800bf0e:	429a      	cmp	r2, r3
 800bf10:	d14a      	bne.n	800bfa8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800bf12:	7cfb      	ldrb	r3, [r7, #19]
 800bf14:	461a      	mov	r2, r3
 800bf16:	6839      	ldr	r1, [r7, #0]
 800bf18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bf1a:	f7ff ff49 	bl	800bdb0 <udp_input_local_match>
 800bf1e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d041      	beq.n	800bfa8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800bf24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf26:	7c1b      	ldrb	r3, [r3, #16]
 800bf28:	f003 0304 	and.w	r3, r3, #4
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d11d      	bne.n	800bf6c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800bf30:	69fb      	ldr	r3, [r7, #28]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d102      	bne.n	800bf3c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800bf36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf38:	61fb      	str	r3, [r7, #28]
 800bf3a:	e017      	b.n	800bf6c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800bf3c:	7cfb      	ldrb	r3, [r7, #19]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d014      	beq.n	800bf6c <udp_input+0xf4>
 800bf42:	4b53      	ldr	r3, [pc, #332]	; (800c090 <udp_input+0x218>)
 800bf44:	695b      	ldr	r3, [r3, #20]
 800bf46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf4a:	d10f      	bne.n	800bf6c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800bf4c:	69fb      	ldr	r3, [r7, #28]
 800bf4e:	681a      	ldr	r2, [r3, #0]
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	3304      	adds	r3, #4
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	429a      	cmp	r2, r3
 800bf58:	d008      	beq.n	800bf6c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800bf5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf5c:	681a      	ldr	r2, [r3, #0]
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	3304      	adds	r3, #4
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	429a      	cmp	r2, r3
 800bf66:	d101      	bne.n	800bf6c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800bf68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf6a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800bf6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf6e:	8a9b      	ldrh	r3, [r3, #20]
 800bf70:	8a3a      	ldrh	r2, [r7, #16]
 800bf72:	429a      	cmp	r2, r3
 800bf74:	d118      	bne.n	800bfa8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800bf76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf78:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d005      	beq.n	800bf8a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800bf7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf80:	685a      	ldr	r2, [r3, #4]
 800bf82:	4b43      	ldr	r3, [pc, #268]	; (800c090 <udp_input+0x218>)
 800bf84:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800bf86:	429a      	cmp	r2, r3
 800bf88:	d10e      	bne.n	800bfa8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800bf8a:	6a3b      	ldr	r3, [r7, #32]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d014      	beq.n	800bfba <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800bf90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf92:	68da      	ldr	r2, [r3, #12]
 800bf94:	6a3b      	ldr	r3, [r7, #32]
 800bf96:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800bf98:	4b3e      	ldr	r3, [pc, #248]	; (800c094 <udp_input+0x21c>)
 800bf9a:	681a      	ldr	r2, [r3, #0]
 800bf9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf9e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800bfa0:	4a3c      	ldr	r2, [pc, #240]	; (800c094 <udp_input+0x21c>)
 800bfa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800bfa6:	e008      	b.n	800bfba <udp_input+0x142>
      }
    }

    prev = pcb;
 800bfa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfaa:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bfac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfae:	68db      	ldr	r3, [r3, #12]
 800bfb0:	627b      	str	r3, [r7, #36]	; 0x24
 800bfb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d1a7      	bne.n	800bf08 <udp_input+0x90>
 800bfb8:	e000      	b.n	800bfbc <udp_input+0x144>
        break;
 800bfba:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800bfbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d101      	bne.n	800bfc6 <udp_input+0x14e>
    pcb = uncon_pcb;
 800bfc2:	69fb      	ldr	r3, [r7, #28]
 800bfc4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800bfc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d002      	beq.n	800bfd2 <udp_input+0x15a>
    for_us = 1;
 800bfcc:	2301      	movs	r3, #1
 800bfce:	76fb      	strb	r3, [r7, #27]
 800bfd0:	e00a      	b.n	800bfe8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	3304      	adds	r3, #4
 800bfd6:	681a      	ldr	r2, [r3, #0]
 800bfd8:	4b2d      	ldr	r3, [pc, #180]	; (800c090 <udp_input+0x218>)
 800bfda:	695b      	ldr	r3, [r3, #20]
 800bfdc:	429a      	cmp	r2, r3
 800bfde:	bf0c      	ite	eq
 800bfe0:	2301      	moveq	r3, #1
 800bfe2:	2300      	movne	r3, #0
 800bfe4:	b2db      	uxtb	r3, r3
 800bfe6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800bfe8:	7efb      	ldrb	r3, [r7, #27]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d041      	beq.n	800c072 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800bfee:	2108      	movs	r1, #8
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f7fa f837 	bl	8006064 <pbuf_remove_header>
 800bff6:	4603      	mov	r3, r0
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d00a      	beq.n	800c012 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800bffc:	4b20      	ldr	r3, [pc, #128]	; (800c080 <udp_input+0x208>)
 800bffe:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800c002:	4925      	ldr	r1, [pc, #148]	; (800c098 <udp_input+0x220>)
 800c004:	4820      	ldr	r0, [pc, #128]	; (800c088 <udp_input+0x210>)
 800c006:	f002 ff59 	bl	800eebc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f7fa f8b0 	bl	8006170 <pbuf_free>
      goto end;
 800c010:	e032      	b.n	800c078 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800c012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c014:	2b00      	cmp	r3, #0
 800c016:	d012      	beq.n	800c03e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800c018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c01a:	699b      	ldr	r3, [r3, #24]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d00a      	beq.n	800c036 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c022:	699c      	ldr	r4, [r3, #24]
 800c024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c026:	69d8      	ldr	r0, [r3, #28]
 800c028:	8a3b      	ldrh	r3, [r7, #16]
 800c02a:	9300      	str	r3, [sp, #0]
 800c02c:	4b1b      	ldr	r3, [pc, #108]	; (800c09c <udp_input+0x224>)
 800c02e:	687a      	ldr	r2, [r7, #4]
 800c030:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c032:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800c034:	e021      	b.n	800c07a <udp_input+0x202>
        pbuf_free(p);
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f7fa f89a 	bl	8006170 <pbuf_free>
        goto end;
 800c03c:	e01c      	b.n	800c078 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c03e:	7cfb      	ldrb	r3, [r7, #19]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d112      	bne.n	800c06a <udp_input+0x1f2>
 800c044:	4b12      	ldr	r3, [pc, #72]	; (800c090 <udp_input+0x218>)
 800c046:	695b      	ldr	r3, [r3, #20]
 800c048:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c04c:	2be0      	cmp	r3, #224	; 0xe0
 800c04e:	d00c      	beq.n	800c06a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c050:	4b0f      	ldr	r3, [pc, #60]	; (800c090 <udp_input+0x218>)
 800c052:	899b      	ldrh	r3, [r3, #12]
 800c054:	3308      	adds	r3, #8
 800c056:	b29b      	uxth	r3, r3
 800c058:	b21b      	sxth	r3, r3
 800c05a:	4619      	mov	r1, r3
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f7fa f874 	bl	800614a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800c062:	2103      	movs	r1, #3
 800c064:	6878      	ldr	r0, [r7, #4]
 800c066:	f001 fbb3 	bl	800d7d0 <icmp_dest_unreach>
      pbuf_free(p);
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f7fa f880 	bl	8006170 <pbuf_free>
  return;
 800c070:	e003      	b.n	800c07a <udp_input+0x202>
    pbuf_free(p);
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f7fa f87c 	bl	8006170 <pbuf_free>
  return;
 800c078:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800c07a:	372c      	adds	r7, #44	; 0x2c
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd90      	pop	{r4, r7, pc}
 800c080:	08012084 	.word	0x08012084
 800c084:	08012128 	.word	0x08012128
 800c088:	080120d8 	.word	0x080120d8
 800c08c:	08012140 	.word	0x08012140
 800c090:	20004d84 	.word	0x20004d84
 800c094:	2000a510 	.word	0x2000a510
 800c098:	0801215c 	.word	0x0801215c
 800c09c:	20004d94 	.word	0x20004d94

0800c0a0 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b082      	sub	sp, #8
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d109      	bne.n	800c0c4 <udp_send+0x24>
 800c0b0:	4b11      	ldr	r3, [pc, #68]	; (800c0f8 <udp_send+0x58>)
 800c0b2:	f240 12d5 	movw	r2, #469	; 0x1d5
 800c0b6:	4911      	ldr	r1, [pc, #68]	; (800c0fc <udp_send+0x5c>)
 800c0b8:	4811      	ldr	r0, [pc, #68]	; (800c100 <udp_send+0x60>)
 800c0ba:	f002 feff 	bl	800eebc <iprintf>
 800c0be:	f06f 030f 	mvn.w	r3, #15
 800c0c2:	e015      	b.n	800c0f0 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d109      	bne.n	800c0de <udp_send+0x3e>
 800c0ca:	4b0b      	ldr	r3, [pc, #44]	; (800c0f8 <udp_send+0x58>)
 800c0cc:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800c0d0:	490c      	ldr	r1, [pc, #48]	; (800c104 <udp_send+0x64>)
 800c0d2:	480b      	ldr	r0, [pc, #44]	; (800c100 <udp_send+0x60>)
 800c0d4:	f002 fef2 	bl	800eebc <iprintf>
 800c0d8:	f06f 030f 	mvn.w	r3, #15
 800c0dc:	e008      	b.n	800c0f0 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	1d1a      	adds	r2, r3, #4
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	8a9b      	ldrh	r3, [r3, #20]
 800c0e6:	6839      	ldr	r1, [r7, #0]
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	f000 f80d 	bl	800c108 <udp_sendto>
 800c0ee:	4603      	mov	r3, r0
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3708      	adds	r7, #8
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}
 800c0f8:	08012084 	.word	0x08012084
 800c0fc:	08012178 	.word	0x08012178
 800c100:	080120d8 	.word	0x080120d8
 800c104:	08012190 	.word	0x08012190

0800c108 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b088      	sub	sp, #32
 800c10c:	af02      	add	r7, sp, #8
 800c10e:	60f8      	str	r0, [r7, #12]
 800c110:	60b9      	str	r1, [r7, #8]
 800c112:	607a      	str	r2, [r7, #4]
 800c114:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d109      	bne.n	800c130 <udp_sendto+0x28>
 800c11c:	4b23      	ldr	r3, [pc, #140]	; (800c1ac <udp_sendto+0xa4>)
 800c11e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c122:	4923      	ldr	r1, [pc, #140]	; (800c1b0 <udp_sendto+0xa8>)
 800c124:	4823      	ldr	r0, [pc, #140]	; (800c1b4 <udp_sendto+0xac>)
 800c126:	f002 fec9 	bl	800eebc <iprintf>
 800c12a:	f06f 030f 	mvn.w	r3, #15
 800c12e:	e038      	b.n	800c1a2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800c130:	68bb      	ldr	r3, [r7, #8]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d109      	bne.n	800c14a <udp_sendto+0x42>
 800c136:	4b1d      	ldr	r3, [pc, #116]	; (800c1ac <udp_sendto+0xa4>)
 800c138:	f240 2219 	movw	r2, #537	; 0x219
 800c13c:	491e      	ldr	r1, [pc, #120]	; (800c1b8 <udp_sendto+0xb0>)
 800c13e:	481d      	ldr	r0, [pc, #116]	; (800c1b4 <udp_sendto+0xac>)
 800c140:	f002 febc 	bl	800eebc <iprintf>
 800c144:	f06f 030f 	mvn.w	r3, #15
 800c148:	e02b      	b.n	800c1a2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d109      	bne.n	800c164 <udp_sendto+0x5c>
 800c150:	4b16      	ldr	r3, [pc, #88]	; (800c1ac <udp_sendto+0xa4>)
 800c152:	f240 221a 	movw	r2, #538	; 0x21a
 800c156:	4919      	ldr	r1, [pc, #100]	; (800c1bc <udp_sendto+0xb4>)
 800c158:	4816      	ldr	r0, [pc, #88]	; (800c1b4 <udp_sendto+0xac>)
 800c15a:	f002 feaf 	bl	800eebc <iprintf>
 800c15e:	f06f 030f 	mvn.w	r3, #15
 800c162:	e01e      	b.n	800c1a2 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	7a1b      	ldrb	r3, [r3, #8]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d006      	beq.n	800c17a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	7a1b      	ldrb	r3, [r3, #8]
 800c170:	4618      	mov	r0, r3
 800c172:	f7f9 fc9d 	bl	8005ab0 <netif_get_by_index>
 800c176:	6178      	str	r0, [r7, #20]
 800c178:	e003      	b.n	800c182 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f001 fbb2 	bl	800d8e4 <ip4_route>
 800c180:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800c182:	697b      	ldr	r3, [r7, #20]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d102      	bne.n	800c18e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800c188:	f06f 0303 	mvn.w	r3, #3
 800c18c:	e009      	b.n	800c1a2 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800c18e:	887a      	ldrh	r2, [r7, #2]
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	9300      	str	r3, [sp, #0]
 800c194:	4613      	mov	r3, r2
 800c196:	687a      	ldr	r2, [r7, #4]
 800c198:	68b9      	ldr	r1, [r7, #8]
 800c19a:	68f8      	ldr	r0, [r7, #12]
 800c19c:	f000 f810 	bl	800c1c0 <udp_sendto_if>
 800c1a0:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	3718      	adds	r7, #24
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}
 800c1aa:	bf00      	nop
 800c1ac:	08012084 	.word	0x08012084
 800c1b0:	080121a8 	.word	0x080121a8
 800c1b4:	080120d8 	.word	0x080120d8
 800c1b8:	080121c0 	.word	0x080121c0
 800c1bc:	080121dc 	.word	0x080121dc

0800c1c0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b088      	sub	sp, #32
 800c1c4:	af02      	add	r7, sp, #8
 800c1c6:	60f8      	str	r0, [r7, #12]
 800c1c8:	60b9      	str	r1, [r7, #8]
 800c1ca:	607a      	str	r2, [r7, #4]
 800c1cc:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d109      	bne.n	800c1e8 <udp_sendto_if+0x28>
 800c1d4:	4b2e      	ldr	r3, [pc, #184]	; (800c290 <udp_sendto_if+0xd0>)
 800c1d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c1da:	492e      	ldr	r1, [pc, #184]	; (800c294 <udp_sendto_if+0xd4>)
 800c1dc:	482e      	ldr	r0, [pc, #184]	; (800c298 <udp_sendto_if+0xd8>)
 800c1de:	f002 fe6d 	bl	800eebc <iprintf>
 800c1e2:	f06f 030f 	mvn.w	r3, #15
 800c1e6:	e04f      	b.n	800c288 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800c1e8:	68bb      	ldr	r3, [r7, #8]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d109      	bne.n	800c202 <udp_sendto_if+0x42>
 800c1ee:	4b28      	ldr	r3, [pc, #160]	; (800c290 <udp_sendto_if+0xd0>)
 800c1f0:	f240 2281 	movw	r2, #641	; 0x281
 800c1f4:	4929      	ldr	r1, [pc, #164]	; (800c29c <udp_sendto_if+0xdc>)
 800c1f6:	4828      	ldr	r0, [pc, #160]	; (800c298 <udp_sendto_if+0xd8>)
 800c1f8:	f002 fe60 	bl	800eebc <iprintf>
 800c1fc:	f06f 030f 	mvn.w	r3, #15
 800c200:	e042      	b.n	800c288 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d109      	bne.n	800c21c <udp_sendto_if+0x5c>
 800c208:	4b21      	ldr	r3, [pc, #132]	; (800c290 <udp_sendto_if+0xd0>)
 800c20a:	f240 2282 	movw	r2, #642	; 0x282
 800c20e:	4924      	ldr	r1, [pc, #144]	; (800c2a0 <udp_sendto_if+0xe0>)
 800c210:	4821      	ldr	r0, [pc, #132]	; (800c298 <udp_sendto_if+0xd8>)
 800c212:	f002 fe53 	bl	800eebc <iprintf>
 800c216:	f06f 030f 	mvn.w	r3, #15
 800c21a:	e035      	b.n	800c288 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800c21c:	6a3b      	ldr	r3, [r7, #32]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d109      	bne.n	800c236 <udp_sendto_if+0x76>
 800c222:	4b1b      	ldr	r3, [pc, #108]	; (800c290 <udp_sendto_if+0xd0>)
 800c224:	f240 2283 	movw	r2, #643	; 0x283
 800c228:	491e      	ldr	r1, [pc, #120]	; (800c2a4 <udp_sendto_if+0xe4>)
 800c22a:	481b      	ldr	r0, [pc, #108]	; (800c298 <udp_sendto_if+0xd8>)
 800c22c:	f002 fe46 	bl	800eebc <iprintf>
 800c230:	f06f 030f 	mvn.w	r3, #15
 800c234:	e028      	b.n	800c288 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d009      	beq.n	800c250 <udp_sendto_if+0x90>
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d005      	beq.n	800c250 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c24c:	2be0      	cmp	r3, #224	; 0xe0
 800c24e:	d103      	bne.n	800c258 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800c250:	6a3b      	ldr	r3, [r7, #32]
 800c252:	3304      	adds	r3, #4
 800c254:	617b      	str	r3, [r7, #20]
 800c256:	e00b      	b.n	800c270 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	681a      	ldr	r2, [r3, #0]
 800c25c:	6a3b      	ldr	r3, [r7, #32]
 800c25e:	3304      	adds	r3, #4
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	429a      	cmp	r2, r3
 800c264:	d002      	beq.n	800c26c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800c266:	f06f 0303 	mvn.w	r3, #3
 800c26a:	e00d      	b.n	800c288 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800c270:	887a      	ldrh	r2, [r7, #2]
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	9301      	str	r3, [sp, #4]
 800c276:	6a3b      	ldr	r3, [r7, #32]
 800c278:	9300      	str	r3, [sp, #0]
 800c27a:	4613      	mov	r3, r2
 800c27c:	687a      	ldr	r2, [r7, #4]
 800c27e:	68b9      	ldr	r1, [r7, #8]
 800c280:	68f8      	ldr	r0, [r7, #12]
 800c282:	f000 f811 	bl	800c2a8 <udp_sendto_if_src>
 800c286:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800c288:	4618      	mov	r0, r3
 800c28a:	3718      	adds	r7, #24
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}
 800c290:	08012084 	.word	0x08012084
 800c294:	080121f8 	.word	0x080121f8
 800c298:	080120d8 	.word	0x080120d8
 800c29c:	08012214 	.word	0x08012214
 800c2a0:	08012230 	.word	0x08012230
 800c2a4:	08012250 	.word	0x08012250

0800c2a8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b08c      	sub	sp, #48	; 0x30
 800c2ac:	af04      	add	r7, sp, #16
 800c2ae:	60f8      	str	r0, [r7, #12]
 800c2b0:	60b9      	str	r1, [r7, #8]
 800c2b2:	607a      	str	r2, [r7, #4]
 800c2b4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d109      	bne.n	800c2d0 <udp_sendto_if_src+0x28>
 800c2bc:	4b65      	ldr	r3, [pc, #404]	; (800c454 <udp_sendto_if_src+0x1ac>)
 800c2be:	f240 22d1 	movw	r2, #721	; 0x2d1
 800c2c2:	4965      	ldr	r1, [pc, #404]	; (800c458 <udp_sendto_if_src+0x1b0>)
 800c2c4:	4865      	ldr	r0, [pc, #404]	; (800c45c <udp_sendto_if_src+0x1b4>)
 800c2c6:	f002 fdf9 	bl	800eebc <iprintf>
 800c2ca:	f06f 030f 	mvn.w	r3, #15
 800c2ce:	e0bc      	b.n	800c44a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d109      	bne.n	800c2ea <udp_sendto_if_src+0x42>
 800c2d6:	4b5f      	ldr	r3, [pc, #380]	; (800c454 <udp_sendto_if_src+0x1ac>)
 800c2d8:	f240 22d2 	movw	r2, #722	; 0x2d2
 800c2dc:	4960      	ldr	r1, [pc, #384]	; (800c460 <udp_sendto_if_src+0x1b8>)
 800c2de:	485f      	ldr	r0, [pc, #380]	; (800c45c <udp_sendto_if_src+0x1b4>)
 800c2e0:	f002 fdec 	bl	800eebc <iprintf>
 800c2e4:	f06f 030f 	mvn.w	r3, #15
 800c2e8:	e0af      	b.n	800c44a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d109      	bne.n	800c304 <udp_sendto_if_src+0x5c>
 800c2f0:	4b58      	ldr	r3, [pc, #352]	; (800c454 <udp_sendto_if_src+0x1ac>)
 800c2f2:	f240 22d3 	movw	r2, #723	; 0x2d3
 800c2f6:	495b      	ldr	r1, [pc, #364]	; (800c464 <udp_sendto_if_src+0x1bc>)
 800c2f8:	4858      	ldr	r0, [pc, #352]	; (800c45c <udp_sendto_if_src+0x1b4>)
 800c2fa:	f002 fddf 	bl	800eebc <iprintf>
 800c2fe:	f06f 030f 	mvn.w	r3, #15
 800c302:	e0a2      	b.n	800c44a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800c304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c306:	2b00      	cmp	r3, #0
 800c308:	d109      	bne.n	800c31e <udp_sendto_if_src+0x76>
 800c30a:	4b52      	ldr	r3, [pc, #328]	; (800c454 <udp_sendto_if_src+0x1ac>)
 800c30c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800c310:	4955      	ldr	r1, [pc, #340]	; (800c468 <udp_sendto_if_src+0x1c0>)
 800c312:	4852      	ldr	r0, [pc, #328]	; (800c45c <udp_sendto_if_src+0x1b4>)
 800c314:	f002 fdd2 	bl	800eebc <iprintf>
 800c318:	f06f 030f 	mvn.w	r3, #15
 800c31c:	e095      	b.n	800c44a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800c31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c320:	2b00      	cmp	r3, #0
 800c322:	d109      	bne.n	800c338 <udp_sendto_if_src+0x90>
 800c324:	4b4b      	ldr	r3, [pc, #300]	; (800c454 <udp_sendto_if_src+0x1ac>)
 800c326:	f240 22d5 	movw	r2, #725	; 0x2d5
 800c32a:	4950      	ldr	r1, [pc, #320]	; (800c46c <udp_sendto_if_src+0x1c4>)
 800c32c:	484b      	ldr	r0, [pc, #300]	; (800c45c <udp_sendto_if_src+0x1b4>)
 800c32e:	f002 fdc5 	bl	800eebc <iprintf>
 800c332:	f06f 030f 	mvn.w	r3, #15
 800c336:	e088      	b.n	800c44a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	8a5b      	ldrh	r3, [r3, #18]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d10f      	bne.n	800c360 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800c340:	68f9      	ldr	r1, [r7, #12]
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	8a5b      	ldrh	r3, [r3, #18]
 800c346:	461a      	mov	r2, r3
 800c348:	68f8      	ldr	r0, [r7, #12]
 800c34a:	f000 f893 	bl	800c474 <udp_bind>
 800c34e:	4603      	mov	r3, r0
 800c350:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800c352:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d002      	beq.n	800c360 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800c35a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c35e:	e074      	b.n	800c44a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	891b      	ldrh	r3, [r3, #8]
 800c364:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800c368:	4293      	cmp	r3, r2
 800c36a:	d902      	bls.n	800c372 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800c36c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c370:	e06b      	b.n	800c44a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800c372:	2108      	movs	r1, #8
 800c374:	68b8      	ldr	r0, [r7, #8]
 800c376:	f7f9 fe65 	bl	8006044 <pbuf_add_header>
 800c37a:	4603      	mov	r3, r0
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d015      	beq.n	800c3ac <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800c380:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c384:	2108      	movs	r1, #8
 800c386:	2022      	movs	r0, #34	; 0x22
 800c388:	f7f9 fc0e 	bl	8005ba8 <pbuf_alloc>
 800c38c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800c38e:	69fb      	ldr	r3, [r7, #28]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d102      	bne.n	800c39a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800c394:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c398:	e057      	b.n	800c44a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	891b      	ldrh	r3, [r3, #8]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d006      	beq.n	800c3b0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800c3a2:	68b9      	ldr	r1, [r7, #8]
 800c3a4:	69f8      	ldr	r0, [r7, #28]
 800c3a6:	f7f9 fffb 	bl	80063a0 <pbuf_chain>
 800c3aa:	e001      	b.n	800c3b0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800c3b0:	69fb      	ldr	r3, [r7, #28]
 800c3b2:	895b      	ldrh	r3, [r3, #10]
 800c3b4:	2b07      	cmp	r3, #7
 800c3b6:	d806      	bhi.n	800c3c6 <udp_sendto_if_src+0x11e>
 800c3b8:	4b26      	ldr	r3, [pc, #152]	; (800c454 <udp_sendto_if_src+0x1ac>)
 800c3ba:	f240 320d 	movw	r2, #781	; 0x30d
 800c3be:	492c      	ldr	r1, [pc, #176]	; (800c470 <udp_sendto_if_src+0x1c8>)
 800c3c0:	4826      	ldr	r0, [pc, #152]	; (800c45c <udp_sendto_if_src+0x1b4>)
 800c3c2:	f002 fd7b 	bl	800eebc <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800c3c6:	69fb      	ldr	r3, [r7, #28]
 800c3c8:	685b      	ldr	r3, [r3, #4]
 800c3ca:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	8a5b      	ldrh	r3, [r3, #18]
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	f7f8 fb6f 	bl	8004ab4 <lwip_htons>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	461a      	mov	r2, r3
 800c3da:	697b      	ldr	r3, [r7, #20]
 800c3dc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800c3de:	887b      	ldrh	r3, [r7, #2]
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f7f8 fb67 	bl	8004ab4 <lwip_htons>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	461a      	mov	r2, r3
 800c3ea:	697b      	ldr	r3, [r7, #20]
 800c3ec:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	719a      	strb	r2, [r3, #6]
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800c3f8:	69fb      	ldr	r3, [r7, #28]
 800c3fa:	891b      	ldrh	r3, [r3, #8]
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	f7f8 fb59 	bl	8004ab4 <lwip_htons>
 800c402:	4603      	mov	r3, r0
 800c404:	461a      	mov	r2, r3
 800c406:	697b      	ldr	r3, [r7, #20]
 800c408:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800c40a:	2311      	movs	r3, #17
 800c40c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	7adb      	ldrb	r3, [r3, #11]
 800c412:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	7a9b      	ldrb	r3, [r3, #10]
 800c418:	7cb9      	ldrb	r1, [r7, #18]
 800c41a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c41c:	9202      	str	r2, [sp, #8]
 800c41e:	7cfa      	ldrb	r2, [r7, #19]
 800c420:	9201      	str	r2, [sp, #4]
 800c422:	9300      	str	r3, [sp, #0]
 800c424:	460b      	mov	r3, r1
 800c426:	687a      	ldr	r2, [r7, #4]
 800c428:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c42a:	69f8      	ldr	r0, [r7, #28]
 800c42c:	f001 fc42 	bl	800dcb4 <ip4_output_if_src>
 800c430:	4603      	mov	r3, r0
 800c432:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800c434:	69fa      	ldr	r2, [r7, #28]
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	429a      	cmp	r2, r3
 800c43a:	d004      	beq.n	800c446 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800c43c:	69f8      	ldr	r0, [r7, #28]
 800c43e:	f7f9 fe97 	bl	8006170 <pbuf_free>
    q = NULL;
 800c442:	2300      	movs	r3, #0
 800c444:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800c446:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3720      	adds	r7, #32
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}
 800c452:	bf00      	nop
 800c454:	08012084 	.word	0x08012084
 800c458:	08012270 	.word	0x08012270
 800c45c:	080120d8 	.word	0x080120d8
 800c460:	08012290 	.word	0x08012290
 800c464:	080122b0 	.word	0x080122b0
 800c468:	080122d4 	.word	0x080122d4
 800c46c:	080122f8 	.word	0x080122f8
 800c470:	0801231c 	.word	0x0801231c

0800c474 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b086      	sub	sp, #24
 800c478:	af00      	add	r7, sp, #0
 800c47a:	60f8      	str	r0, [r7, #12]
 800c47c:	60b9      	str	r1, [r7, #8]
 800c47e:	4613      	mov	r3, r2
 800c480:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d101      	bne.n	800c48c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800c488:	4b39      	ldr	r3, [pc, #228]	; (800c570 <udp_bind+0xfc>)
 800c48a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d109      	bne.n	800c4a6 <udp_bind+0x32>
 800c492:	4b38      	ldr	r3, [pc, #224]	; (800c574 <udp_bind+0x100>)
 800c494:	f240 32b7 	movw	r2, #951	; 0x3b7
 800c498:	4937      	ldr	r1, [pc, #220]	; (800c578 <udp_bind+0x104>)
 800c49a:	4838      	ldr	r0, [pc, #224]	; (800c57c <udp_bind+0x108>)
 800c49c:	f002 fd0e 	bl	800eebc <iprintf>
 800c4a0:	f06f 030f 	mvn.w	r3, #15
 800c4a4:	e060      	b.n	800c568 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c4aa:	4b35      	ldr	r3, [pc, #212]	; (800c580 <udp_bind+0x10c>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	617b      	str	r3, [r7, #20]
 800c4b0:	e009      	b.n	800c4c6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800c4b2:	68fa      	ldr	r2, [r7, #12]
 800c4b4:	697b      	ldr	r3, [r7, #20]
 800c4b6:	429a      	cmp	r2, r3
 800c4b8:	d102      	bne.n	800c4c0 <udp_bind+0x4c>
      rebind = 1;
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	74fb      	strb	r3, [r7, #19]
      break;
 800c4be:	e005      	b.n	800c4cc <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c4c0:	697b      	ldr	r3, [r7, #20]
 800c4c2:	68db      	ldr	r3, [r3, #12]
 800c4c4:	617b      	str	r3, [r7, #20]
 800c4c6:	697b      	ldr	r3, [r7, #20]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d1f2      	bne.n	800c4b2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800c4cc:	88fb      	ldrh	r3, [r7, #6]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d109      	bne.n	800c4e6 <udp_bind+0x72>
    port = udp_new_port();
 800c4d2:	f7ff fc35 	bl	800bd40 <udp_new_port>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c4da:	88fb      	ldrh	r3, [r7, #6]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d12c      	bne.n	800c53a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800c4e0:	f06f 0307 	mvn.w	r3, #7
 800c4e4:	e040      	b.n	800c568 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c4e6:	4b26      	ldr	r3, [pc, #152]	; (800c580 <udp_bind+0x10c>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	617b      	str	r3, [r7, #20]
 800c4ec:	e022      	b.n	800c534 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800c4ee:	68fa      	ldr	r2, [r7, #12]
 800c4f0:	697b      	ldr	r3, [r7, #20]
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d01b      	beq.n	800c52e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800c4f6:	697b      	ldr	r3, [r7, #20]
 800c4f8:	8a5b      	ldrh	r3, [r3, #18]
 800c4fa:	88fa      	ldrh	r2, [r7, #6]
 800c4fc:	429a      	cmp	r2, r3
 800c4fe:	d116      	bne.n	800c52e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c500:	697b      	ldr	r3, [r7, #20]
 800c502:	681a      	ldr	r2, [r3, #0]
 800c504:	68bb      	ldr	r3, [r7, #8]
 800c506:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800c508:	429a      	cmp	r2, r3
 800c50a:	d00d      	beq.n	800c528 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c50c:	68bb      	ldr	r3, [r7, #8]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d00a      	beq.n	800c528 <udp_bind+0xb4>
 800c512:	68bb      	ldr	r3, [r7, #8]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d006      	beq.n	800c528 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800c51a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d003      	beq.n	800c528 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800c520:	697b      	ldr	r3, [r7, #20]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d102      	bne.n	800c52e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800c528:	f06f 0307 	mvn.w	r3, #7
 800c52c:	e01c      	b.n	800c568 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c52e:	697b      	ldr	r3, [r7, #20]
 800c530:	68db      	ldr	r3, [r3, #12]
 800c532:	617b      	str	r3, [r7, #20]
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d1d9      	bne.n	800c4ee <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d002      	beq.n	800c546 <udp_bind+0xd2>
 800c540:	68bb      	ldr	r3, [r7, #8]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	e000      	b.n	800c548 <udp_bind+0xd4>
 800c546:	2300      	movs	r3, #0
 800c548:	68fa      	ldr	r2, [r7, #12]
 800c54a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	88fa      	ldrh	r2, [r7, #6]
 800c550:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800c552:	7cfb      	ldrb	r3, [r7, #19]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d106      	bne.n	800c566 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800c558:	4b09      	ldr	r3, [pc, #36]	; (800c580 <udp_bind+0x10c>)
 800c55a:	681a      	ldr	r2, [r3, #0]
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800c560:	4a07      	ldr	r2, [pc, #28]	; (800c580 <udp_bind+0x10c>)
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800c566:	2300      	movs	r3, #0
}
 800c568:	4618      	mov	r0, r3
 800c56a:	3718      	adds	r7, #24
 800c56c:	46bd      	mov	sp, r7
 800c56e:	bd80      	pop	{r7, pc}
 800c570:	08012b98 	.word	0x08012b98
 800c574:	08012084 	.word	0x08012084
 800c578:	0801234c 	.word	0x0801234c
 800c57c:	080120d8 	.word	0x080120d8
 800c580:	2000a510 	.word	0x2000a510

0800c584 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b086      	sub	sp, #24
 800c588:	af00      	add	r7, sp, #0
 800c58a:	60f8      	str	r0, [r7, #12]
 800c58c:	60b9      	str	r1, [r7, #8]
 800c58e:	4613      	mov	r3, r2
 800c590:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d109      	bne.n	800c5ac <udp_connect+0x28>
 800c598:	4b2c      	ldr	r3, [pc, #176]	; (800c64c <udp_connect+0xc8>)
 800c59a:	f240 4235 	movw	r2, #1077	; 0x435
 800c59e:	492c      	ldr	r1, [pc, #176]	; (800c650 <udp_connect+0xcc>)
 800c5a0:	482c      	ldr	r0, [pc, #176]	; (800c654 <udp_connect+0xd0>)
 800c5a2:	f002 fc8b 	bl	800eebc <iprintf>
 800c5a6:	f06f 030f 	mvn.w	r3, #15
 800c5aa:	e04b      	b.n	800c644 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d109      	bne.n	800c5c6 <udp_connect+0x42>
 800c5b2:	4b26      	ldr	r3, [pc, #152]	; (800c64c <udp_connect+0xc8>)
 800c5b4:	f240 4236 	movw	r2, #1078	; 0x436
 800c5b8:	4927      	ldr	r1, [pc, #156]	; (800c658 <udp_connect+0xd4>)
 800c5ba:	4826      	ldr	r0, [pc, #152]	; (800c654 <udp_connect+0xd0>)
 800c5bc:	f002 fc7e 	bl	800eebc <iprintf>
 800c5c0:	f06f 030f 	mvn.w	r3, #15
 800c5c4:	e03e      	b.n	800c644 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	8a5b      	ldrh	r3, [r3, #18]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d10f      	bne.n	800c5ee <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800c5ce:	68f9      	ldr	r1, [r7, #12]
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	8a5b      	ldrh	r3, [r3, #18]
 800c5d4:	461a      	mov	r2, r3
 800c5d6:	68f8      	ldr	r0, [r7, #12]
 800c5d8:	f7ff ff4c 	bl	800c474 <udp_bind>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800c5e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d002      	beq.n	800c5ee <udp_connect+0x6a>
      return err;
 800c5e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c5ec:	e02a      	b.n	800c644 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800c5ee:	68bb      	ldr	r3, [r7, #8]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d002      	beq.n	800c5fa <udp_connect+0x76>
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	e000      	b.n	800c5fc <udp_connect+0x78>
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	68fa      	ldr	r2, [r7, #12]
 800c5fe:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	88fa      	ldrh	r2, [r7, #6]
 800c604:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	7c1b      	ldrb	r3, [r3, #16]
 800c60a:	f043 0304 	orr.w	r3, r3, #4
 800c60e:	b2da      	uxtb	r2, r3
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c614:	4b11      	ldr	r3, [pc, #68]	; (800c65c <udp_connect+0xd8>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	617b      	str	r3, [r7, #20]
 800c61a:	e008      	b.n	800c62e <udp_connect+0xaa>
    if (pcb == ipcb) {
 800c61c:	68fa      	ldr	r2, [r7, #12]
 800c61e:	697b      	ldr	r3, [r7, #20]
 800c620:	429a      	cmp	r2, r3
 800c622:	d101      	bne.n	800c628 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800c624:	2300      	movs	r3, #0
 800c626:	e00d      	b.n	800c644 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c628:	697b      	ldr	r3, [r7, #20]
 800c62a:	68db      	ldr	r3, [r3, #12]
 800c62c:	617b      	str	r3, [r7, #20]
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d1f3      	bne.n	800c61c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800c634:	4b09      	ldr	r3, [pc, #36]	; (800c65c <udp_connect+0xd8>)
 800c636:	681a      	ldr	r2, [r3, #0]
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800c63c:	4a07      	ldr	r2, [pc, #28]	; (800c65c <udp_connect+0xd8>)
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800c642:	2300      	movs	r3, #0
}
 800c644:	4618      	mov	r0, r3
 800c646:	3718      	adds	r7, #24
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}
 800c64c:	08012084 	.word	0x08012084
 800c650:	08012364 	.word	0x08012364
 800c654:	080120d8 	.word	0x080120d8
 800c658:	08012380 	.word	0x08012380
 800c65c:	2000a510 	.word	0x2000a510

0800c660 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b084      	sub	sp, #16
 800c664:	af00      	add	r7, sp, #0
 800c666:	60f8      	str	r0, [r7, #12]
 800c668:	60b9      	str	r1, [r7, #8]
 800c66a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d107      	bne.n	800c682 <udp_recv+0x22>
 800c672:	4b08      	ldr	r3, [pc, #32]	; (800c694 <udp_recv+0x34>)
 800c674:	f240 428a 	movw	r2, #1162	; 0x48a
 800c678:	4907      	ldr	r1, [pc, #28]	; (800c698 <udp_recv+0x38>)
 800c67a:	4808      	ldr	r0, [pc, #32]	; (800c69c <udp_recv+0x3c>)
 800c67c:	f002 fc1e 	bl	800eebc <iprintf>
 800c680:	e005      	b.n	800c68e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	68ba      	ldr	r2, [r7, #8]
 800c686:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	687a      	ldr	r2, [r7, #4]
 800c68c:	61da      	str	r2, [r3, #28]
}
 800c68e:	3710      	adds	r7, #16
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}
 800c694:	08012084 	.word	0x08012084
 800c698:	080123b8 	.word	0x080123b8
 800c69c:	080120d8 	.word	0x080120d8

0800c6a0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b082      	sub	sp, #8
 800c6a4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800c6a6:	2000      	movs	r0, #0
 800c6a8:	f7f8 fe7c 	bl	80053a4 <memp_malloc>
 800c6ac:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d007      	beq.n	800c6c4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800c6b4:	2220      	movs	r2, #32
 800c6b6:	2100      	movs	r1, #0
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f002 fc9e 	bl	800effa <memset>
    pcb->ttl = UDP_TTL;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	22ff      	movs	r2, #255	; 0xff
 800c6c2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800c6c4:	687b      	ldr	r3, [r7, #4]
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	3708      	adds	r7, #8
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}
	...

0800c6d0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c6d0:	b480      	push	{r7}
 800c6d2:	b085      	sub	sp, #20
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
 800c6d8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d01e      	beq.n	800c71e <udp_netif_ip_addr_changed+0x4e>
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d01a      	beq.n	800c71e <udp_netif_ip_addr_changed+0x4e>
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d017      	beq.n	800c71e <udp_netif_ip_addr_changed+0x4e>
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d013      	beq.n	800c71e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c6f6:	4b0d      	ldr	r3, [pc, #52]	; (800c72c <udp_netif_ip_addr_changed+0x5c>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	60fb      	str	r3, [r7, #12]
 800c6fc:	e00c      	b.n	800c718 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	681a      	ldr	r2, [r3, #0]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	429a      	cmp	r2, r3
 800c708:	d103      	bne.n	800c712 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	681a      	ldr	r2, [r3, #0]
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	68db      	ldr	r3, [r3, #12]
 800c716:	60fb      	str	r3, [r7, #12]
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d1ef      	bne.n	800c6fe <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800c71e:	bf00      	nop
 800c720:	3714      	adds	r7, #20
 800c722:	46bd      	mov	sp, r7
 800c724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c728:	4770      	bx	lr
 800c72a:	bf00      	nop
 800c72c:	2000a510 	.word	0x2000a510

0800c730 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b082      	sub	sp, #8
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800c738:	4915      	ldr	r1, [pc, #84]	; (800c790 <etharp_free_entry+0x60>)
 800c73a:	687a      	ldr	r2, [r7, #4]
 800c73c:	4613      	mov	r3, r2
 800c73e:	005b      	lsls	r3, r3, #1
 800c740:	4413      	add	r3, r2
 800c742:	00db      	lsls	r3, r3, #3
 800c744:	440b      	add	r3, r1
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d013      	beq.n	800c774 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800c74c:	4910      	ldr	r1, [pc, #64]	; (800c790 <etharp_free_entry+0x60>)
 800c74e:	687a      	ldr	r2, [r7, #4]
 800c750:	4613      	mov	r3, r2
 800c752:	005b      	lsls	r3, r3, #1
 800c754:	4413      	add	r3, r2
 800c756:	00db      	lsls	r3, r3, #3
 800c758:	440b      	add	r3, r1
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	4618      	mov	r0, r3
 800c75e:	f7f9 fd07 	bl	8006170 <pbuf_free>
    arp_table[i].q = NULL;
 800c762:	490b      	ldr	r1, [pc, #44]	; (800c790 <etharp_free_entry+0x60>)
 800c764:	687a      	ldr	r2, [r7, #4]
 800c766:	4613      	mov	r3, r2
 800c768:	005b      	lsls	r3, r3, #1
 800c76a:	4413      	add	r3, r2
 800c76c:	00db      	lsls	r3, r3, #3
 800c76e:	440b      	add	r3, r1
 800c770:	2200      	movs	r2, #0
 800c772:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c774:	4906      	ldr	r1, [pc, #24]	; (800c790 <etharp_free_entry+0x60>)
 800c776:	687a      	ldr	r2, [r7, #4]
 800c778:	4613      	mov	r3, r2
 800c77a:	005b      	lsls	r3, r3, #1
 800c77c:	4413      	add	r3, r2
 800c77e:	00db      	lsls	r3, r3, #3
 800c780:	440b      	add	r3, r1
 800c782:	3314      	adds	r3, #20
 800c784:	2200      	movs	r2, #0
 800c786:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800c788:	bf00      	nop
 800c78a:	3708      	adds	r7, #8
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}
 800c790:	2000a514 	.word	0x2000a514

0800c794 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b082      	sub	sp, #8
 800c798:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c79a:	2300      	movs	r3, #0
 800c79c:	607b      	str	r3, [r7, #4]
 800c79e:	e096      	b.n	800c8ce <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800c7a0:	494f      	ldr	r1, [pc, #316]	; (800c8e0 <etharp_tmr+0x14c>)
 800c7a2:	687a      	ldr	r2, [r7, #4]
 800c7a4:	4613      	mov	r3, r2
 800c7a6:	005b      	lsls	r3, r3, #1
 800c7a8:	4413      	add	r3, r2
 800c7aa:	00db      	lsls	r3, r3, #3
 800c7ac:	440b      	add	r3, r1
 800c7ae:	3314      	adds	r3, #20
 800c7b0:	781b      	ldrb	r3, [r3, #0]
 800c7b2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800c7b4:	78fb      	ldrb	r3, [r7, #3]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	f000 8086 	beq.w	800c8c8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800c7bc:	4948      	ldr	r1, [pc, #288]	; (800c8e0 <etharp_tmr+0x14c>)
 800c7be:	687a      	ldr	r2, [r7, #4]
 800c7c0:	4613      	mov	r3, r2
 800c7c2:	005b      	lsls	r3, r3, #1
 800c7c4:	4413      	add	r3, r2
 800c7c6:	00db      	lsls	r3, r3, #3
 800c7c8:	440b      	add	r3, r1
 800c7ca:	3312      	adds	r3, #18
 800c7cc:	881b      	ldrh	r3, [r3, #0]
 800c7ce:	3301      	adds	r3, #1
 800c7d0:	b298      	uxth	r0, r3
 800c7d2:	4943      	ldr	r1, [pc, #268]	; (800c8e0 <etharp_tmr+0x14c>)
 800c7d4:	687a      	ldr	r2, [r7, #4]
 800c7d6:	4613      	mov	r3, r2
 800c7d8:	005b      	lsls	r3, r3, #1
 800c7da:	4413      	add	r3, r2
 800c7dc:	00db      	lsls	r3, r3, #3
 800c7de:	440b      	add	r3, r1
 800c7e0:	3312      	adds	r3, #18
 800c7e2:	4602      	mov	r2, r0
 800c7e4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c7e6:	493e      	ldr	r1, [pc, #248]	; (800c8e0 <etharp_tmr+0x14c>)
 800c7e8:	687a      	ldr	r2, [r7, #4]
 800c7ea:	4613      	mov	r3, r2
 800c7ec:	005b      	lsls	r3, r3, #1
 800c7ee:	4413      	add	r3, r2
 800c7f0:	00db      	lsls	r3, r3, #3
 800c7f2:	440b      	add	r3, r1
 800c7f4:	3312      	adds	r3, #18
 800c7f6:	881b      	ldrh	r3, [r3, #0]
 800c7f8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800c7fc:	d215      	bcs.n	800c82a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c7fe:	4938      	ldr	r1, [pc, #224]	; (800c8e0 <etharp_tmr+0x14c>)
 800c800:	687a      	ldr	r2, [r7, #4]
 800c802:	4613      	mov	r3, r2
 800c804:	005b      	lsls	r3, r3, #1
 800c806:	4413      	add	r3, r2
 800c808:	00db      	lsls	r3, r3, #3
 800c80a:	440b      	add	r3, r1
 800c80c:	3314      	adds	r3, #20
 800c80e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c810:	2b01      	cmp	r3, #1
 800c812:	d10e      	bne.n	800c832 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800c814:	4932      	ldr	r1, [pc, #200]	; (800c8e0 <etharp_tmr+0x14c>)
 800c816:	687a      	ldr	r2, [r7, #4]
 800c818:	4613      	mov	r3, r2
 800c81a:	005b      	lsls	r3, r3, #1
 800c81c:	4413      	add	r3, r2
 800c81e:	00db      	lsls	r3, r3, #3
 800c820:	440b      	add	r3, r1
 800c822:	3312      	adds	r3, #18
 800c824:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c826:	2b04      	cmp	r3, #4
 800c828:	d903      	bls.n	800c832 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	f7ff ff80 	bl	800c730 <etharp_free_entry>
 800c830:	e04a      	b.n	800c8c8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800c832:	492b      	ldr	r1, [pc, #172]	; (800c8e0 <etharp_tmr+0x14c>)
 800c834:	687a      	ldr	r2, [r7, #4]
 800c836:	4613      	mov	r3, r2
 800c838:	005b      	lsls	r3, r3, #1
 800c83a:	4413      	add	r3, r2
 800c83c:	00db      	lsls	r3, r3, #3
 800c83e:	440b      	add	r3, r1
 800c840:	3314      	adds	r3, #20
 800c842:	781b      	ldrb	r3, [r3, #0]
 800c844:	2b03      	cmp	r3, #3
 800c846:	d10a      	bne.n	800c85e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800c848:	4925      	ldr	r1, [pc, #148]	; (800c8e0 <etharp_tmr+0x14c>)
 800c84a:	687a      	ldr	r2, [r7, #4]
 800c84c:	4613      	mov	r3, r2
 800c84e:	005b      	lsls	r3, r3, #1
 800c850:	4413      	add	r3, r2
 800c852:	00db      	lsls	r3, r3, #3
 800c854:	440b      	add	r3, r1
 800c856:	3314      	adds	r3, #20
 800c858:	2204      	movs	r2, #4
 800c85a:	701a      	strb	r2, [r3, #0]
 800c85c:	e034      	b.n	800c8c8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800c85e:	4920      	ldr	r1, [pc, #128]	; (800c8e0 <etharp_tmr+0x14c>)
 800c860:	687a      	ldr	r2, [r7, #4]
 800c862:	4613      	mov	r3, r2
 800c864:	005b      	lsls	r3, r3, #1
 800c866:	4413      	add	r3, r2
 800c868:	00db      	lsls	r3, r3, #3
 800c86a:	440b      	add	r3, r1
 800c86c:	3314      	adds	r3, #20
 800c86e:	781b      	ldrb	r3, [r3, #0]
 800c870:	2b04      	cmp	r3, #4
 800c872:	d10a      	bne.n	800c88a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800c874:	491a      	ldr	r1, [pc, #104]	; (800c8e0 <etharp_tmr+0x14c>)
 800c876:	687a      	ldr	r2, [r7, #4]
 800c878:	4613      	mov	r3, r2
 800c87a:	005b      	lsls	r3, r3, #1
 800c87c:	4413      	add	r3, r2
 800c87e:	00db      	lsls	r3, r3, #3
 800c880:	440b      	add	r3, r1
 800c882:	3314      	adds	r3, #20
 800c884:	2202      	movs	r2, #2
 800c886:	701a      	strb	r2, [r3, #0]
 800c888:	e01e      	b.n	800c8c8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c88a:	4915      	ldr	r1, [pc, #84]	; (800c8e0 <etharp_tmr+0x14c>)
 800c88c:	687a      	ldr	r2, [r7, #4]
 800c88e:	4613      	mov	r3, r2
 800c890:	005b      	lsls	r3, r3, #1
 800c892:	4413      	add	r3, r2
 800c894:	00db      	lsls	r3, r3, #3
 800c896:	440b      	add	r3, r1
 800c898:	3314      	adds	r3, #20
 800c89a:	781b      	ldrb	r3, [r3, #0]
 800c89c:	2b01      	cmp	r3, #1
 800c89e:	d113      	bne.n	800c8c8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800c8a0:	490f      	ldr	r1, [pc, #60]	; (800c8e0 <etharp_tmr+0x14c>)
 800c8a2:	687a      	ldr	r2, [r7, #4]
 800c8a4:	4613      	mov	r3, r2
 800c8a6:	005b      	lsls	r3, r3, #1
 800c8a8:	4413      	add	r3, r2
 800c8aa:	00db      	lsls	r3, r3, #3
 800c8ac:	440b      	add	r3, r1
 800c8ae:	3308      	adds	r3, #8
 800c8b0:	6818      	ldr	r0, [r3, #0]
 800c8b2:	687a      	ldr	r2, [r7, #4]
 800c8b4:	4613      	mov	r3, r2
 800c8b6:	005b      	lsls	r3, r3, #1
 800c8b8:	4413      	add	r3, r2
 800c8ba:	00db      	lsls	r3, r3, #3
 800c8bc:	4a08      	ldr	r2, [pc, #32]	; (800c8e0 <etharp_tmr+0x14c>)
 800c8be:	4413      	add	r3, r2
 800c8c0:	3304      	adds	r3, #4
 800c8c2:	4619      	mov	r1, r3
 800c8c4:	f000 fe6e 	bl	800d5a4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	3301      	adds	r3, #1
 800c8cc:	607b      	str	r3, [r7, #4]
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2b09      	cmp	r3, #9
 800c8d2:	f77f af65 	ble.w	800c7a0 <etharp_tmr+0xc>
      }
    }
  }
}
 800c8d6:	bf00      	nop
 800c8d8:	bf00      	nop
 800c8da:	3708      	adds	r7, #8
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}
 800c8e0:	2000a514 	.word	0x2000a514

0800c8e4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b08a      	sub	sp, #40	; 0x28
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	60f8      	str	r0, [r7, #12]
 800c8ec:	460b      	mov	r3, r1
 800c8ee:	607a      	str	r2, [r7, #4]
 800c8f0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c8f2:	230a      	movs	r3, #10
 800c8f4:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c8f6:	230a      	movs	r3, #10
 800c8f8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800c8fa:	230a      	movs	r3, #10
 800c8fc:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800c8fe:	2300      	movs	r3, #0
 800c900:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800c902:	230a      	movs	r3, #10
 800c904:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c906:	2300      	movs	r3, #0
 800c908:	83bb      	strh	r3, [r7, #28]
 800c90a:	2300      	movs	r3, #0
 800c90c:	837b      	strh	r3, [r7, #26]
 800c90e:	2300      	movs	r3, #0
 800c910:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c912:	2300      	movs	r3, #0
 800c914:	843b      	strh	r3, [r7, #32]
 800c916:	e0ae      	b.n	800ca76 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800c918:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c91c:	49a6      	ldr	r1, [pc, #664]	; (800cbb8 <etharp_find_entry+0x2d4>)
 800c91e:	4613      	mov	r3, r2
 800c920:	005b      	lsls	r3, r3, #1
 800c922:	4413      	add	r3, r2
 800c924:	00db      	lsls	r3, r3, #3
 800c926:	440b      	add	r3, r1
 800c928:	3314      	adds	r3, #20
 800c92a:	781b      	ldrb	r3, [r3, #0]
 800c92c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c92e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c932:	2b0a      	cmp	r3, #10
 800c934:	d105      	bne.n	800c942 <etharp_find_entry+0x5e>
 800c936:	7dfb      	ldrb	r3, [r7, #23]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d102      	bne.n	800c942 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800c93c:	8c3b      	ldrh	r3, [r7, #32]
 800c93e:	847b      	strh	r3, [r7, #34]	; 0x22
 800c940:	e095      	b.n	800ca6e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800c942:	7dfb      	ldrb	r3, [r7, #23]
 800c944:	2b00      	cmp	r3, #0
 800c946:	f000 8092 	beq.w	800ca6e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800c94a:	7dfb      	ldrb	r3, [r7, #23]
 800c94c:	2b01      	cmp	r3, #1
 800c94e:	d009      	beq.n	800c964 <etharp_find_entry+0x80>
 800c950:	7dfb      	ldrb	r3, [r7, #23]
 800c952:	2b01      	cmp	r3, #1
 800c954:	d806      	bhi.n	800c964 <etharp_find_entry+0x80>
 800c956:	4b99      	ldr	r3, [pc, #612]	; (800cbbc <etharp_find_entry+0x2d8>)
 800c958:	f240 1223 	movw	r2, #291	; 0x123
 800c95c:	4998      	ldr	r1, [pc, #608]	; (800cbc0 <etharp_find_entry+0x2dc>)
 800c95e:	4899      	ldr	r0, [pc, #612]	; (800cbc4 <etharp_find_entry+0x2e0>)
 800c960:	f002 faac 	bl	800eebc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d020      	beq.n	800c9ac <etharp_find_entry+0xc8>
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	6819      	ldr	r1, [r3, #0]
 800c96e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c972:	4891      	ldr	r0, [pc, #580]	; (800cbb8 <etharp_find_entry+0x2d4>)
 800c974:	4613      	mov	r3, r2
 800c976:	005b      	lsls	r3, r3, #1
 800c978:	4413      	add	r3, r2
 800c97a:	00db      	lsls	r3, r3, #3
 800c97c:	4403      	add	r3, r0
 800c97e:	3304      	adds	r3, #4
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	4299      	cmp	r1, r3
 800c984:	d112      	bne.n	800c9ac <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d00c      	beq.n	800c9a6 <etharp_find_entry+0xc2>
 800c98c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c990:	4989      	ldr	r1, [pc, #548]	; (800cbb8 <etharp_find_entry+0x2d4>)
 800c992:	4613      	mov	r3, r2
 800c994:	005b      	lsls	r3, r3, #1
 800c996:	4413      	add	r3, r2
 800c998:	00db      	lsls	r3, r3, #3
 800c99a:	440b      	add	r3, r1
 800c99c:	3308      	adds	r3, #8
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	687a      	ldr	r2, [r7, #4]
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d102      	bne.n	800c9ac <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800c9a6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c9aa:	e100      	b.n	800cbae <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800c9ac:	7dfb      	ldrb	r3, [r7, #23]
 800c9ae:	2b01      	cmp	r3, #1
 800c9b0:	d140      	bne.n	800ca34 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800c9b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c9b6:	4980      	ldr	r1, [pc, #512]	; (800cbb8 <etharp_find_entry+0x2d4>)
 800c9b8:	4613      	mov	r3, r2
 800c9ba:	005b      	lsls	r3, r3, #1
 800c9bc:	4413      	add	r3, r2
 800c9be:	00db      	lsls	r3, r3, #3
 800c9c0:	440b      	add	r3, r1
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d01a      	beq.n	800c9fe <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800c9c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c9cc:	497a      	ldr	r1, [pc, #488]	; (800cbb8 <etharp_find_entry+0x2d4>)
 800c9ce:	4613      	mov	r3, r2
 800c9d0:	005b      	lsls	r3, r3, #1
 800c9d2:	4413      	add	r3, r2
 800c9d4:	00db      	lsls	r3, r3, #3
 800c9d6:	440b      	add	r3, r1
 800c9d8:	3312      	adds	r3, #18
 800c9da:	881b      	ldrh	r3, [r3, #0]
 800c9dc:	8bba      	ldrh	r2, [r7, #28]
 800c9de:	429a      	cmp	r2, r3
 800c9e0:	d845      	bhi.n	800ca6e <etharp_find_entry+0x18a>
            old_queue = i;
 800c9e2:	8c3b      	ldrh	r3, [r7, #32]
 800c9e4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800c9e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c9ea:	4973      	ldr	r1, [pc, #460]	; (800cbb8 <etharp_find_entry+0x2d4>)
 800c9ec:	4613      	mov	r3, r2
 800c9ee:	005b      	lsls	r3, r3, #1
 800c9f0:	4413      	add	r3, r2
 800c9f2:	00db      	lsls	r3, r3, #3
 800c9f4:	440b      	add	r3, r1
 800c9f6:	3312      	adds	r3, #18
 800c9f8:	881b      	ldrh	r3, [r3, #0]
 800c9fa:	83bb      	strh	r3, [r7, #28]
 800c9fc:	e037      	b.n	800ca6e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800c9fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ca02:	496d      	ldr	r1, [pc, #436]	; (800cbb8 <etharp_find_entry+0x2d4>)
 800ca04:	4613      	mov	r3, r2
 800ca06:	005b      	lsls	r3, r3, #1
 800ca08:	4413      	add	r3, r2
 800ca0a:	00db      	lsls	r3, r3, #3
 800ca0c:	440b      	add	r3, r1
 800ca0e:	3312      	adds	r3, #18
 800ca10:	881b      	ldrh	r3, [r3, #0]
 800ca12:	8b7a      	ldrh	r2, [r7, #26]
 800ca14:	429a      	cmp	r2, r3
 800ca16:	d82a      	bhi.n	800ca6e <etharp_find_entry+0x18a>
            old_pending = i;
 800ca18:	8c3b      	ldrh	r3, [r7, #32]
 800ca1a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800ca1c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ca20:	4965      	ldr	r1, [pc, #404]	; (800cbb8 <etharp_find_entry+0x2d4>)
 800ca22:	4613      	mov	r3, r2
 800ca24:	005b      	lsls	r3, r3, #1
 800ca26:	4413      	add	r3, r2
 800ca28:	00db      	lsls	r3, r3, #3
 800ca2a:	440b      	add	r3, r1
 800ca2c:	3312      	adds	r3, #18
 800ca2e:	881b      	ldrh	r3, [r3, #0]
 800ca30:	837b      	strh	r3, [r7, #26]
 800ca32:	e01c      	b.n	800ca6e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800ca34:	7dfb      	ldrb	r3, [r7, #23]
 800ca36:	2b01      	cmp	r3, #1
 800ca38:	d919      	bls.n	800ca6e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800ca3a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ca3e:	495e      	ldr	r1, [pc, #376]	; (800cbb8 <etharp_find_entry+0x2d4>)
 800ca40:	4613      	mov	r3, r2
 800ca42:	005b      	lsls	r3, r3, #1
 800ca44:	4413      	add	r3, r2
 800ca46:	00db      	lsls	r3, r3, #3
 800ca48:	440b      	add	r3, r1
 800ca4a:	3312      	adds	r3, #18
 800ca4c:	881b      	ldrh	r3, [r3, #0]
 800ca4e:	8b3a      	ldrh	r2, [r7, #24]
 800ca50:	429a      	cmp	r2, r3
 800ca52:	d80c      	bhi.n	800ca6e <etharp_find_entry+0x18a>
            old_stable = i;
 800ca54:	8c3b      	ldrh	r3, [r7, #32]
 800ca56:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800ca58:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ca5c:	4956      	ldr	r1, [pc, #344]	; (800cbb8 <etharp_find_entry+0x2d4>)
 800ca5e:	4613      	mov	r3, r2
 800ca60:	005b      	lsls	r3, r3, #1
 800ca62:	4413      	add	r3, r2
 800ca64:	00db      	lsls	r3, r3, #3
 800ca66:	440b      	add	r3, r1
 800ca68:	3312      	adds	r3, #18
 800ca6a:	881b      	ldrh	r3, [r3, #0]
 800ca6c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ca6e:	8c3b      	ldrh	r3, [r7, #32]
 800ca70:	3301      	adds	r3, #1
 800ca72:	b29b      	uxth	r3, r3
 800ca74:	843b      	strh	r3, [r7, #32]
 800ca76:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ca7a:	2b09      	cmp	r3, #9
 800ca7c:	f77f af4c 	ble.w	800c918 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800ca80:	7afb      	ldrb	r3, [r7, #11]
 800ca82:	f003 0302 	and.w	r3, r3, #2
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d108      	bne.n	800ca9c <etharp_find_entry+0x1b8>
 800ca8a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ca8e:	2b0a      	cmp	r3, #10
 800ca90:	d107      	bne.n	800caa2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800ca92:	7afb      	ldrb	r3, [r7, #11]
 800ca94:	f003 0301 	and.w	r3, r3, #1
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d102      	bne.n	800caa2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800ca9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800caa0:	e085      	b.n	800cbae <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800caa2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800caa6:	2b09      	cmp	r3, #9
 800caa8:	dc02      	bgt.n	800cab0 <etharp_find_entry+0x1cc>
    i = empty;
 800caaa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800caac:	843b      	strh	r3, [r7, #32]
 800caae:	e039      	b.n	800cb24 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800cab0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800cab4:	2b09      	cmp	r3, #9
 800cab6:	dc14      	bgt.n	800cae2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800cab8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800caba:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800cabc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cac0:	493d      	ldr	r1, [pc, #244]	; (800cbb8 <etharp_find_entry+0x2d4>)
 800cac2:	4613      	mov	r3, r2
 800cac4:	005b      	lsls	r3, r3, #1
 800cac6:	4413      	add	r3, r2
 800cac8:	00db      	lsls	r3, r3, #3
 800caca:	440b      	add	r3, r1
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d018      	beq.n	800cb04 <etharp_find_entry+0x220>
 800cad2:	4b3a      	ldr	r3, [pc, #232]	; (800cbbc <etharp_find_entry+0x2d8>)
 800cad4:	f240 126d 	movw	r2, #365	; 0x16d
 800cad8:	493b      	ldr	r1, [pc, #236]	; (800cbc8 <etharp_find_entry+0x2e4>)
 800cada:	483a      	ldr	r0, [pc, #232]	; (800cbc4 <etharp_find_entry+0x2e0>)
 800cadc:	f002 f9ee 	bl	800eebc <iprintf>
 800cae0:	e010      	b.n	800cb04 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800cae2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800cae6:	2b09      	cmp	r3, #9
 800cae8:	dc02      	bgt.n	800caf0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800caea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800caec:	843b      	strh	r3, [r7, #32]
 800caee:	e009      	b.n	800cb04 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800caf0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800caf4:	2b09      	cmp	r3, #9
 800caf6:	dc02      	bgt.n	800cafe <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800caf8:	8bfb      	ldrh	r3, [r7, #30]
 800cafa:	843b      	strh	r3, [r7, #32]
 800cafc:	e002      	b.n	800cb04 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800cafe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cb02:	e054      	b.n	800cbae <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800cb04:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cb08:	2b09      	cmp	r3, #9
 800cb0a:	dd06      	ble.n	800cb1a <etharp_find_entry+0x236>
 800cb0c:	4b2b      	ldr	r3, [pc, #172]	; (800cbbc <etharp_find_entry+0x2d8>)
 800cb0e:	f240 127f 	movw	r2, #383	; 0x17f
 800cb12:	492e      	ldr	r1, [pc, #184]	; (800cbcc <etharp_find_entry+0x2e8>)
 800cb14:	482b      	ldr	r0, [pc, #172]	; (800cbc4 <etharp_find_entry+0x2e0>)
 800cb16:	f002 f9d1 	bl	800eebc <iprintf>
    etharp_free_entry(i);
 800cb1a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f7ff fe06 	bl	800c730 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800cb24:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cb28:	2b09      	cmp	r3, #9
 800cb2a:	dd06      	ble.n	800cb3a <etharp_find_entry+0x256>
 800cb2c:	4b23      	ldr	r3, [pc, #140]	; (800cbbc <etharp_find_entry+0x2d8>)
 800cb2e:	f240 1283 	movw	r2, #387	; 0x183
 800cb32:	4926      	ldr	r1, [pc, #152]	; (800cbcc <etharp_find_entry+0x2e8>)
 800cb34:	4823      	ldr	r0, [pc, #140]	; (800cbc4 <etharp_find_entry+0x2e0>)
 800cb36:	f002 f9c1 	bl	800eebc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800cb3a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cb3e:	491e      	ldr	r1, [pc, #120]	; (800cbb8 <etharp_find_entry+0x2d4>)
 800cb40:	4613      	mov	r3, r2
 800cb42:	005b      	lsls	r3, r3, #1
 800cb44:	4413      	add	r3, r2
 800cb46:	00db      	lsls	r3, r3, #3
 800cb48:	440b      	add	r3, r1
 800cb4a:	3314      	adds	r3, #20
 800cb4c:	781b      	ldrb	r3, [r3, #0]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d006      	beq.n	800cb60 <etharp_find_entry+0x27c>
 800cb52:	4b1a      	ldr	r3, [pc, #104]	; (800cbbc <etharp_find_entry+0x2d8>)
 800cb54:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800cb58:	491d      	ldr	r1, [pc, #116]	; (800cbd0 <etharp_find_entry+0x2ec>)
 800cb5a:	481a      	ldr	r0, [pc, #104]	; (800cbc4 <etharp_find_entry+0x2e0>)
 800cb5c:	f002 f9ae 	bl	800eebc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d00b      	beq.n	800cb7e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800cb66:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	6819      	ldr	r1, [r3, #0]
 800cb6e:	4812      	ldr	r0, [pc, #72]	; (800cbb8 <etharp_find_entry+0x2d4>)
 800cb70:	4613      	mov	r3, r2
 800cb72:	005b      	lsls	r3, r3, #1
 800cb74:	4413      	add	r3, r2
 800cb76:	00db      	lsls	r3, r3, #3
 800cb78:	4403      	add	r3, r0
 800cb7a:	3304      	adds	r3, #4
 800cb7c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800cb7e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cb82:	490d      	ldr	r1, [pc, #52]	; (800cbb8 <etharp_find_entry+0x2d4>)
 800cb84:	4613      	mov	r3, r2
 800cb86:	005b      	lsls	r3, r3, #1
 800cb88:	4413      	add	r3, r2
 800cb8a:	00db      	lsls	r3, r3, #3
 800cb8c:	440b      	add	r3, r1
 800cb8e:	3312      	adds	r3, #18
 800cb90:	2200      	movs	r2, #0
 800cb92:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800cb94:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cb98:	4907      	ldr	r1, [pc, #28]	; (800cbb8 <etharp_find_entry+0x2d4>)
 800cb9a:	4613      	mov	r3, r2
 800cb9c:	005b      	lsls	r3, r3, #1
 800cb9e:	4413      	add	r3, r2
 800cba0:	00db      	lsls	r3, r3, #3
 800cba2:	440b      	add	r3, r1
 800cba4:	3308      	adds	r3, #8
 800cba6:	687a      	ldr	r2, [r7, #4]
 800cba8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800cbaa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800cbae:	4618      	mov	r0, r3
 800cbb0:	3728      	adds	r7, #40	; 0x28
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}
 800cbb6:	bf00      	nop
 800cbb8:	2000a514 	.word	0x2000a514
 800cbbc:	080123e8 	.word	0x080123e8
 800cbc0:	08012420 	.word	0x08012420
 800cbc4:	08012460 	.word	0x08012460
 800cbc8:	08012488 	.word	0x08012488
 800cbcc:	080124a0 	.word	0x080124a0
 800cbd0:	080124b4 	.word	0x080124b4

0800cbd4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b088      	sub	sp, #32
 800cbd8:	af02      	add	r7, sp, #8
 800cbda:	60f8      	str	r0, [r7, #12]
 800cbdc:	60b9      	str	r1, [r7, #8]
 800cbde:	607a      	str	r2, [r7, #4]
 800cbe0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cbe8:	2b06      	cmp	r3, #6
 800cbea:	d006      	beq.n	800cbfa <etharp_update_arp_entry+0x26>
 800cbec:	4b48      	ldr	r3, [pc, #288]	; (800cd10 <etharp_update_arp_entry+0x13c>)
 800cbee:	f240 12a9 	movw	r2, #425	; 0x1a9
 800cbf2:	4948      	ldr	r1, [pc, #288]	; (800cd14 <etharp_update_arp_entry+0x140>)
 800cbf4:	4848      	ldr	r0, [pc, #288]	; (800cd18 <etharp_update_arp_entry+0x144>)
 800cbf6:	f002 f961 	bl	800eebc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d012      	beq.n	800cc26 <etharp_update_arp_entry+0x52>
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d00e      	beq.n	800cc26 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800cc08:	68bb      	ldr	r3, [r7, #8]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	68f9      	ldr	r1, [r7, #12]
 800cc0e:	4618      	mov	r0, r3
 800cc10:	f001 f8fe 	bl	800de10 <ip4_addr_isbroadcast_u32>
 800cc14:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d105      	bne.n	800cc26 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800cc1a:	68bb      	ldr	r3, [r7, #8]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800cc22:	2be0      	cmp	r3, #224	; 0xe0
 800cc24:	d102      	bne.n	800cc2c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800cc26:	f06f 030f 	mvn.w	r3, #15
 800cc2a:	e06c      	b.n	800cd06 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800cc2c:	78fb      	ldrb	r3, [r7, #3]
 800cc2e:	68fa      	ldr	r2, [r7, #12]
 800cc30:	4619      	mov	r1, r3
 800cc32:	68b8      	ldr	r0, [r7, #8]
 800cc34:	f7ff fe56 	bl	800c8e4 <etharp_find_entry>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800cc3c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	da02      	bge.n	800cc4a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800cc44:	8afb      	ldrh	r3, [r7, #22]
 800cc46:	b25b      	sxtb	r3, r3
 800cc48:	e05d      	b.n	800cd06 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800cc4a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cc4e:	4933      	ldr	r1, [pc, #204]	; (800cd1c <etharp_update_arp_entry+0x148>)
 800cc50:	4613      	mov	r3, r2
 800cc52:	005b      	lsls	r3, r3, #1
 800cc54:	4413      	add	r3, r2
 800cc56:	00db      	lsls	r3, r3, #3
 800cc58:	440b      	add	r3, r1
 800cc5a:	3314      	adds	r3, #20
 800cc5c:	2202      	movs	r2, #2
 800cc5e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800cc60:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cc64:	492d      	ldr	r1, [pc, #180]	; (800cd1c <etharp_update_arp_entry+0x148>)
 800cc66:	4613      	mov	r3, r2
 800cc68:	005b      	lsls	r3, r3, #1
 800cc6a:	4413      	add	r3, r2
 800cc6c:	00db      	lsls	r3, r3, #3
 800cc6e:	440b      	add	r3, r1
 800cc70:	3308      	adds	r3, #8
 800cc72:	68fa      	ldr	r2, [r7, #12]
 800cc74:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800cc76:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cc7a:	4613      	mov	r3, r2
 800cc7c:	005b      	lsls	r3, r3, #1
 800cc7e:	4413      	add	r3, r2
 800cc80:	00db      	lsls	r3, r3, #3
 800cc82:	3308      	adds	r3, #8
 800cc84:	4a25      	ldr	r2, [pc, #148]	; (800cd1c <etharp_update_arp_entry+0x148>)
 800cc86:	4413      	add	r3, r2
 800cc88:	3304      	adds	r3, #4
 800cc8a:	2206      	movs	r2, #6
 800cc8c:	6879      	ldr	r1, [r7, #4]
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f002 fa3b 	bl	800f10a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800cc94:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cc98:	4920      	ldr	r1, [pc, #128]	; (800cd1c <etharp_update_arp_entry+0x148>)
 800cc9a:	4613      	mov	r3, r2
 800cc9c:	005b      	lsls	r3, r3, #1
 800cc9e:	4413      	add	r3, r2
 800cca0:	00db      	lsls	r3, r3, #3
 800cca2:	440b      	add	r3, r1
 800cca4:	3312      	adds	r3, #18
 800cca6:	2200      	movs	r2, #0
 800cca8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800ccaa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ccae:	491b      	ldr	r1, [pc, #108]	; (800cd1c <etharp_update_arp_entry+0x148>)
 800ccb0:	4613      	mov	r3, r2
 800ccb2:	005b      	lsls	r3, r3, #1
 800ccb4:	4413      	add	r3, r2
 800ccb6:	00db      	lsls	r3, r3, #3
 800ccb8:	440b      	add	r3, r1
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d021      	beq.n	800cd04 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800ccc0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ccc4:	4915      	ldr	r1, [pc, #84]	; (800cd1c <etharp_update_arp_entry+0x148>)
 800ccc6:	4613      	mov	r3, r2
 800ccc8:	005b      	lsls	r3, r3, #1
 800ccca:	4413      	add	r3, r2
 800cccc:	00db      	lsls	r3, r3, #3
 800ccce:	440b      	add	r3, r1
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800ccd4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ccd8:	4910      	ldr	r1, [pc, #64]	; (800cd1c <etharp_update_arp_entry+0x148>)
 800ccda:	4613      	mov	r3, r2
 800ccdc:	005b      	lsls	r3, r3, #1
 800ccde:	4413      	add	r3, r2
 800cce0:	00db      	lsls	r3, r3, #3
 800cce2:	440b      	add	r3, r1
 800cce4:	2200      	movs	r2, #0
 800cce6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800ccee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ccf2:	9300      	str	r3, [sp, #0]
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	6939      	ldr	r1, [r7, #16]
 800ccf8:	68f8      	ldr	r0, [r7, #12]
 800ccfa:	f001 ff97 	bl	800ec2c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800ccfe:	6938      	ldr	r0, [r7, #16]
 800cd00:	f7f9 fa36 	bl	8006170 <pbuf_free>
  }
  return ERR_OK;
 800cd04:	2300      	movs	r3, #0
}
 800cd06:	4618      	mov	r0, r3
 800cd08:	3718      	adds	r7, #24
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	bd80      	pop	{r7, pc}
 800cd0e:	bf00      	nop
 800cd10:	080123e8 	.word	0x080123e8
 800cd14:	080124e0 	.word	0x080124e0
 800cd18:	08012460 	.word	0x08012460
 800cd1c:	2000a514 	.word	0x2000a514

0800cd20 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b084      	sub	sp, #16
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cd28:	2300      	movs	r3, #0
 800cd2a:	60fb      	str	r3, [r7, #12]
 800cd2c:	e01e      	b.n	800cd6c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800cd2e:	4913      	ldr	r1, [pc, #76]	; (800cd7c <etharp_cleanup_netif+0x5c>)
 800cd30:	68fa      	ldr	r2, [r7, #12]
 800cd32:	4613      	mov	r3, r2
 800cd34:	005b      	lsls	r3, r3, #1
 800cd36:	4413      	add	r3, r2
 800cd38:	00db      	lsls	r3, r3, #3
 800cd3a:	440b      	add	r3, r1
 800cd3c:	3314      	adds	r3, #20
 800cd3e:	781b      	ldrb	r3, [r3, #0]
 800cd40:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800cd42:	7afb      	ldrb	r3, [r7, #11]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d00e      	beq.n	800cd66 <etharp_cleanup_netif+0x46>
 800cd48:	490c      	ldr	r1, [pc, #48]	; (800cd7c <etharp_cleanup_netif+0x5c>)
 800cd4a:	68fa      	ldr	r2, [r7, #12]
 800cd4c:	4613      	mov	r3, r2
 800cd4e:	005b      	lsls	r3, r3, #1
 800cd50:	4413      	add	r3, r2
 800cd52:	00db      	lsls	r3, r3, #3
 800cd54:	440b      	add	r3, r1
 800cd56:	3308      	adds	r3, #8
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	687a      	ldr	r2, [r7, #4]
 800cd5c:	429a      	cmp	r2, r3
 800cd5e:	d102      	bne.n	800cd66 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800cd60:	68f8      	ldr	r0, [r7, #12]
 800cd62:	f7ff fce5 	bl	800c730 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	3301      	adds	r3, #1
 800cd6a:	60fb      	str	r3, [r7, #12]
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	2b09      	cmp	r3, #9
 800cd70:	dddd      	ble.n	800cd2e <etharp_cleanup_netif+0xe>
    }
  }
}
 800cd72:	bf00      	nop
 800cd74:	bf00      	nop
 800cd76:	3710      	adds	r7, #16
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	bd80      	pop	{r7, pc}
 800cd7c:	2000a514 	.word	0x2000a514

0800cd80 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800cd80:	b5b0      	push	{r4, r5, r7, lr}
 800cd82:	b08a      	sub	sp, #40	; 0x28
 800cd84:	af04      	add	r7, sp, #16
 800cd86:	6078      	str	r0, [r7, #4]
 800cd88:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d107      	bne.n	800cda0 <etharp_input+0x20>
 800cd90:	4b3d      	ldr	r3, [pc, #244]	; (800ce88 <etharp_input+0x108>)
 800cd92:	f240 228a 	movw	r2, #650	; 0x28a
 800cd96:	493d      	ldr	r1, [pc, #244]	; (800ce8c <etharp_input+0x10c>)
 800cd98:	483d      	ldr	r0, [pc, #244]	; (800ce90 <etharp_input+0x110>)
 800cd9a:	f002 f88f 	bl	800eebc <iprintf>
 800cd9e:	e06f      	b.n	800ce80 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	685b      	ldr	r3, [r3, #4]
 800cda4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800cda6:	693b      	ldr	r3, [r7, #16]
 800cda8:	881b      	ldrh	r3, [r3, #0]
 800cdaa:	b29b      	uxth	r3, r3
 800cdac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cdb0:	d10c      	bne.n	800cdcc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800cdb2:	693b      	ldr	r3, [r7, #16]
 800cdb4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800cdb6:	2b06      	cmp	r3, #6
 800cdb8:	d108      	bne.n	800cdcc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800cdba:	693b      	ldr	r3, [r7, #16]
 800cdbc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800cdbe:	2b04      	cmp	r3, #4
 800cdc0:	d104      	bne.n	800cdcc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800cdc2:	693b      	ldr	r3, [r7, #16]
 800cdc4:	885b      	ldrh	r3, [r3, #2]
 800cdc6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800cdc8:	2b08      	cmp	r3, #8
 800cdca:	d003      	beq.n	800cdd4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f7f9 f9cf 	bl	8006170 <pbuf_free>
    return;
 800cdd2:	e055      	b.n	800ce80 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800cdd4:	693b      	ldr	r3, [r7, #16]
 800cdd6:	330e      	adds	r3, #14
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800cddc:	693b      	ldr	r3, [r7, #16]
 800cdde:	3318      	adds	r3, #24
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	3304      	adds	r3, #4
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d102      	bne.n	800cdf4 <etharp_input+0x74>
    for_us = 0;
 800cdee:	2300      	movs	r3, #0
 800cdf0:	75fb      	strb	r3, [r7, #23]
 800cdf2:	e009      	b.n	800ce08 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800cdf4:	68ba      	ldr	r2, [r7, #8]
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	3304      	adds	r3, #4
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	429a      	cmp	r2, r3
 800cdfe:	bf0c      	ite	eq
 800ce00:	2301      	moveq	r3, #1
 800ce02:	2300      	movne	r3, #0
 800ce04:	b2db      	uxtb	r3, r3
 800ce06:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800ce08:	693b      	ldr	r3, [r7, #16]
 800ce0a:	f103 0208 	add.w	r2, r3, #8
 800ce0e:	7dfb      	ldrb	r3, [r7, #23]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d001      	beq.n	800ce18 <etharp_input+0x98>
 800ce14:	2301      	movs	r3, #1
 800ce16:	e000      	b.n	800ce1a <etharp_input+0x9a>
 800ce18:	2302      	movs	r3, #2
 800ce1a:	f107 010c 	add.w	r1, r7, #12
 800ce1e:	6838      	ldr	r0, [r7, #0]
 800ce20:	f7ff fed8 	bl	800cbd4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800ce24:	693b      	ldr	r3, [r7, #16]
 800ce26:	88db      	ldrh	r3, [r3, #6]
 800ce28:	b29b      	uxth	r3, r3
 800ce2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce2e:	d003      	beq.n	800ce38 <etharp_input+0xb8>
 800ce30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ce34:	d01e      	beq.n	800ce74 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800ce36:	e020      	b.n	800ce7a <etharp_input+0xfa>
      if (for_us) {
 800ce38:	7dfb      	ldrb	r3, [r7, #23]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d01c      	beq.n	800ce78 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800ce44:	693b      	ldr	r3, [r7, #16]
 800ce46:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800ce54:	693a      	ldr	r2, [r7, #16]
 800ce56:	3208      	adds	r2, #8
        etharp_raw(netif,
 800ce58:	2102      	movs	r1, #2
 800ce5a:	9103      	str	r1, [sp, #12]
 800ce5c:	f107 010c 	add.w	r1, r7, #12
 800ce60:	9102      	str	r1, [sp, #8]
 800ce62:	9201      	str	r2, [sp, #4]
 800ce64:	9300      	str	r3, [sp, #0]
 800ce66:	462b      	mov	r3, r5
 800ce68:	4622      	mov	r2, r4
 800ce6a:	4601      	mov	r1, r0
 800ce6c:	6838      	ldr	r0, [r7, #0]
 800ce6e:	f000 faeb 	bl	800d448 <etharp_raw>
      break;
 800ce72:	e001      	b.n	800ce78 <etharp_input+0xf8>
      break;
 800ce74:	bf00      	nop
 800ce76:	e000      	b.n	800ce7a <etharp_input+0xfa>
      break;
 800ce78:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800ce7a:	6878      	ldr	r0, [r7, #4]
 800ce7c:	f7f9 f978 	bl	8006170 <pbuf_free>
}
 800ce80:	3718      	adds	r7, #24
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bdb0      	pop	{r4, r5, r7, pc}
 800ce86:	bf00      	nop
 800ce88:	080123e8 	.word	0x080123e8
 800ce8c:	08012538 	.word	0x08012538
 800ce90:	08012460 	.word	0x08012460

0800ce94 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b086      	sub	sp, #24
 800ce98:	af02      	add	r7, sp, #8
 800ce9a:	60f8      	str	r0, [r7, #12]
 800ce9c:	60b9      	str	r1, [r7, #8]
 800ce9e:	4613      	mov	r3, r2
 800cea0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800cea2:	79fa      	ldrb	r2, [r7, #7]
 800cea4:	4944      	ldr	r1, [pc, #272]	; (800cfb8 <etharp_output_to_arp_index+0x124>)
 800cea6:	4613      	mov	r3, r2
 800cea8:	005b      	lsls	r3, r3, #1
 800ceaa:	4413      	add	r3, r2
 800ceac:	00db      	lsls	r3, r3, #3
 800ceae:	440b      	add	r3, r1
 800ceb0:	3314      	adds	r3, #20
 800ceb2:	781b      	ldrb	r3, [r3, #0]
 800ceb4:	2b01      	cmp	r3, #1
 800ceb6:	d806      	bhi.n	800cec6 <etharp_output_to_arp_index+0x32>
 800ceb8:	4b40      	ldr	r3, [pc, #256]	; (800cfbc <etharp_output_to_arp_index+0x128>)
 800ceba:	f240 22ee 	movw	r2, #750	; 0x2ee
 800cebe:	4940      	ldr	r1, [pc, #256]	; (800cfc0 <etharp_output_to_arp_index+0x12c>)
 800cec0:	4840      	ldr	r0, [pc, #256]	; (800cfc4 <etharp_output_to_arp_index+0x130>)
 800cec2:	f001 fffb 	bl	800eebc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800cec6:	79fa      	ldrb	r2, [r7, #7]
 800cec8:	493b      	ldr	r1, [pc, #236]	; (800cfb8 <etharp_output_to_arp_index+0x124>)
 800ceca:	4613      	mov	r3, r2
 800cecc:	005b      	lsls	r3, r3, #1
 800cece:	4413      	add	r3, r2
 800ced0:	00db      	lsls	r3, r3, #3
 800ced2:	440b      	add	r3, r1
 800ced4:	3314      	adds	r3, #20
 800ced6:	781b      	ldrb	r3, [r3, #0]
 800ced8:	2b02      	cmp	r3, #2
 800ceda:	d153      	bne.n	800cf84 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800cedc:	79fa      	ldrb	r2, [r7, #7]
 800cede:	4936      	ldr	r1, [pc, #216]	; (800cfb8 <etharp_output_to_arp_index+0x124>)
 800cee0:	4613      	mov	r3, r2
 800cee2:	005b      	lsls	r3, r3, #1
 800cee4:	4413      	add	r3, r2
 800cee6:	00db      	lsls	r3, r3, #3
 800cee8:	440b      	add	r3, r1
 800ceea:	3312      	adds	r3, #18
 800ceec:	881b      	ldrh	r3, [r3, #0]
 800ceee:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800cef2:	d919      	bls.n	800cf28 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800cef4:	79fa      	ldrb	r2, [r7, #7]
 800cef6:	4613      	mov	r3, r2
 800cef8:	005b      	lsls	r3, r3, #1
 800cefa:	4413      	add	r3, r2
 800cefc:	00db      	lsls	r3, r3, #3
 800cefe:	4a2e      	ldr	r2, [pc, #184]	; (800cfb8 <etharp_output_to_arp_index+0x124>)
 800cf00:	4413      	add	r3, r2
 800cf02:	3304      	adds	r3, #4
 800cf04:	4619      	mov	r1, r3
 800cf06:	68f8      	ldr	r0, [r7, #12]
 800cf08:	f000 fb4c 	bl	800d5a4 <etharp_request>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d138      	bne.n	800cf84 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800cf12:	79fa      	ldrb	r2, [r7, #7]
 800cf14:	4928      	ldr	r1, [pc, #160]	; (800cfb8 <etharp_output_to_arp_index+0x124>)
 800cf16:	4613      	mov	r3, r2
 800cf18:	005b      	lsls	r3, r3, #1
 800cf1a:	4413      	add	r3, r2
 800cf1c:	00db      	lsls	r3, r3, #3
 800cf1e:	440b      	add	r3, r1
 800cf20:	3314      	adds	r3, #20
 800cf22:	2203      	movs	r2, #3
 800cf24:	701a      	strb	r2, [r3, #0]
 800cf26:	e02d      	b.n	800cf84 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800cf28:	79fa      	ldrb	r2, [r7, #7]
 800cf2a:	4923      	ldr	r1, [pc, #140]	; (800cfb8 <etharp_output_to_arp_index+0x124>)
 800cf2c:	4613      	mov	r3, r2
 800cf2e:	005b      	lsls	r3, r3, #1
 800cf30:	4413      	add	r3, r2
 800cf32:	00db      	lsls	r3, r3, #3
 800cf34:	440b      	add	r3, r1
 800cf36:	3312      	adds	r3, #18
 800cf38:	881b      	ldrh	r3, [r3, #0]
 800cf3a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800cf3e:	d321      	bcc.n	800cf84 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800cf40:	79fa      	ldrb	r2, [r7, #7]
 800cf42:	4613      	mov	r3, r2
 800cf44:	005b      	lsls	r3, r3, #1
 800cf46:	4413      	add	r3, r2
 800cf48:	00db      	lsls	r3, r3, #3
 800cf4a:	4a1b      	ldr	r2, [pc, #108]	; (800cfb8 <etharp_output_to_arp_index+0x124>)
 800cf4c:	4413      	add	r3, r2
 800cf4e:	1d19      	adds	r1, r3, #4
 800cf50:	79fa      	ldrb	r2, [r7, #7]
 800cf52:	4613      	mov	r3, r2
 800cf54:	005b      	lsls	r3, r3, #1
 800cf56:	4413      	add	r3, r2
 800cf58:	00db      	lsls	r3, r3, #3
 800cf5a:	3308      	adds	r3, #8
 800cf5c:	4a16      	ldr	r2, [pc, #88]	; (800cfb8 <etharp_output_to_arp_index+0x124>)
 800cf5e:	4413      	add	r3, r2
 800cf60:	3304      	adds	r3, #4
 800cf62:	461a      	mov	r2, r3
 800cf64:	68f8      	ldr	r0, [r7, #12]
 800cf66:	f000 fafb 	bl	800d560 <etharp_request_dst>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d109      	bne.n	800cf84 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800cf70:	79fa      	ldrb	r2, [r7, #7]
 800cf72:	4911      	ldr	r1, [pc, #68]	; (800cfb8 <etharp_output_to_arp_index+0x124>)
 800cf74:	4613      	mov	r3, r2
 800cf76:	005b      	lsls	r3, r3, #1
 800cf78:	4413      	add	r3, r2
 800cf7a:	00db      	lsls	r3, r3, #3
 800cf7c:	440b      	add	r3, r1
 800cf7e:	3314      	adds	r3, #20
 800cf80:	2203      	movs	r2, #3
 800cf82:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800cf8a:	79fa      	ldrb	r2, [r7, #7]
 800cf8c:	4613      	mov	r3, r2
 800cf8e:	005b      	lsls	r3, r3, #1
 800cf90:	4413      	add	r3, r2
 800cf92:	00db      	lsls	r3, r3, #3
 800cf94:	3308      	adds	r3, #8
 800cf96:	4a08      	ldr	r2, [pc, #32]	; (800cfb8 <etharp_output_to_arp_index+0x124>)
 800cf98:	4413      	add	r3, r2
 800cf9a:	3304      	adds	r3, #4
 800cf9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cfa0:	9200      	str	r2, [sp, #0]
 800cfa2:	460a      	mov	r2, r1
 800cfa4:	68b9      	ldr	r1, [r7, #8]
 800cfa6:	68f8      	ldr	r0, [r7, #12]
 800cfa8:	f001 fe40 	bl	800ec2c <ethernet_output>
 800cfac:	4603      	mov	r3, r0
}
 800cfae:	4618      	mov	r0, r3
 800cfb0:	3710      	adds	r7, #16
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd80      	pop	{r7, pc}
 800cfb6:	bf00      	nop
 800cfb8:	2000a514 	.word	0x2000a514
 800cfbc:	080123e8 	.word	0x080123e8
 800cfc0:	08012558 	.word	0x08012558
 800cfc4:	08012460 	.word	0x08012460

0800cfc8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b08a      	sub	sp, #40	; 0x28
 800cfcc:	af02      	add	r7, sp, #8
 800cfce:	60f8      	str	r0, [r7, #12]
 800cfd0:	60b9      	str	r1, [r7, #8]
 800cfd2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d106      	bne.n	800cfec <etharp_output+0x24>
 800cfde:	4b73      	ldr	r3, [pc, #460]	; (800d1ac <etharp_output+0x1e4>)
 800cfe0:	f240 321e 	movw	r2, #798	; 0x31e
 800cfe4:	4972      	ldr	r1, [pc, #456]	; (800d1b0 <etharp_output+0x1e8>)
 800cfe6:	4873      	ldr	r0, [pc, #460]	; (800d1b4 <etharp_output+0x1ec>)
 800cfe8:	f001 ff68 	bl	800eebc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800cfec:	68bb      	ldr	r3, [r7, #8]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d106      	bne.n	800d000 <etharp_output+0x38>
 800cff2:	4b6e      	ldr	r3, [pc, #440]	; (800d1ac <etharp_output+0x1e4>)
 800cff4:	f240 321f 	movw	r2, #799	; 0x31f
 800cff8:	496f      	ldr	r1, [pc, #444]	; (800d1b8 <etharp_output+0x1f0>)
 800cffa:	486e      	ldr	r0, [pc, #440]	; (800d1b4 <etharp_output+0x1ec>)
 800cffc:	f001 ff5e 	bl	800eebc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d106      	bne.n	800d014 <etharp_output+0x4c>
 800d006:	4b69      	ldr	r3, [pc, #420]	; (800d1ac <etharp_output+0x1e4>)
 800d008:	f44f 7248 	mov.w	r2, #800	; 0x320
 800d00c:	496b      	ldr	r1, [pc, #428]	; (800d1bc <etharp_output+0x1f4>)
 800d00e:	4869      	ldr	r0, [pc, #420]	; (800d1b4 <etharp_output+0x1ec>)
 800d010:	f001 ff54 	bl	800eebc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	68f9      	ldr	r1, [r7, #12]
 800d01a:	4618      	mov	r0, r3
 800d01c:	f000 fef8 	bl	800de10 <ip4_addr_isbroadcast_u32>
 800d020:	4603      	mov	r3, r0
 800d022:	2b00      	cmp	r3, #0
 800d024:	d002      	beq.n	800d02c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800d026:	4b66      	ldr	r3, [pc, #408]	; (800d1c0 <etharp_output+0x1f8>)
 800d028:	61fb      	str	r3, [r7, #28]
 800d02a:	e0af      	b.n	800d18c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d034:	2be0      	cmp	r3, #224	; 0xe0
 800d036:	d118      	bne.n	800d06a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800d038:	2301      	movs	r3, #1
 800d03a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800d03c:	2300      	movs	r3, #0
 800d03e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800d040:	235e      	movs	r3, #94	; 0x5e
 800d042:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	3301      	adds	r3, #1
 800d048:	781b      	ldrb	r3, [r3, #0]
 800d04a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d04e:	b2db      	uxtb	r3, r3
 800d050:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	3302      	adds	r3, #2
 800d056:	781b      	ldrb	r3, [r3, #0]
 800d058:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	3303      	adds	r3, #3
 800d05e:	781b      	ldrb	r3, [r3, #0]
 800d060:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800d062:	f107 0310 	add.w	r3, r7, #16
 800d066:	61fb      	str	r3, [r7, #28]
 800d068:	e090      	b.n	800d18c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681a      	ldr	r2, [r3, #0]
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	3304      	adds	r3, #4
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	405a      	eors	r2, r3
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	3308      	adds	r3, #8
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	4013      	ands	r3, r2
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d012      	beq.n	800d0a8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d088:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800d08c:	4293      	cmp	r3, r2
 800d08e:	d00b      	beq.n	800d0a8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	330c      	adds	r3, #12
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d003      	beq.n	800d0a2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	330c      	adds	r3, #12
 800d09e:	61bb      	str	r3, [r7, #24]
 800d0a0:	e002      	b.n	800d0a8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800d0a2:	f06f 0303 	mvn.w	r3, #3
 800d0a6:	e07d      	b.n	800d1a4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d0a8:	4b46      	ldr	r3, [pc, #280]	; (800d1c4 <etharp_output+0x1fc>)
 800d0aa:	781b      	ldrb	r3, [r3, #0]
 800d0ac:	4619      	mov	r1, r3
 800d0ae:	4a46      	ldr	r2, [pc, #280]	; (800d1c8 <etharp_output+0x200>)
 800d0b0:	460b      	mov	r3, r1
 800d0b2:	005b      	lsls	r3, r3, #1
 800d0b4:	440b      	add	r3, r1
 800d0b6:	00db      	lsls	r3, r3, #3
 800d0b8:	4413      	add	r3, r2
 800d0ba:	3314      	adds	r3, #20
 800d0bc:	781b      	ldrb	r3, [r3, #0]
 800d0be:	2b01      	cmp	r3, #1
 800d0c0:	d925      	bls.n	800d10e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d0c2:	4b40      	ldr	r3, [pc, #256]	; (800d1c4 <etharp_output+0x1fc>)
 800d0c4:	781b      	ldrb	r3, [r3, #0]
 800d0c6:	4619      	mov	r1, r3
 800d0c8:	4a3f      	ldr	r2, [pc, #252]	; (800d1c8 <etharp_output+0x200>)
 800d0ca:	460b      	mov	r3, r1
 800d0cc:	005b      	lsls	r3, r3, #1
 800d0ce:	440b      	add	r3, r1
 800d0d0:	00db      	lsls	r3, r3, #3
 800d0d2:	4413      	add	r3, r2
 800d0d4:	3308      	adds	r3, #8
 800d0d6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d0d8:	68fa      	ldr	r2, [r7, #12]
 800d0da:	429a      	cmp	r2, r3
 800d0dc:	d117      	bne.n	800d10e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800d0de:	69bb      	ldr	r3, [r7, #24]
 800d0e0:	681a      	ldr	r2, [r3, #0]
 800d0e2:	4b38      	ldr	r3, [pc, #224]	; (800d1c4 <etharp_output+0x1fc>)
 800d0e4:	781b      	ldrb	r3, [r3, #0]
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	4937      	ldr	r1, [pc, #220]	; (800d1c8 <etharp_output+0x200>)
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	005b      	lsls	r3, r3, #1
 800d0ee:	4403      	add	r3, r0
 800d0f0:	00db      	lsls	r3, r3, #3
 800d0f2:	440b      	add	r3, r1
 800d0f4:	3304      	adds	r3, #4
 800d0f6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d0f8:	429a      	cmp	r2, r3
 800d0fa:	d108      	bne.n	800d10e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800d0fc:	4b31      	ldr	r3, [pc, #196]	; (800d1c4 <etharp_output+0x1fc>)
 800d0fe:	781b      	ldrb	r3, [r3, #0]
 800d100:	461a      	mov	r2, r3
 800d102:	68b9      	ldr	r1, [r7, #8]
 800d104:	68f8      	ldr	r0, [r7, #12]
 800d106:	f7ff fec5 	bl	800ce94 <etharp_output_to_arp_index>
 800d10a:	4603      	mov	r3, r0
 800d10c:	e04a      	b.n	800d1a4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d10e:	2300      	movs	r3, #0
 800d110:	75fb      	strb	r3, [r7, #23]
 800d112:	e031      	b.n	800d178 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d114:	7dfa      	ldrb	r2, [r7, #23]
 800d116:	492c      	ldr	r1, [pc, #176]	; (800d1c8 <etharp_output+0x200>)
 800d118:	4613      	mov	r3, r2
 800d11a:	005b      	lsls	r3, r3, #1
 800d11c:	4413      	add	r3, r2
 800d11e:	00db      	lsls	r3, r3, #3
 800d120:	440b      	add	r3, r1
 800d122:	3314      	adds	r3, #20
 800d124:	781b      	ldrb	r3, [r3, #0]
 800d126:	2b01      	cmp	r3, #1
 800d128:	d923      	bls.n	800d172 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800d12a:	7dfa      	ldrb	r2, [r7, #23]
 800d12c:	4926      	ldr	r1, [pc, #152]	; (800d1c8 <etharp_output+0x200>)
 800d12e:	4613      	mov	r3, r2
 800d130:	005b      	lsls	r3, r3, #1
 800d132:	4413      	add	r3, r2
 800d134:	00db      	lsls	r3, r3, #3
 800d136:	440b      	add	r3, r1
 800d138:	3308      	adds	r3, #8
 800d13a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d13c:	68fa      	ldr	r2, [r7, #12]
 800d13e:	429a      	cmp	r2, r3
 800d140:	d117      	bne.n	800d172 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800d142:	69bb      	ldr	r3, [r7, #24]
 800d144:	6819      	ldr	r1, [r3, #0]
 800d146:	7dfa      	ldrb	r2, [r7, #23]
 800d148:	481f      	ldr	r0, [pc, #124]	; (800d1c8 <etharp_output+0x200>)
 800d14a:	4613      	mov	r3, r2
 800d14c:	005b      	lsls	r3, r3, #1
 800d14e:	4413      	add	r3, r2
 800d150:	00db      	lsls	r3, r3, #3
 800d152:	4403      	add	r3, r0
 800d154:	3304      	adds	r3, #4
 800d156:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800d158:	4299      	cmp	r1, r3
 800d15a:	d10a      	bne.n	800d172 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800d15c:	4a19      	ldr	r2, [pc, #100]	; (800d1c4 <etharp_output+0x1fc>)
 800d15e:	7dfb      	ldrb	r3, [r7, #23]
 800d160:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800d162:	7dfb      	ldrb	r3, [r7, #23]
 800d164:	461a      	mov	r2, r3
 800d166:	68b9      	ldr	r1, [r7, #8]
 800d168:	68f8      	ldr	r0, [r7, #12]
 800d16a:	f7ff fe93 	bl	800ce94 <etharp_output_to_arp_index>
 800d16e:	4603      	mov	r3, r0
 800d170:	e018      	b.n	800d1a4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d172:	7dfb      	ldrb	r3, [r7, #23]
 800d174:	3301      	adds	r3, #1
 800d176:	75fb      	strb	r3, [r7, #23]
 800d178:	7dfb      	ldrb	r3, [r7, #23]
 800d17a:	2b09      	cmp	r3, #9
 800d17c:	d9ca      	bls.n	800d114 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800d17e:	68ba      	ldr	r2, [r7, #8]
 800d180:	69b9      	ldr	r1, [r7, #24]
 800d182:	68f8      	ldr	r0, [r7, #12]
 800d184:	f000 f822 	bl	800d1cc <etharp_query>
 800d188:	4603      	mov	r3, r0
 800d18a:	e00b      	b.n	800d1a4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d192:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d196:	9300      	str	r3, [sp, #0]
 800d198:	69fb      	ldr	r3, [r7, #28]
 800d19a:	68b9      	ldr	r1, [r7, #8]
 800d19c:	68f8      	ldr	r0, [r7, #12]
 800d19e:	f001 fd45 	bl	800ec2c <ethernet_output>
 800d1a2:	4603      	mov	r3, r0
}
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	3720      	adds	r7, #32
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}
 800d1ac:	080123e8 	.word	0x080123e8
 800d1b0:	08012538 	.word	0x08012538
 800d1b4:	08012460 	.word	0x08012460
 800d1b8:	08012588 	.word	0x08012588
 800d1bc:	08012528 	.word	0x08012528
 800d1c0:	08012b9c 	.word	0x08012b9c
 800d1c4:	2000a604 	.word	0x2000a604
 800d1c8:	2000a514 	.word	0x2000a514

0800d1cc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b08c      	sub	sp, #48	; 0x30
 800d1d0:	af02      	add	r7, sp, #8
 800d1d2:	60f8      	str	r0, [r7, #12]
 800d1d4:	60b9      	str	r1, [r7, #8]
 800d1d6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	3326      	adds	r3, #38	; 0x26
 800d1dc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800d1de:	23ff      	movs	r3, #255	; 0xff
 800d1e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d1e8:	68bb      	ldr	r3, [r7, #8]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	68f9      	ldr	r1, [r7, #12]
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f000 fe0e 	bl	800de10 <ip4_addr_isbroadcast_u32>
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d10c      	bne.n	800d214 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d1fa:	68bb      	ldr	r3, [r7, #8]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d202:	2be0      	cmp	r3, #224	; 0xe0
 800d204:	d006      	beq.n	800d214 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d003      	beq.n	800d214 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800d20c:	68bb      	ldr	r3, [r7, #8]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d102      	bne.n	800d21a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d214:	f06f 030f 	mvn.w	r3, #15
 800d218:	e101      	b.n	800d41e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800d21a:	68fa      	ldr	r2, [r7, #12]
 800d21c:	2101      	movs	r1, #1
 800d21e:	68b8      	ldr	r0, [r7, #8]
 800d220:	f7ff fb60 	bl	800c8e4 <etharp_find_entry>
 800d224:	4603      	mov	r3, r0
 800d226:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800d228:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	da02      	bge.n	800d236 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800d230:	8a7b      	ldrh	r3, [r7, #18]
 800d232:	b25b      	sxtb	r3, r3
 800d234:	e0f3      	b.n	800d41e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800d236:	8a7b      	ldrh	r3, [r7, #18]
 800d238:	2b7e      	cmp	r3, #126	; 0x7e
 800d23a:	d906      	bls.n	800d24a <etharp_query+0x7e>
 800d23c:	4b7a      	ldr	r3, [pc, #488]	; (800d428 <etharp_query+0x25c>)
 800d23e:	f240 32c1 	movw	r2, #961	; 0x3c1
 800d242:	497a      	ldr	r1, [pc, #488]	; (800d42c <etharp_query+0x260>)
 800d244:	487a      	ldr	r0, [pc, #488]	; (800d430 <etharp_query+0x264>)
 800d246:	f001 fe39 	bl	800eebc <iprintf>
  i = (netif_addr_idx_t)i_err;
 800d24a:	8a7b      	ldrh	r3, [r7, #18]
 800d24c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800d24e:	7c7a      	ldrb	r2, [r7, #17]
 800d250:	4978      	ldr	r1, [pc, #480]	; (800d434 <etharp_query+0x268>)
 800d252:	4613      	mov	r3, r2
 800d254:	005b      	lsls	r3, r3, #1
 800d256:	4413      	add	r3, r2
 800d258:	00db      	lsls	r3, r3, #3
 800d25a:	440b      	add	r3, r1
 800d25c:	3314      	adds	r3, #20
 800d25e:	781b      	ldrb	r3, [r3, #0]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d115      	bne.n	800d290 <etharp_query+0xc4>
    is_new_entry = 1;
 800d264:	2301      	movs	r3, #1
 800d266:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800d268:	7c7a      	ldrb	r2, [r7, #17]
 800d26a:	4972      	ldr	r1, [pc, #456]	; (800d434 <etharp_query+0x268>)
 800d26c:	4613      	mov	r3, r2
 800d26e:	005b      	lsls	r3, r3, #1
 800d270:	4413      	add	r3, r2
 800d272:	00db      	lsls	r3, r3, #3
 800d274:	440b      	add	r3, r1
 800d276:	3314      	adds	r3, #20
 800d278:	2201      	movs	r2, #1
 800d27a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800d27c:	7c7a      	ldrb	r2, [r7, #17]
 800d27e:	496d      	ldr	r1, [pc, #436]	; (800d434 <etharp_query+0x268>)
 800d280:	4613      	mov	r3, r2
 800d282:	005b      	lsls	r3, r3, #1
 800d284:	4413      	add	r3, r2
 800d286:	00db      	lsls	r3, r3, #3
 800d288:	440b      	add	r3, r1
 800d28a:	3308      	adds	r3, #8
 800d28c:	68fa      	ldr	r2, [r7, #12]
 800d28e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800d290:	7c7a      	ldrb	r2, [r7, #17]
 800d292:	4968      	ldr	r1, [pc, #416]	; (800d434 <etharp_query+0x268>)
 800d294:	4613      	mov	r3, r2
 800d296:	005b      	lsls	r3, r3, #1
 800d298:	4413      	add	r3, r2
 800d29a:	00db      	lsls	r3, r3, #3
 800d29c:	440b      	add	r3, r1
 800d29e:	3314      	adds	r3, #20
 800d2a0:	781b      	ldrb	r3, [r3, #0]
 800d2a2:	2b01      	cmp	r3, #1
 800d2a4:	d011      	beq.n	800d2ca <etharp_query+0xfe>
 800d2a6:	7c7a      	ldrb	r2, [r7, #17]
 800d2a8:	4962      	ldr	r1, [pc, #392]	; (800d434 <etharp_query+0x268>)
 800d2aa:	4613      	mov	r3, r2
 800d2ac:	005b      	lsls	r3, r3, #1
 800d2ae:	4413      	add	r3, r2
 800d2b0:	00db      	lsls	r3, r3, #3
 800d2b2:	440b      	add	r3, r1
 800d2b4:	3314      	adds	r3, #20
 800d2b6:	781b      	ldrb	r3, [r3, #0]
 800d2b8:	2b01      	cmp	r3, #1
 800d2ba:	d806      	bhi.n	800d2ca <etharp_query+0xfe>
 800d2bc:	4b5a      	ldr	r3, [pc, #360]	; (800d428 <etharp_query+0x25c>)
 800d2be:	f240 32cd 	movw	r2, #973	; 0x3cd
 800d2c2:	495d      	ldr	r1, [pc, #372]	; (800d438 <etharp_query+0x26c>)
 800d2c4:	485a      	ldr	r0, [pc, #360]	; (800d430 <etharp_query+0x264>)
 800d2c6:	f001 fdf9 	bl	800eebc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800d2ca:	6a3b      	ldr	r3, [r7, #32]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d102      	bne.n	800d2d6 <etharp_query+0x10a>
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d10c      	bne.n	800d2f0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800d2d6:	68b9      	ldr	r1, [r7, #8]
 800d2d8:	68f8      	ldr	r0, [r7, #12]
 800d2da:	f000 f963 	bl	800d5a4 <etharp_request>
 800d2de:	4603      	mov	r3, r0
 800d2e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d102      	bne.n	800d2f0 <etharp_query+0x124>
      return result;
 800d2ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d2ee:	e096      	b.n	800d41e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d106      	bne.n	800d304 <etharp_query+0x138>
 800d2f6:	4b4c      	ldr	r3, [pc, #304]	; (800d428 <etharp_query+0x25c>)
 800d2f8:	f240 32e1 	movw	r2, #993	; 0x3e1
 800d2fc:	494f      	ldr	r1, [pc, #316]	; (800d43c <etharp_query+0x270>)
 800d2fe:	484c      	ldr	r0, [pc, #304]	; (800d430 <etharp_query+0x264>)
 800d300:	f001 fddc 	bl	800eebc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800d304:	7c7a      	ldrb	r2, [r7, #17]
 800d306:	494b      	ldr	r1, [pc, #300]	; (800d434 <etharp_query+0x268>)
 800d308:	4613      	mov	r3, r2
 800d30a:	005b      	lsls	r3, r3, #1
 800d30c:	4413      	add	r3, r2
 800d30e:	00db      	lsls	r3, r3, #3
 800d310:	440b      	add	r3, r1
 800d312:	3314      	adds	r3, #20
 800d314:	781b      	ldrb	r3, [r3, #0]
 800d316:	2b01      	cmp	r3, #1
 800d318:	d917      	bls.n	800d34a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800d31a:	4a49      	ldr	r2, [pc, #292]	; (800d440 <etharp_query+0x274>)
 800d31c:	7c7b      	ldrb	r3, [r7, #17]
 800d31e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800d320:	7c7a      	ldrb	r2, [r7, #17]
 800d322:	4613      	mov	r3, r2
 800d324:	005b      	lsls	r3, r3, #1
 800d326:	4413      	add	r3, r2
 800d328:	00db      	lsls	r3, r3, #3
 800d32a:	3308      	adds	r3, #8
 800d32c:	4a41      	ldr	r2, [pc, #260]	; (800d434 <etharp_query+0x268>)
 800d32e:	4413      	add	r3, r2
 800d330:	3304      	adds	r3, #4
 800d332:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d336:	9200      	str	r2, [sp, #0]
 800d338:	697a      	ldr	r2, [r7, #20]
 800d33a:	6879      	ldr	r1, [r7, #4]
 800d33c:	68f8      	ldr	r0, [r7, #12]
 800d33e:	f001 fc75 	bl	800ec2c <ethernet_output>
 800d342:	4603      	mov	r3, r0
 800d344:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d348:	e067      	b.n	800d41a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d34a:	7c7a      	ldrb	r2, [r7, #17]
 800d34c:	4939      	ldr	r1, [pc, #228]	; (800d434 <etharp_query+0x268>)
 800d34e:	4613      	mov	r3, r2
 800d350:	005b      	lsls	r3, r3, #1
 800d352:	4413      	add	r3, r2
 800d354:	00db      	lsls	r3, r3, #3
 800d356:	440b      	add	r3, r1
 800d358:	3314      	adds	r3, #20
 800d35a:	781b      	ldrb	r3, [r3, #0]
 800d35c:	2b01      	cmp	r3, #1
 800d35e:	d15c      	bne.n	800d41a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800d360:	2300      	movs	r3, #0
 800d362:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d368:	e01c      	b.n	800d3a4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d36a:	69fb      	ldr	r3, [r7, #28]
 800d36c:	895a      	ldrh	r2, [r3, #10]
 800d36e:	69fb      	ldr	r3, [r7, #28]
 800d370:	891b      	ldrh	r3, [r3, #8]
 800d372:	429a      	cmp	r2, r3
 800d374:	d10a      	bne.n	800d38c <etharp_query+0x1c0>
 800d376:	69fb      	ldr	r3, [r7, #28]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d006      	beq.n	800d38c <etharp_query+0x1c0>
 800d37e:	4b2a      	ldr	r3, [pc, #168]	; (800d428 <etharp_query+0x25c>)
 800d380:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800d384:	492f      	ldr	r1, [pc, #188]	; (800d444 <etharp_query+0x278>)
 800d386:	482a      	ldr	r0, [pc, #168]	; (800d430 <etharp_query+0x264>)
 800d388:	f001 fd98 	bl	800eebc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800d38c:	69fb      	ldr	r3, [r7, #28]
 800d38e:	7b1b      	ldrb	r3, [r3, #12]
 800d390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d394:	2b00      	cmp	r3, #0
 800d396:	d002      	beq.n	800d39e <etharp_query+0x1d2>
        copy_needed = 1;
 800d398:	2301      	movs	r3, #1
 800d39a:	61bb      	str	r3, [r7, #24]
        break;
 800d39c:	e005      	b.n	800d3aa <etharp_query+0x1de>
      }
      p = p->next;
 800d39e:	69fb      	ldr	r3, [r7, #28]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d3a4:	69fb      	ldr	r3, [r7, #28]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d1df      	bne.n	800d36a <etharp_query+0x19e>
    }
    if (copy_needed) {
 800d3aa:	69bb      	ldr	r3, [r7, #24]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d007      	beq.n	800d3c0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800d3b0:	687a      	ldr	r2, [r7, #4]
 800d3b2:	f44f 7120 	mov.w	r1, #640	; 0x280
 800d3b6:	200e      	movs	r0, #14
 800d3b8:	f7f9 f9d8 	bl	800676c <pbuf_clone>
 800d3bc:	61f8      	str	r0, [r7, #28]
 800d3be:	e004      	b.n	800d3ca <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800d3c4:	69f8      	ldr	r0, [r7, #28]
 800d3c6:	f7f8 ff73 	bl	80062b0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800d3ca:	69fb      	ldr	r3, [r7, #28]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d021      	beq.n	800d414 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800d3d0:	7c7a      	ldrb	r2, [r7, #17]
 800d3d2:	4918      	ldr	r1, [pc, #96]	; (800d434 <etharp_query+0x268>)
 800d3d4:	4613      	mov	r3, r2
 800d3d6:	005b      	lsls	r3, r3, #1
 800d3d8:	4413      	add	r3, r2
 800d3da:	00db      	lsls	r3, r3, #3
 800d3dc:	440b      	add	r3, r1
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d00a      	beq.n	800d3fa <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800d3e4:	7c7a      	ldrb	r2, [r7, #17]
 800d3e6:	4913      	ldr	r1, [pc, #76]	; (800d434 <etharp_query+0x268>)
 800d3e8:	4613      	mov	r3, r2
 800d3ea:	005b      	lsls	r3, r3, #1
 800d3ec:	4413      	add	r3, r2
 800d3ee:	00db      	lsls	r3, r3, #3
 800d3f0:	440b      	add	r3, r1
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	f7f8 febb 	bl	8006170 <pbuf_free>
      }
      arp_table[i].q = p;
 800d3fa:	7c7a      	ldrb	r2, [r7, #17]
 800d3fc:	490d      	ldr	r1, [pc, #52]	; (800d434 <etharp_query+0x268>)
 800d3fe:	4613      	mov	r3, r2
 800d400:	005b      	lsls	r3, r3, #1
 800d402:	4413      	add	r3, r2
 800d404:	00db      	lsls	r3, r3, #3
 800d406:	440b      	add	r3, r1
 800d408:	69fa      	ldr	r2, [r7, #28]
 800d40a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d40c:	2300      	movs	r3, #0
 800d40e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d412:	e002      	b.n	800d41a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d414:	23ff      	movs	r3, #255	; 0xff
 800d416:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800d41a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d41e:	4618      	mov	r0, r3
 800d420:	3728      	adds	r7, #40	; 0x28
 800d422:	46bd      	mov	sp, r7
 800d424:	bd80      	pop	{r7, pc}
 800d426:	bf00      	nop
 800d428:	080123e8 	.word	0x080123e8
 800d42c:	08012594 	.word	0x08012594
 800d430:	08012460 	.word	0x08012460
 800d434:	2000a514 	.word	0x2000a514
 800d438:	080125a4 	.word	0x080125a4
 800d43c:	08012588 	.word	0x08012588
 800d440:	2000a604 	.word	0x2000a604
 800d444:	080125cc 	.word	0x080125cc

0800d448 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b08a      	sub	sp, #40	; 0x28
 800d44c:	af02      	add	r7, sp, #8
 800d44e:	60f8      	str	r0, [r7, #12]
 800d450:	60b9      	str	r1, [r7, #8]
 800d452:	607a      	str	r2, [r7, #4]
 800d454:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800d456:	2300      	movs	r3, #0
 800d458:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d106      	bne.n	800d46e <etharp_raw+0x26>
 800d460:	4b3a      	ldr	r3, [pc, #232]	; (800d54c <etharp_raw+0x104>)
 800d462:	f240 4257 	movw	r2, #1111	; 0x457
 800d466:	493a      	ldr	r1, [pc, #232]	; (800d550 <etharp_raw+0x108>)
 800d468:	483a      	ldr	r0, [pc, #232]	; (800d554 <etharp_raw+0x10c>)
 800d46a:	f001 fd27 	bl	800eebc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d46e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d472:	211c      	movs	r1, #28
 800d474:	200e      	movs	r0, #14
 800d476:	f7f8 fb97 	bl	8005ba8 <pbuf_alloc>
 800d47a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d47c:	69bb      	ldr	r3, [r7, #24]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d102      	bne.n	800d488 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d482:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d486:	e05d      	b.n	800d544 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d488:	69bb      	ldr	r3, [r7, #24]
 800d48a:	895b      	ldrh	r3, [r3, #10]
 800d48c:	2b1b      	cmp	r3, #27
 800d48e:	d806      	bhi.n	800d49e <etharp_raw+0x56>
 800d490:	4b2e      	ldr	r3, [pc, #184]	; (800d54c <etharp_raw+0x104>)
 800d492:	f240 4262 	movw	r2, #1122	; 0x462
 800d496:	4930      	ldr	r1, [pc, #192]	; (800d558 <etharp_raw+0x110>)
 800d498:	482e      	ldr	r0, [pc, #184]	; (800d554 <etharp_raw+0x10c>)
 800d49a:	f001 fd0f 	bl	800eebc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d49e:	69bb      	ldr	r3, [r7, #24]
 800d4a0:	685b      	ldr	r3, [r3, #4]
 800d4a2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d4a4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f7f7 fb04 	bl	8004ab4 <lwip_htons>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	461a      	mov	r2, r3
 800d4b0:	697b      	ldr	r3, [r7, #20]
 800d4b2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d4ba:	2b06      	cmp	r3, #6
 800d4bc:	d006      	beq.n	800d4cc <etharp_raw+0x84>
 800d4be:	4b23      	ldr	r3, [pc, #140]	; (800d54c <etharp_raw+0x104>)
 800d4c0:	f240 4269 	movw	r2, #1129	; 0x469
 800d4c4:	4925      	ldr	r1, [pc, #148]	; (800d55c <etharp_raw+0x114>)
 800d4c6:	4823      	ldr	r0, [pc, #140]	; (800d554 <etharp_raw+0x10c>)
 800d4c8:	f001 fcf8 	bl	800eebc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800d4cc:	697b      	ldr	r3, [r7, #20]
 800d4ce:	3308      	adds	r3, #8
 800d4d0:	2206      	movs	r2, #6
 800d4d2:	6839      	ldr	r1, [r7, #0]
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	f001 fe18 	bl	800f10a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800d4da:	697b      	ldr	r3, [r7, #20]
 800d4dc:	3312      	adds	r3, #18
 800d4de:	2206      	movs	r2, #6
 800d4e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	f001 fe11 	bl	800f10a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800d4e8:	697b      	ldr	r3, [r7, #20]
 800d4ea:	330e      	adds	r3, #14
 800d4ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4ee:	6812      	ldr	r2, [r2, #0]
 800d4f0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800d4f2:	697b      	ldr	r3, [r7, #20]
 800d4f4:	3318      	adds	r3, #24
 800d4f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4f8:	6812      	ldr	r2, [r2, #0]
 800d4fa:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800d4fc:	697b      	ldr	r3, [r7, #20]
 800d4fe:	2200      	movs	r2, #0
 800d500:	701a      	strb	r2, [r3, #0]
 800d502:	2200      	movs	r2, #0
 800d504:	f042 0201 	orr.w	r2, r2, #1
 800d508:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	2200      	movs	r2, #0
 800d50e:	f042 0208 	orr.w	r2, r2, #8
 800d512:	709a      	strb	r2, [r3, #2]
 800d514:	2200      	movs	r2, #0
 800d516:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d518:	697b      	ldr	r3, [r7, #20]
 800d51a:	2206      	movs	r2, #6
 800d51c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d51e:	697b      	ldr	r3, [r7, #20]
 800d520:	2204      	movs	r2, #4
 800d522:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d524:	f640 0306 	movw	r3, #2054	; 0x806
 800d528:	9300      	str	r3, [sp, #0]
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	68ba      	ldr	r2, [r7, #8]
 800d52e:	69b9      	ldr	r1, [r7, #24]
 800d530:	68f8      	ldr	r0, [r7, #12]
 800d532:	f001 fb7b 	bl	800ec2c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d536:	69b8      	ldr	r0, [r7, #24]
 800d538:	f7f8 fe1a 	bl	8006170 <pbuf_free>
  p = NULL;
 800d53c:	2300      	movs	r3, #0
 800d53e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800d540:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d544:	4618      	mov	r0, r3
 800d546:	3720      	adds	r7, #32
 800d548:	46bd      	mov	sp, r7
 800d54a:	bd80      	pop	{r7, pc}
 800d54c:	080123e8 	.word	0x080123e8
 800d550:	08012538 	.word	0x08012538
 800d554:	08012460 	.word	0x08012460
 800d558:	080125e8 	.word	0x080125e8
 800d55c:	0801261c 	.word	0x0801261c

0800d560 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b088      	sub	sp, #32
 800d564:	af04      	add	r7, sp, #16
 800d566:	60f8      	str	r0, [r7, #12]
 800d568:	60b9      	str	r1, [r7, #8]
 800d56a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d57c:	2201      	movs	r2, #1
 800d57e:	9203      	str	r2, [sp, #12]
 800d580:	68ba      	ldr	r2, [r7, #8]
 800d582:	9202      	str	r2, [sp, #8]
 800d584:	4a06      	ldr	r2, [pc, #24]	; (800d5a0 <etharp_request_dst+0x40>)
 800d586:	9201      	str	r2, [sp, #4]
 800d588:	9300      	str	r3, [sp, #0]
 800d58a:	4603      	mov	r3, r0
 800d58c:	687a      	ldr	r2, [r7, #4]
 800d58e:	68f8      	ldr	r0, [r7, #12]
 800d590:	f7ff ff5a 	bl	800d448 <etharp_raw>
 800d594:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800d596:	4618      	mov	r0, r3
 800d598:	3710      	adds	r7, #16
 800d59a:	46bd      	mov	sp, r7
 800d59c:	bd80      	pop	{r7, pc}
 800d59e:	bf00      	nop
 800d5a0:	08012ba4 	.word	0x08012ba4

0800d5a4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b082      	sub	sp, #8
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
 800d5ac:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800d5ae:	4a05      	ldr	r2, [pc, #20]	; (800d5c4 <etharp_request+0x20>)
 800d5b0:	6839      	ldr	r1, [r7, #0]
 800d5b2:	6878      	ldr	r0, [r7, #4]
 800d5b4:	f7ff ffd4 	bl	800d560 <etharp_request_dst>
 800d5b8:	4603      	mov	r3, r0
}
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	3708      	adds	r7, #8
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	bd80      	pop	{r7, pc}
 800d5c2:	bf00      	nop
 800d5c4:	08012b9c 	.word	0x08012b9c

0800d5c8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b08e      	sub	sp, #56	; 0x38
 800d5cc:	af04      	add	r7, sp, #16
 800d5ce:	6078      	str	r0, [r7, #4]
 800d5d0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800d5d2:	4b79      	ldr	r3, [pc, #484]	; (800d7b8 <icmp_input+0x1f0>)
 800d5d4:	689b      	ldr	r3, [r3, #8]
 800d5d6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800d5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5da:	781b      	ldrb	r3, [r3, #0]
 800d5dc:	f003 030f 	and.w	r3, r3, #15
 800d5e0:	b2db      	uxtb	r3, r3
 800d5e2:	009b      	lsls	r3, r3, #2
 800d5e4:	b2db      	uxtb	r3, r3
 800d5e6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800d5e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d5ea:	2b13      	cmp	r3, #19
 800d5ec:	f240 80cd 	bls.w	800d78a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	895b      	ldrh	r3, [r3, #10]
 800d5f4:	2b03      	cmp	r3, #3
 800d5f6:	f240 80ca 	bls.w	800d78e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	685b      	ldr	r3, [r3, #4]
 800d5fe:	781b      	ldrb	r3, [r3, #0]
 800d600:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800d604:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800d608:	2b00      	cmp	r3, #0
 800d60a:	f000 80b7 	beq.w	800d77c <icmp_input+0x1b4>
 800d60e:	2b08      	cmp	r3, #8
 800d610:	f040 80b7 	bne.w	800d782 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800d614:	4b69      	ldr	r3, [pc, #420]	; (800d7bc <icmp_input+0x1f4>)
 800d616:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d618:	4b67      	ldr	r3, [pc, #412]	; (800d7b8 <icmp_input+0x1f0>)
 800d61a:	695b      	ldr	r3, [r3, #20]
 800d61c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d620:	2be0      	cmp	r3, #224	; 0xe0
 800d622:	f000 80bb 	beq.w	800d79c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800d626:	4b64      	ldr	r3, [pc, #400]	; (800d7b8 <icmp_input+0x1f0>)
 800d628:	695b      	ldr	r3, [r3, #20]
 800d62a:	4a63      	ldr	r2, [pc, #396]	; (800d7b8 <icmp_input+0x1f0>)
 800d62c:	6812      	ldr	r2, [r2, #0]
 800d62e:	4611      	mov	r1, r2
 800d630:	4618      	mov	r0, r3
 800d632:	f000 fbed 	bl	800de10 <ip4_addr_isbroadcast_u32>
 800d636:	4603      	mov	r3, r0
 800d638:	2b00      	cmp	r3, #0
 800d63a:	f040 80b1 	bne.w	800d7a0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	891b      	ldrh	r3, [r3, #8]
 800d642:	2b07      	cmp	r3, #7
 800d644:	f240 80a5 	bls.w	800d792 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d648:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d64a:	330e      	adds	r3, #14
 800d64c:	4619      	mov	r1, r3
 800d64e:	6878      	ldr	r0, [r7, #4]
 800d650:	f7f8 fcf8 	bl	8006044 <pbuf_add_header>
 800d654:	4603      	mov	r3, r0
 800d656:	2b00      	cmp	r3, #0
 800d658:	d04b      	beq.n	800d6f2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	891a      	ldrh	r2, [r3, #8]
 800d65e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d660:	4413      	add	r3, r2
 800d662:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	891b      	ldrh	r3, [r3, #8]
 800d668:	8b7a      	ldrh	r2, [r7, #26]
 800d66a:	429a      	cmp	r2, r3
 800d66c:	f0c0 809a 	bcc.w	800d7a4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800d670:	8b7b      	ldrh	r3, [r7, #26]
 800d672:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d676:	4619      	mov	r1, r3
 800d678:	200e      	movs	r0, #14
 800d67a:	f7f8 fa95 	bl	8005ba8 <pbuf_alloc>
 800d67e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800d680:	697b      	ldr	r3, [r7, #20]
 800d682:	2b00      	cmp	r3, #0
 800d684:	f000 8090 	beq.w	800d7a8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800d688:	697b      	ldr	r3, [r7, #20]
 800d68a:	895b      	ldrh	r3, [r3, #10]
 800d68c:	461a      	mov	r2, r3
 800d68e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d690:	3308      	adds	r3, #8
 800d692:	429a      	cmp	r2, r3
 800d694:	d203      	bcs.n	800d69e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800d696:	6978      	ldr	r0, [r7, #20]
 800d698:	f7f8 fd6a 	bl	8006170 <pbuf_free>
          goto icmperr;
 800d69c:	e085      	b.n	800d7aa <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800d69e:	697b      	ldr	r3, [r7, #20]
 800d6a0:	685b      	ldr	r3, [r3, #4]
 800d6a2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d6a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	f001 fd2f 	bl	800f10a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800d6ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d6ae:	4619      	mov	r1, r3
 800d6b0:	6978      	ldr	r0, [r7, #20]
 800d6b2:	f7f8 fcd7 	bl	8006064 <pbuf_remove_header>
 800d6b6:	4603      	mov	r3, r0
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d009      	beq.n	800d6d0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800d6bc:	4b40      	ldr	r3, [pc, #256]	; (800d7c0 <icmp_input+0x1f8>)
 800d6be:	22b6      	movs	r2, #182	; 0xb6
 800d6c0:	4940      	ldr	r1, [pc, #256]	; (800d7c4 <icmp_input+0x1fc>)
 800d6c2:	4841      	ldr	r0, [pc, #260]	; (800d7c8 <icmp_input+0x200>)
 800d6c4:	f001 fbfa 	bl	800eebc <iprintf>
          pbuf_free(r);
 800d6c8:	6978      	ldr	r0, [r7, #20]
 800d6ca:	f7f8 fd51 	bl	8006170 <pbuf_free>
          goto icmperr;
 800d6ce:	e06c      	b.n	800d7aa <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800d6d0:	6879      	ldr	r1, [r7, #4]
 800d6d2:	6978      	ldr	r0, [r7, #20]
 800d6d4:	f7f8 fe74 	bl	80063c0 <pbuf_copy>
 800d6d8:	4603      	mov	r3, r0
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d003      	beq.n	800d6e6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800d6de:	6978      	ldr	r0, [r7, #20]
 800d6e0:	f7f8 fd46 	bl	8006170 <pbuf_free>
          goto icmperr;
 800d6e4:	e061      	b.n	800d7aa <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800d6e6:	6878      	ldr	r0, [r7, #4]
 800d6e8:	f7f8 fd42 	bl	8006170 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800d6ec:	697b      	ldr	r3, [r7, #20]
 800d6ee:	607b      	str	r3, [r7, #4]
 800d6f0:	e00f      	b.n	800d712 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d6f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d6f4:	330e      	adds	r3, #14
 800d6f6:	4619      	mov	r1, r3
 800d6f8:	6878      	ldr	r0, [r7, #4]
 800d6fa:	f7f8 fcb3 	bl	8006064 <pbuf_remove_header>
 800d6fe:	4603      	mov	r3, r0
 800d700:	2b00      	cmp	r3, #0
 800d702:	d006      	beq.n	800d712 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800d704:	4b2e      	ldr	r3, [pc, #184]	; (800d7c0 <icmp_input+0x1f8>)
 800d706:	22c7      	movs	r2, #199	; 0xc7
 800d708:	4930      	ldr	r1, [pc, #192]	; (800d7cc <icmp_input+0x204>)
 800d70a:	482f      	ldr	r0, [pc, #188]	; (800d7c8 <icmp_input+0x200>)
 800d70c:	f001 fbd6 	bl	800eebc <iprintf>
          goto icmperr;
 800d710:	e04b      	b.n	800d7aa <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	685b      	ldr	r3, [r3, #4]
 800d716:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800d718:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d71a:	4619      	mov	r1, r3
 800d71c:	6878      	ldr	r0, [r7, #4]
 800d71e:	f7f8 fc91 	bl	8006044 <pbuf_add_header>
 800d722:	4603      	mov	r3, r0
 800d724:	2b00      	cmp	r3, #0
 800d726:	d12b      	bne.n	800d780 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	685b      	ldr	r3, [r3, #4]
 800d72c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800d72e:	69fb      	ldr	r3, [r7, #28]
 800d730:	681a      	ldr	r2, [r3, #0]
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800d736:	4b20      	ldr	r3, [pc, #128]	; (800d7b8 <icmp_input+0x1f0>)
 800d738:	691a      	ldr	r2, [r3, #16]
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	2200      	movs	r2, #0
 800d742:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800d744:	693b      	ldr	r3, [r7, #16]
 800d746:	2200      	movs	r2, #0
 800d748:	709a      	strb	r2, [r3, #2]
 800d74a:	2200      	movs	r2, #0
 800d74c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	22ff      	movs	r2, #255	; 0xff
 800d752:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	2200      	movs	r2, #0
 800d758:	729a      	strb	r2, [r3, #10]
 800d75a:	2200      	movs	r2, #0
 800d75c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	9302      	str	r3, [sp, #8]
 800d762:	2301      	movs	r3, #1
 800d764:	9301      	str	r3, [sp, #4]
 800d766:	2300      	movs	r3, #0
 800d768:	9300      	str	r3, [sp, #0]
 800d76a:	23ff      	movs	r3, #255	; 0xff
 800d76c:	2200      	movs	r2, #0
 800d76e:	69f9      	ldr	r1, [r7, #28]
 800d770:	6878      	ldr	r0, [r7, #4]
 800d772:	f000 fa75 	bl	800dc60 <ip4_output_if>
 800d776:	4603      	mov	r3, r0
 800d778:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800d77a:	e001      	b.n	800d780 <icmp_input+0x1b8>
      break;
 800d77c:	bf00      	nop
 800d77e:	e000      	b.n	800d782 <icmp_input+0x1ba>
      break;
 800d780:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800d782:	6878      	ldr	r0, [r7, #4]
 800d784:	f7f8 fcf4 	bl	8006170 <pbuf_free>
  return;
 800d788:	e013      	b.n	800d7b2 <icmp_input+0x1ea>
    goto lenerr;
 800d78a:	bf00      	nop
 800d78c:	e002      	b.n	800d794 <icmp_input+0x1cc>
    goto lenerr;
 800d78e:	bf00      	nop
 800d790:	e000      	b.n	800d794 <icmp_input+0x1cc>
        goto lenerr;
 800d792:	bf00      	nop
lenerr:
  pbuf_free(p);
 800d794:	6878      	ldr	r0, [r7, #4]
 800d796:	f7f8 fceb 	bl	8006170 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d79a:	e00a      	b.n	800d7b2 <icmp_input+0x1ea>
        goto icmperr;
 800d79c:	bf00      	nop
 800d79e:	e004      	b.n	800d7aa <icmp_input+0x1e2>
        goto icmperr;
 800d7a0:	bf00      	nop
 800d7a2:	e002      	b.n	800d7aa <icmp_input+0x1e2>
          goto icmperr;
 800d7a4:	bf00      	nop
 800d7a6:	e000      	b.n	800d7aa <icmp_input+0x1e2>
          goto icmperr;
 800d7a8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800d7aa:	6878      	ldr	r0, [r7, #4]
 800d7ac:	f7f8 fce0 	bl	8006170 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d7b0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800d7b2:	3728      	adds	r7, #40	; 0x28
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bd80      	pop	{r7, pc}
 800d7b8:	20004d84 	.word	0x20004d84
 800d7bc:	20004d98 	.word	0x20004d98
 800d7c0:	08012660 	.word	0x08012660
 800d7c4:	08012698 	.word	0x08012698
 800d7c8:	080126d0 	.word	0x080126d0
 800d7cc:	080126f8 	.word	0x080126f8

0800d7d0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b082      	sub	sp, #8
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
 800d7d8:	460b      	mov	r3, r1
 800d7da:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800d7dc:	78fb      	ldrb	r3, [r7, #3]
 800d7de:	461a      	mov	r2, r3
 800d7e0:	2103      	movs	r1, #3
 800d7e2:	6878      	ldr	r0, [r7, #4]
 800d7e4:	f000 f814 	bl	800d810 <icmp_send_response>
}
 800d7e8:	bf00      	nop
 800d7ea:	3708      	adds	r7, #8
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bd80      	pop	{r7, pc}

0800d7f0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b082      	sub	sp, #8
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
 800d7f8:	460b      	mov	r3, r1
 800d7fa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800d7fc:	78fb      	ldrb	r3, [r7, #3]
 800d7fe:	461a      	mov	r2, r3
 800d800:	210b      	movs	r1, #11
 800d802:	6878      	ldr	r0, [r7, #4]
 800d804:	f000 f804 	bl	800d810 <icmp_send_response>
}
 800d808:	bf00      	nop
 800d80a:	3708      	adds	r7, #8
 800d80c:	46bd      	mov	sp, r7
 800d80e:	bd80      	pop	{r7, pc}

0800d810 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b08c      	sub	sp, #48	; 0x30
 800d814:	af04      	add	r7, sp, #16
 800d816:	6078      	str	r0, [r7, #4]
 800d818:	460b      	mov	r3, r1
 800d81a:	70fb      	strb	r3, [r7, #3]
 800d81c:	4613      	mov	r3, r2
 800d81e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800d820:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d824:	2124      	movs	r1, #36	; 0x24
 800d826:	2022      	movs	r0, #34	; 0x22
 800d828:	f7f8 f9be 	bl	8005ba8 <pbuf_alloc>
 800d82c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800d82e:	69fb      	ldr	r3, [r7, #28]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d04c      	beq.n	800d8ce <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800d834:	69fb      	ldr	r3, [r7, #28]
 800d836:	895b      	ldrh	r3, [r3, #10]
 800d838:	2b23      	cmp	r3, #35	; 0x23
 800d83a:	d806      	bhi.n	800d84a <icmp_send_response+0x3a>
 800d83c:	4b26      	ldr	r3, [pc, #152]	; (800d8d8 <icmp_send_response+0xc8>)
 800d83e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d842:	4926      	ldr	r1, [pc, #152]	; (800d8dc <icmp_send_response+0xcc>)
 800d844:	4826      	ldr	r0, [pc, #152]	; (800d8e0 <icmp_send_response+0xd0>)
 800d846:	f001 fb39 	bl	800eebc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	685b      	ldr	r3, [r3, #4]
 800d84e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800d850:	69fb      	ldr	r3, [r7, #28]
 800d852:	685b      	ldr	r3, [r3, #4]
 800d854:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800d856:	697b      	ldr	r3, [r7, #20]
 800d858:	78fa      	ldrb	r2, [r7, #3]
 800d85a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800d85c:	697b      	ldr	r3, [r7, #20]
 800d85e:	78ba      	ldrb	r2, [r7, #2]
 800d860:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800d862:	697b      	ldr	r3, [r7, #20]
 800d864:	2200      	movs	r2, #0
 800d866:	711a      	strb	r2, [r3, #4]
 800d868:	2200      	movs	r2, #0
 800d86a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800d86c:	697b      	ldr	r3, [r7, #20]
 800d86e:	2200      	movs	r2, #0
 800d870:	719a      	strb	r2, [r3, #6]
 800d872:	2200      	movs	r2, #0
 800d874:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800d876:	69fb      	ldr	r3, [r7, #28]
 800d878:	685b      	ldr	r3, [r3, #4]
 800d87a:	f103 0008 	add.w	r0, r3, #8
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	685b      	ldr	r3, [r3, #4]
 800d882:	221c      	movs	r2, #28
 800d884:	4619      	mov	r1, r3
 800d886:	f001 fc40 	bl	800f10a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800d88a:	69bb      	ldr	r3, [r7, #24]
 800d88c:	68db      	ldr	r3, [r3, #12]
 800d88e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800d890:	f107 030c 	add.w	r3, r7, #12
 800d894:	4618      	mov	r0, r3
 800d896:	f000 f825 	bl	800d8e4 <ip4_route>
 800d89a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800d89c:	693b      	ldr	r3, [r7, #16]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d011      	beq.n	800d8c6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800d8a2:	697b      	ldr	r3, [r7, #20]
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	709a      	strb	r2, [r3, #2]
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800d8ac:	f107 020c 	add.w	r2, r7, #12
 800d8b0:	693b      	ldr	r3, [r7, #16]
 800d8b2:	9302      	str	r3, [sp, #8]
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	9301      	str	r3, [sp, #4]
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	9300      	str	r3, [sp, #0]
 800d8bc:	23ff      	movs	r3, #255	; 0xff
 800d8be:	2100      	movs	r1, #0
 800d8c0:	69f8      	ldr	r0, [r7, #28]
 800d8c2:	f000 f9cd 	bl	800dc60 <ip4_output_if>
  }
  pbuf_free(q);
 800d8c6:	69f8      	ldr	r0, [r7, #28]
 800d8c8:	f7f8 fc52 	bl	8006170 <pbuf_free>
 800d8cc:	e000      	b.n	800d8d0 <icmp_send_response+0xc0>
    return;
 800d8ce:	bf00      	nop
}
 800d8d0:	3720      	adds	r7, #32
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	bd80      	pop	{r7, pc}
 800d8d6:	bf00      	nop
 800d8d8:	08012660 	.word	0x08012660
 800d8dc:	0801272c 	.word	0x0801272c
 800d8e0:	080126d0 	.word	0x080126d0

0800d8e4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800d8e4:	b480      	push	{r7}
 800d8e6:	b085      	sub	sp, #20
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800d8ec:	4b33      	ldr	r3, [pc, #204]	; (800d9bc <ip4_route+0xd8>)
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	60fb      	str	r3, [r7, #12]
 800d8f2:	e036      	b.n	800d962 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d8fa:	f003 0301 	and.w	r3, r3, #1
 800d8fe:	b2db      	uxtb	r3, r3
 800d900:	2b00      	cmp	r3, #0
 800d902:	d02b      	beq.n	800d95c <ip4_route+0x78>
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d90a:	089b      	lsrs	r3, r3, #2
 800d90c:	f003 0301 	and.w	r3, r3, #1
 800d910:	b2db      	uxtb	r3, r3
 800d912:	2b00      	cmp	r3, #0
 800d914:	d022      	beq.n	800d95c <ip4_route+0x78>
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	3304      	adds	r3, #4
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d01d      	beq.n	800d95c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681a      	ldr	r2, [r3, #0]
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	3304      	adds	r3, #4
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	405a      	eors	r2, r3
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	3308      	adds	r3, #8
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	4013      	ands	r3, r2
 800d934:	2b00      	cmp	r3, #0
 800d936:	d101      	bne.n	800d93c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	e038      	b.n	800d9ae <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d942:	f003 0302 	and.w	r3, r3, #2
 800d946:	2b00      	cmp	r3, #0
 800d948:	d108      	bne.n	800d95c <ip4_route+0x78>
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681a      	ldr	r2, [r3, #0]
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	330c      	adds	r3, #12
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	429a      	cmp	r2, r3
 800d956:	d101      	bne.n	800d95c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	e028      	b.n	800d9ae <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	60fb      	str	r3, [r7, #12]
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d1c5      	bne.n	800d8f4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d968:	4b15      	ldr	r3, [pc, #84]	; (800d9c0 <ip4_route+0xdc>)
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d01a      	beq.n	800d9a6 <ip4_route+0xc2>
 800d970:	4b13      	ldr	r3, [pc, #76]	; (800d9c0 <ip4_route+0xdc>)
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d978:	f003 0301 	and.w	r3, r3, #1
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d012      	beq.n	800d9a6 <ip4_route+0xc2>
 800d980:	4b0f      	ldr	r3, [pc, #60]	; (800d9c0 <ip4_route+0xdc>)
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d988:	f003 0304 	and.w	r3, r3, #4
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d00a      	beq.n	800d9a6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d990:	4b0b      	ldr	r3, [pc, #44]	; (800d9c0 <ip4_route+0xdc>)
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	3304      	adds	r3, #4
 800d996:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d004      	beq.n	800d9a6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	b2db      	uxtb	r3, r3
 800d9a2:	2b7f      	cmp	r3, #127	; 0x7f
 800d9a4:	d101      	bne.n	800d9aa <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	e001      	b.n	800d9ae <ip4_route+0xca>
  }

  return netif_default;
 800d9aa:	4b05      	ldr	r3, [pc, #20]	; (800d9c0 <ip4_route+0xdc>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
}
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	3714      	adds	r7, #20
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b8:	4770      	bx	lr
 800d9ba:	bf00      	nop
 800d9bc:	2000a4a8 	.word	0x2000a4a8
 800d9c0:	2000a4ac 	.word	0x2000a4ac

0800d9c4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b082      	sub	sp, #8
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d9d2:	f003 0301 	and.w	r3, r3, #1
 800d9d6:	b2db      	uxtb	r3, r3
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d016      	beq.n	800da0a <ip4_input_accept+0x46>
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	3304      	adds	r3, #4
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d011      	beq.n	800da0a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d9e6:	4b0b      	ldr	r3, [pc, #44]	; (800da14 <ip4_input_accept+0x50>)
 800d9e8:	695a      	ldr	r2, [r3, #20]
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	3304      	adds	r3, #4
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	429a      	cmp	r2, r3
 800d9f2:	d008      	beq.n	800da06 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d9f4:	4b07      	ldr	r3, [pc, #28]	; (800da14 <ip4_input_accept+0x50>)
 800d9f6:	695b      	ldr	r3, [r3, #20]
 800d9f8:	6879      	ldr	r1, [r7, #4]
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	f000 fa08 	bl	800de10 <ip4_addr_isbroadcast_u32>
 800da00:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800da02:	2b00      	cmp	r3, #0
 800da04:	d001      	beq.n	800da0a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800da06:	2301      	movs	r3, #1
 800da08:	e000      	b.n	800da0c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800da0a:	2300      	movs	r3, #0
}
 800da0c:	4618      	mov	r0, r3
 800da0e:	3708      	adds	r7, #8
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}
 800da14:	20004d84 	.word	0x20004d84

0800da18 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b086      	sub	sp, #24
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
 800da20:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	685b      	ldr	r3, [r3, #4]
 800da26:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800da28:	697b      	ldr	r3, [r7, #20]
 800da2a:	781b      	ldrb	r3, [r3, #0]
 800da2c:	091b      	lsrs	r3, r3, #4
 800da2e:	b2db      	uxtb	r3, r3
 800da30:	2b04      	cmp	r3, #4
 800da32:	d004      	beq.n	800da3e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800da34:	6878      	ldr	r0, [r7, #4]
 800da36:	f7f8 fb9b 	bl	8006170 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800da3a:	2300      	movs	r3, #0
 800da3c:	e107      	b.n	800dc4e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800da3e:	697b      	ldr	r3, [r7, #20]
 800da40:	781b      	ldrb	r3, [r3, #0]
 800da42:	f003 030f 	and.w	r3, r3, #15
 800da46:	b2db      	uxtb	r3, r3
 800da48:	009b      	lsls	r3, r3, #2
 800da4a:	b2db      	uxtb	r3, r3
 800da4c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800da4e:	697b      	ldr	r3, [r7, #20]
 800da50:	885b      	ldrh	r3, [r3, #2]
 800da52:	b29b      	uxth	r3, r3
 800da54:	4618      	mov	r0, r3
 800da56:	f7f7 f82d 	bl	8004ab4 <lwip_htons>
 800da5a:	4603      	mov	r3, r0
 800da5c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	891b      	ldrh	r3, [r3, #8]
 800da62:	89ba      	ldrh	r2, [r7, #12]
 800da64:	429a      	cmp	r2, r3
 800da66:	d204      	bcs.n	800da72 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800da68:	89bb      	ldrh	r3, [r7, #12]
 800da6a:	4619      	mov	r1, r3
 800da6c:	6878      	ldr	r0, [r7, #4]
 800da6e:	f7f8 f9f9 	bl	8005e64 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	895b      	ldrh	r3, [r3, #10]
 800da76:	89fa      	ldrh	r2, [r7, #14]
 800da78:	429a      	cmp	r2, r3
 800da7a:	d807      	bhi.n	800da8c <ip4_input+0x74>
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	891b      	ldrh	r3, [r3, #8]
 800da80:	89ba      	ldrh	r2, [r7, #12]
 800da82:	429a      	cmp	r2, r3
 800da84:	d802      	bhi.n	800da8c <ip4_input+0x74>
 800da86:	89fb      	ldrh	r3, [r7, #14]
 800da88:	2b13      	cmp	r3, #19
 800da8a:	d804      	bhi.n	800da96 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800da8c:	6878      	ldr	r0, [r7, #4]
 800da8e:	f7f8 fb6f 	bl	8006170 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800da92:	2300      	movs	r3, #0
 800da94:	e0db      	b.n	800dc4e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800da96:	697b      	ldr	r3, [r7, #20]
 800da98:	691b      	ldr	r3, [r3, #16]
 800da9a:	4a6f      	ldr	r2, [pc, #444]	; (800dc58 <ip4_input+0x240>)
 800da9c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800da9e:	697b      	ldr	r3, [r7, #20]
 800daa0:	68db      	ldr	r3, [r3, #12]
 800daa2:	4a6d      	ldr	r2, [pc, #436]	; (800dc58 <ip4_input+0x240>)
 800daa4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800daa6:	4b6c      	ldr	r3, [pc, #432]	; (800dc58 <ip4_input+0x240>)
 800daa8:	695b      	ldr	r3, [r3, #20]
 800daaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800daae:	2be0      	cmp	r3, #224	; 0xe0
 800dab0:	d112      	bne.n	800dad8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dab8:	f003 0301 	and.w	r3, r3, #1
 800dabc:	b2db      	uxtb	r3, r3
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d007      	beq.n	800dad2 <ip4_input+0xba>
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	3304      	adds	r3, #4
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d002      	beq.n	800dad2 <ip4_input+0xba>
      netif = inp;
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	613b      	str	r3, [r7, #16]
 800dad0:	e02a      	b.n	800db28 <ip4_input+0x110>
    } else {
      netif = NULL;
 800dad2:	2300      	movs	r3, #0
 800dad4:	613b      	str	r3, [r7, #16]
 800dad6:	e027      	b.n	800db28 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800dad8:	6838      	ldr	r0, [r7, #0]
 800dada:	f7ff ff73 	bl	800d9c4 <ip4_input_accept>
 800dade:	4603      	mov	r3, r0
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d002      	beq.n	800daea <ip4_input+0xd2>
      netif = inp;
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	613b      	str	r3, [r7, #16]
 800dae8:	e01e      	b.n	800db28 <ip4_input+0x110>
    } else {
      netif = NULL;
 800daea:	2300      	movs	r3, #0
 800daec:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800daee:	4b5a      	ldr	r3, [pc, #360]	; (800dc58 <ip4_input+0x240>)
 800daf0:	695b      	ldr	r3, [r3, #20]
 800daf2:	b2db      	uxtb	r3, r3
 800daf4:	2b7f      	cmp	r3, #127	; 0x7f
 800daf6:	d017      	beq.n	800db28 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800daf8:	4b58      	ldr	r3, [pc, #352]	; (800dc5c <ip4_input+0x244>)
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	613b      	str	r3, [r7, #16]
 800dafe:	e00e      	b.n	800db1e <ip4_input+0x106>
          if (netif == inp) {
 800db00:	693a      	ldr	r2, [r7, #16]
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	429a      	cmp	r2, r3
 800db06:	d006      	beq.n	800db16 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800db08:	6938      	ldr	r0, [r7, #16]
 800db0a:	f7ff ff5b 	bl	800d9c4 <ip4_input_accept>
 800db0e:	4603      	mov	r3, r0
 800db10:	2b00      	cmp	r3, #0
 800db12:	d108      	bne.n	800db26 <ip4_input+0x10e>
 800db14:	e000      	b.n	800db18 <ip4_input+0x100>
            continue;
 800db16:	bf00      	nop
        NETIF_FOREACH(netif) {
 800db18:	693b      	ldr	r3, [r7, #16]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	613b      	str	r3, [r7, #16]
 800db1e:	693b      	ldr	r3, [r7, #16]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d1ed      	bne.n	800db00 <ip4_input+0xe8>
 800db24:	e000      	b.n	800db28 <ip4_input+0x110>
            break;
 800db26:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800db28:	4b4b      	ldr	r3, [pc, #300]	; (800dc58 <ip4_input+0x240>)
 800db2a:	691b      	ldr	r3, [r3, #16]
 800db2c:	6839      	ldr	r1, [r7, #0]
 800db2e:	4618      	mov	r0, r3
 800db30:	f000 f96e 	bl	800de10 <ip4_addr_isbroadcast_u32>
 800db34:	4603      	mov	r3, r0
 800db36:	2b00      	cmp	r3, #0
 800db38:	d105      	bne.n	800db46 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800db3a:	4b47      	ldr	r3, [pc, #284]	; (800dc58 <ip4_input+0x240>)
 800db3c:	691b      	ldr	r3, [r3, #16]
 800db3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800db42:	2be0      	cmp	r3, #224	; 0xe0
 800db44:	d104      	bne.n	800db50 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800db46:	6878      	ldr	r0, [r7, #4]
 800db48:	f7f8 fb12 	bl	8006170 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800db4c:	2300      	movs	r3, #0
 800db4e:	e07e      	b.n	800dc4e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800db50:	693b      	ldr	r3, [r7, #16]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d104      	bne.n	800db60 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f7f8 fb0a 	bl	8006170 <pbuf_free>
    return ERR_OK;
 800db5c:	2300      	movs	r3, #0
 800db5e:	e076      	b.n	800dc4e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800db60:	697b      	ldr	r3, [r7, #20]
 800db62:	88db      	ldrh	r3, [r3, #6]
 800db64:	b29b      	uxth	r3, r3
 800db66:	461a      	mov	r2, r3
 800db68:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800db6c:	4013      	ands	r3, r2
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d00b      	beq.n	800db8a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800db72:	6878      	ldr	r0, [r7, #4]
 800db74:	f000 fc92 	bl	800e49c <ip4_reass>
 800db78:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d101      	bne.n	800db84 <ip4_input+0x16c>
      return ERR_OK;
 800db80:	2300      	movs	r3, #0
 800db82:	e064      	b.n	800dc4e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	685b      	ldr	r3, [r3, #4]
 800db88:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800db8a:	4a33      	ldr	r2, [pc, #204]	; (800dc58 <ip4_input+0x240>)
 800db8c:	693b      	ldr	r3, [r7, #16]
 800db8e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800db90:	4a31      	ldr	r2, [pc, #196]	; (800dc58 <ip4_input+0x240>)
 800db92:	683b      	ldr	r3, [r7, #0]
 800db94:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800db96:	4a30      	ldr	r2, [pc, #192]	; (800dc58 <ip4_input+0x240>)
 800db98:	697b      	ldr	r3, [r7, #20]
 800db9a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800db9c:	697b      	ldr	r3, [r7, #20]
 800db9e:	781b      	ldrb	r3, [r3, #0]
 800dba0:	f003 030f 	and.w	r3, r3, #15
 800dba4:	b2db      	uxtb	r3, r3
 800dba6:	009b      	lsls	r3, r3, #2
 800dba8:	b2db      	uxtb	r3, r3
 800dbaa:	b29a      	uxth	r2, r3
 800dbac:	4b2a      	ldr	r3, [pc, #168]	; (800dc58 <ip4_input+0x240>)
 800dbae:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800dbb0:	89fb      	ldrh	r3, [r7, #14]
 800dbb2:	4619      	mov	r1, r3
 800dbb4:	6878      	ldr	r0, [r7, #4]
 800dbb6:	f7f8 fa55 	bl	8006064 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800dbba:	697b      	ldr	r3, [r7, #20]
 800dbbc:	7a5b      	ldrb	r3, [r3, #9]
 800dbbe:	2b11      	cmp	r3, #17
 800dbc0:	d006      	beq.n	800dbd0 <ip4_input+0x1b8>
 800dbc2:	2b11      	cmp	r3, #17
 800dbc4:	dc13      	bgt.n	800dbee <ip4_input+0x1d6>
 800dbc6:	2b01      	cmp	r3, #1
 800dbc8:	d00c      	beq.n	800dbe4 <ip4_input+0x1cc>
 800dbca:	2b06      	cmp	r3, #6
 800dbcc:	d005      	beq.n	800dbda <ip4_input+0x1c2>
 800dbce:	e00e      	b.n	800dbee <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800dbd0:	6839      	ldr	r1, [r7, #0]
 800dbd2:	6878      	ldr	r0, [r7, #4]
 800dbd4:	f7fe f950 	bl	800be78 <udp_input>
        break;
 800dbd8:	e026      	b.n	800dc28 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800dbda:	6839      	ldr	r1, [r7, #0]
 800dbdc:	6878      	ldr	r0, [r7, #4]
 800dbde:	f7fa f991 	bl	8007f04 <tcp_input>
        break;
 800dbe2:	e021      	b.n	800dc28 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800dbe4:	6839      	ldr	r1, [r7, #0]
 800dbe6:	6878      	ldr	r0, [r7, #4]
 800dbe8:	f7ff fcee 	bl	800d5c8 <icmp_input>
        break;
 800dbec:	e01c      	b.n	800dc28 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800dbee:	4b1a      	ldr	r3, [pc, #104]	; (800dc58 <ip4_input+0x240>)
 800dbf0:	695b      	ldr	r3, [r3, #20]
 800dbf2:	6939      	ldr	r1, [r7, #16]
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	f000 f90b 	bl	800de10 <ip4_addr_isbroadcast_u32>
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d10f      	bne.n	800dc20 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800dc00:	4b15      	ldr	r3, [pc, #84]	; (800dc58 <ip4_input+0x240>)
 800dc02:	695b      	ldr	r3, [r3, #20]
 800dc04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800dc08:	2be0      	cmp	r3, #224	; 0xe0
 800dc0a:	d009      	beq.n	800dc20 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800dc0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dc10:	4619      	mov	r1, r3
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f7f8 fa99 	bl	800614a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800dc18:	2102      	movs	r1, #2
 800dc1a:	6878      	ldr	r0, [r7, #4]
 800dc1c:	f7ff fdd8 	bl	800d7d0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800dc20:	6878      	ldr	r0, [r7, #4]
 800dc22:	f7f8 faa5 	bl	8006170 <pbuf_free>
        break;
 800dc26:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800dc28:	4b0b      	ldr	r3, [pc, #44]	; (800dc58 <ip4_input+0x240>)
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800dc2e:	4b0a      	ldr	r3, [pc, #40]	; (800dc58 <ip4_input+0x240>)
 800dc30:	2200      	movs	r2, #0
 800dc32:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800dc34:	4b08      	ldr	r3, [pc, #32]	; (800dc58 <ip4_input+0x240>)
 800dc36:	2200      	movs	r2, #0
 800dc38:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800dc3a:	4b07      	ldr	r3, [pc, #28]	; (800dc58 <ip4_input+0x240>)
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800dc40:	4b05      	ldr	r3, [pc, #20]	; (800dc58 <ip4_input+0x240>)
 800dc42:	2200      	movs	r2, #0
 800dc44:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800dc46:	4b04      	ldr	r3, [pc, #16]	; (800dc58 <ip4_input+0x240>)
 800dc48:	2200      	movs	r2, #0
 800dc4a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800dc4c:	2300      	movs	r3, #0
}
 800dc4e:	4618      	mov	r0, r3
 800dc50:	3718      	adds	r7, #24
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bd80      	pop	{r7, pc}
 800dc56:	bf00      	nop
 800dc58:	20004d84 	.word	0x20004d84
 800dc5c:	2000a4a8 	.word	0x2000a4a8

0800dc60 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b08a      	sub	sp, #40	; 0x28
 800dc64:	af04      	add	r7, sp, #16
 800dc66:	60f8      	str	r0, [r7, #12]
 800dc68:	60b9      	str	r1, [r7, #8]
 800dc6a:	607a      	str	r2, [r7, #4]
 800dc6c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800dc6e:	68bb      	ldr	r3, [r7, #8]
 800dc70:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d009      	beq.n	800dc8c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800dc78:	68bb      	ldr	r3, [r7, #8]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d003      	beq.n	800dc86 <ip4_output_if+0x26>
 800dc7e:	68bb      	ldr	r3, [r7, #8]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d102      	bne.n	800dc8c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800dc86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc88:	3304      	adds	r3, #4
 800dc8a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800dc8c:	78fa      	ldrb	r2, [r7, #3]
 800dc8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc90:	9302      	str	r3, [sp, #8]
 800dc92:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800dc96:	9301      	str	r3, [sp, #4]
 800dc98:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dc9c:	9300      	str	r3, [sp, #0]
 800dc9e:	4613      	mov	r3, r2
 800dca0:	687a      	ldr	r2, [r7, #4]
 800dca2:	6979      	ldr	r1, [r7, #20]
 800dca4:	68f8      	ldr	r0, [r7, #12]
 800dca6:	f000 f805 	bl	800dcb4 <ip4_output_if_src>
 800dcaa:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800dcac:	4618      	mov	r0, r3
 800dcae:	3718      	adds	r7, #24
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	bd80      	pop	{r7, pc}

0800dcb4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b088      	sub	sp, #32
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	60f8      	str	r0, [r7, #12]
 800dcbc:	60b9      	str	r1, [r7, #8]
 800dcbe:	607a      	str	r2, [r7, #4]
 800dcc0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	7b9b      	ldrb	r3, [r3, #14]
 800dcc6:	2b01      	cmp	r3, #1
 800dcc8:	d006      	beq.n	800dcd8 <ip4_output_if_src+0x24>
 800dcca:	4b4b      	ldr	r3, [pc, #300]	; (800ddf8 <ip4_output_if_src+0x144>)
 800dccc:	f44f 7255 	mov.w	r2, #852	; 0x354
 800dcd0:	494a      	ldr	r1, [pc, #296]	; (800ddfc <ip4_output_if_src+0x148>)
 800dcd2:	484b      	ldr	r0, [pc, #300]	; (800de00 <ip4_output_if_src+0x14c>)
 800dcd4:	f001 f8f2 	bl	800eebc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d060      	beq.n	800dda0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800dcde:	2314      	movs	r3, #20
 800dce0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800dce2:	2114      	movs	r1, #20
 800dce4:	68f8      	ldr	r0, [r7, #12]
 800dce6:	f7f8 f9ad 	bl	8006044 <pbuf_add_header>
 800dcea:	4603      	mov	r3, r0
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d002      	beq.n	800dcf6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800dcf0:	f06f 0301 	mvn.w	r3, #1
 800dcf4:	e07c      	b.n	800ddf0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	685b      	ldr	r3, [r3, #4]
 800dcfa:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	895b      	ldrh	r3, [r3, #10]
 800dd00:	2b13      	cmp	r3, #19
 800dd02:	d806      	bhi.n	800dd12 <ip4_output_if_src+0x5e>
 800dd04:	4b3c      	ldr	r3, [pc, #240]	; (800ddf8 <ip4_output_if_src+0x144>)
 800dd06:	f44f 7262 	mov.w	r2, #904	; 0x388
 800dd0a:	493e      	ldr	r1, [pc, #248]	; (800de04 <ip4_output_if_src+0x150>)
 800dd0c:	483c      	ldr	r0, [pc, #240]	; (800de00 <ip4_output_if_src+0x14c>)
 800dd0e:	f001 f8d5 	bl	800eebc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800dd12:	69fb      	ldr	r3, [r7, #28]
 800dd14:	78fa      	ldrb	r2, [r7, #3]
 800dd16:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800dd18:	69fb      	ldr	r3, [r7, #28]
 800dd1a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800dd1e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681a      	ldr	r2, [r3, #0]
 800dd24:	69fb      	ldr	r3, [r7, #28]
 800dd26:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800dd28:	8b7b      	ldrh	r3, [r7, #26]
 800dd2a:	089b      	lsrs	r3, r3, #2
 800dd2c:	b29b      	uxth	r3, r3
 800dd2e:	b2db      	uxtb	r3, r3
 800dd30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd34:	b2da      	uxtb	r2, r3
 800dd36:	69fb      	ldr	r3, [r7, #28]
 800dd38:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800dd3a:	69fb      	ldr	r3, [r7, #28]
 800dd3c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800dd40:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	891b      	ldrh	r3, [r3, #8]
 800dd46:	4618      	mov	r0, r3
 800dd48:	f7f6 feb4 	bl	8004ab4 <lwip_htons>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	461a      	mov	r2, r3
 800dd50:	69fb      	ldr	r3, [r7, #28]
 800dd52:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800dd54:	69fb      	ldr	r3, [r7, #28]
 800dd56:	2200      	movs	r2, #0
 800dd58:	719a      	strb	r2, [r3, #6]
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800dd5e:	4b2a      	ldr	r3, [pc, #168]	; (800de08 <ip4_output_if_src+0x154>)
 800dd60:	881b      	ldrh	r3, [r3, #0]
 800dd62:	4618      	mov	r0, r3
 800dd64:	f7f6 fea6 	bl	8004ab4 <lwip_htons>
 800dd68:	4603      	mov	r3, r0
 800dd6a:	461a      	mov	r2, r3
 800dd6c:	69fb      	ldr	r3, [r7, #28]
 800dd6e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800dd70:	4b25      	ldr	r3, [pc, #148]	; (800de08 <ip4_output_if_src+0x154>)
 800dd72:	881b      	ldrh	r3, [r3, #0]
 800dd74:	3301      	adds	r3, #1
 800dd76:	b29a      	uxth	r2, r3
 800dd78:	4b23      	ldr	r3, [pc, #140]	; (800de08 <ip4_output_if_src+0x154>)
 800dd7a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800dd7c:	68bb      	ldr	r3, [r7, #8]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d104      	bne.n	800dd8c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800dd82:	4b22      	ldr	r3, [pc, #136]	; (800de0c <ip4_output_if_src+0x158>)
 800dd84:	681a      	ldr	r2, [r3, #0]
 800dd86:	69fb      	ldr	r3, [r7, #28]
 800dd88:	60da      	str	r2, [r3, #12]
 800dd8a:	e003      	b.n	800dd94 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800dd8c:	68bb      	ldr	r3, [r7, #8]
 800dd8e:	681a      	ldr	r2, [r3, #0]
 800dd90:	69fb      	ldr	r3, [r7, #28]
 800dd92:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800dd94:	69fb      	ldr	r3, [r7, #28]
 800dd96:	2200      	movs	r2, #0
 800dd98:	729a      	strb	r2, [r3, #10]
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	72da      	strb	r2, [r3, #11]
 800dd9e:	e00f      	b.n	800ddc0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	895b      	ldrh	r3, [r3, #10]
 800dda4:	2b13      	cmp	r3, #19
 800dda6:	d802      	bhi.n	800ddae <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800dda8:	f06f 0301 	mvn.w	r3, #1
 800ddac:	e020      	b.n	800ddf0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	685b      	ldr	r3, [r3, #4]
 800ddb2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800ddb4:	69fb      	ldr	r3, [r7, #28]
 800ddb6:	691b      	ldr	r3, [r3, #16]
 800ddb8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800ddba:	f107 0314 	add.w	r3, r7, #20
 800ddbe:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800ddc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddc2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d00c      	beq.n	800dde2 <ip4_output_if_src+0x12e>
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	891a      	ldrh	r2, [r3, #8]
 800ddcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ddd0:	429a      	cmp	r2, r3
 800ddd2:	d906      	bls.n	800dde2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800ddd4:	687a      	ldr	r2, [r7, #4]
 800ddd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ddd8:	68f8      	ldr	r0, [r7, #12]
 800ddda:	f000 fd53 	bl	800e884 <ip4_frag>
 800ddde:	4603      	mov	r3, r0
 800dde0:	e006      	b.n	800ddf0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800dde2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dde4:	695b      	ldr	r3, [r3, #20]
 800dde6:	687a      	ldr	r2, [r7, #4]
 800dde8:	68f9      	ldr	r1, [r7, #12]
 800ddea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ddec:	4798      	blx	r3
 800ddee:	4603      	mov	r3, r0
}
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	3720      	adds	r7, #32
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	bd80      	pop	{r7, pc}
 800ddf8:	08012758 	.word	0x08012758
 800ddfc:	0801278c 	.word	0x0801278c
 800de00:	08012798 	.word	0x08012798
 800de04:	080127c0 	.word	0x080127c0
 800de08:	2000a606 	.word	0x2000a606
 800de0c:	08012b98 	.word	0x08012b98

0800de10 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800de10:	b480      	push	{r7}
 800de12:	b085      	sub	sp, #20
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
 800de18:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de24:	d002      	beq.n	800de2c <ip4_addr_isbroadcast_u32+0x1c>
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d101      	bne.n	800de30 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800de2c:	2301      	movs	r3, #1
 800de2e:	e02a      	b.n	800de86 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800de30:	683b      	ldr	r3, [r7, #0]
 800de32:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800de36:	f003 0302 	and.w	r3, r3, #2
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d101      	bne.n	800de42 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800de3e:	2300      	movs	r3, #0
 800de40:	e021      	b.n	800de86 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800de42:	683b      	ldr	r3, [r7, #0]
 800de44:	3304      	adds	r3, #4
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	687a      	ldr	r2, [r7, #4]
 800de4a:	429a      	cmp	r2, r3
 800de4c:	d101      	bne.n	800de52 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800de4e:	2300      	movs	r3, #0
 800de50:	e019      	b.n	800de86 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800de52:	68fa      	ldr	r2, [r7, #12]
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	3304      	adds	r3, #4
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	405a      	eors	r2, r3
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	3308      	adds	r3, #8
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	4013      	ands	r3, r2
 800de64:	2b00      	cmp	r3, #0
 800de66:	d10d      	bne.n	800de84 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800de68:	683b      	ldr	r3, [r7, #0]
 800de6a:	3308      	adds	r3, #8
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	43da      	mvns	r2, r3
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800de74:	683b      	ldr	r3, [r7, #0]
 800de76:	3308      	adds	r3, #8
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800de7c:	429a      	cmp	r2, r3
 800de7e:	d101      	bne.n	800de84 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800de80:	2301      	movs	r3, #1
 800de82:	e000      	b.n	800de86 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800de84:	2300      	movs	r3, #0
  }
}
 800de86:	4618      	mov	r0, r3
 800de88:	3714      	adds	r7, #20
 800de8a:	46bd      	mov	sp, r7
 800de8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de90:	4770      	bx	lr
	...

0800de94 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b084      	sub	sp, #16
 800de98:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800de9a:	2300      	movs	r3, #0
 800de9c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800de9e:	4b12      	ldr	r3, [pc, #72]	; (800dee8 <ip_reass_tmr+0x54>)
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800dea4:	e018      	b.n	800ded8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	7fdb      	ldrb	r3, [r3, #31]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d00b      	beq.n	800dec6 <ip_reass_tmr+0x32>
      r->timer--;
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	7fdb      	ldrb	r3, [r3, #31]
 800deb2:	3b01      	subs	r3, #1
 800deb4:	b2da      	uxtb	r2, r3
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	60fb      	str	r3, [r7, #12]
 800dec4:	e008      	b.n	800ded8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800ded0:	68b9      	ldr	r1, [r7, #8]
 800ded2:	6878      	ldr	r0, [r7, #4]
 800ded4:	f000 f80a 	bl	800deec <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d1e3      	bne.n	800dea6 <ip_reass_tmr+0x12>
    }
  }
}
 800dede:	bf00      	nop
 800dee0:	bf00      	nop
 800dee2:	3710      	adds	r7, #16
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}
 800dee8:	2000a608 	.word	0x2000a608

0800deec <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b088      	sub	sp, #32
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
 800def4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800def6:	2300      	movs	r3, #0
 800def8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800defa:	683a      	ldr	r2, [r7, #0]
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	429a      	cmp	r2, r3
 800df00:	d105      	bne.n	800df0e <ip_reass_free_complete_datagram+0x22>
 800df02:	4b45      	ldr	r3, [pc, #276]	; (800e018 <ip_reass_free_complete_datagram+0x12c>)
 800df04:	22ab      	movs	r2, #171	; 0xab
 800df06:	4945      	ldr	r1, [pc, #276]	; (800e01c <ip_reass_free_complete_datagram+0x130>)
 800df08:	4845      	ldr	r0, [pc, #276]	; (800e020 <ip_reass_free_complete_datagram+0x134>)
 800df0a:	f000 ffd7 	bl	800eebc <iprintf>
  if (prev != NULL) {
 800df0e:	683b      	ldr	r3, [r7, #0]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d00a      	beq.n	800df2a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	687a      	ldr	r2, [r7, #4]
 800df1a:	429a      	cmp	r2, r3
 800df1c:	d005      	beq.n	800df2a <ip_reass_free_complete_datagram+0x3e>
 800df1e:	4b3e      	ldr	r3, [pc, #248]	; (800e018 <ip_reass_free_complete_datagram+0x12c>)
 800df20:	22ad      	movs	r2, #173	; 0xad
 800df22:	4940      	ldr	r1, [pc, #256]	; (800e024 <ip_reass_free_complete_datagram+0x138>)
 800df24:	483e      	ldr	r0, [pc, #248]	; (800e020 <ip_reass_free_complete_datagram+0x134>)
 800df26:	f000 ffc9 	bl	800eebc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	685b      	ldr	r3, [r3, #4]
 800df2e:	685b      	ldr	r3, [r3, #4]
 800df30:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800df32:	697b      	ldr	r3, [r7, #20]
 800df34:	889b      	ldrh	r3, [r3, #4]
 800df36:	b29b      	uxth	r3, r3
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d12a      	bne.n	800df92 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	685b      	ldr	r3, [r3, #4]
 800df40:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800df42:	697b      	ldr	r3, [r7, #20]
 800df44:	681a      	ldr	r2, [r3, #0]
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800df4a:	69bb      	ldr	r3, [r7, #24]
 800df4c:	6858      	ldr	r0, [r3, #4]
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	3308      	adds	r3, #8
 800df52:	2214      	movs	r2, #20
 800df54:	4619      	mov	r1, r3
 800df56:	f001 f8d8 	bl	800f10a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800df5a:	2101      	movs	r1, #1
 800df5c:	69b8      	ldr	r0, [r7, #24]
 800df5e:	f7ff fc47 	bl	800d7f0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800df62:	69b8      	ldr	r0, [r7, #24]
 800df64:	f7f8 f98c 	bl	8006280 <pbuf_clen>
 800df68:	4603      	mov	r3, r0
 800df6a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800df6c:	8bfa      	ldrh	r2, [r7, #30]
 800df6e:	8a7b      	ldrh	r3, [r7, #18]
 800df70:	4413      	add	r3, r2
 800df72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df76:	db05      	blt.n	800df84 <ip_reass_free_complete_datagram+0x98>
 800df78:	4b27      	ldr	r3, [pc, #156]	; (800e018 <ip_reass_free_complete_datagram+0x12c>)
 800df7a:	22bc      	movs	r2, #188	; 0xbc
 800df7c:	492a      	ldr	r1, [pc, #168]	; (800e028 <ip_reass_free_complete_datagram+0x13c>)
 800df7e:	4828      	ldr	r0, [pc, #160]	; (800e020 <ip_reass_free_complete_datagram+0x134>)
 800df80:	f000 ff9c 	bl	800eebc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800df84:	8bfa      	ldrh	r2, [r7, #30]
 800df86:	8a7b      	ldrh	r3, [r7, #18]
 800df88:	4413      	add	r3, r2
 800df8a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800df8c:	69b8      	ldr	r0, [r7, #24]
 800df8e:	f7f8 f8ef 	bl	8006170 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	685b      	ldr	r3, [r3, #4]
 800df96:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800df98:	e01f      	b.n	800dfda <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800df9a:	69bb      	ldr	r3, [r7, #24]
 800df9c:	685b      	ldr	r3, [r3, #4]
 800df9e:	617b      	str	r3, [r7, #20]
    pcur = p;
 800dfa0:	69bb      	ldr	r3, [r7, #24]
 800dfa2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800dfa4:	697b      	ldr	r3, [r7, #20]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800dfaa:	68f8      	ldr	r0, [r7, #12]
 800dfac:	f7f8 f968 	bl	8006280 <pbuf_clen>
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800dfb4:	8bfa      	ldrh	r2, [r7, #30]
 800dfb6:	8a7b      	ldrh	r3, [r7, #18]
 800dfb8:	4413      	add	r3, r2
 800dfba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dfbe:	db05      	blt.n	800dfcc <ip_reass_free_complete_datagram+0xe0>
 800dfc0:	4b15      	ldr	r3, [pc, #84]	; (800e018 <ip_reass_free_complete_datagram+0x12c>)
 800dfc2:	22cc      	movs	r2, #204	; 0xcc
 800dfc4:	4918      	ldr	r1, [pc, #96]	; (800e028 <ip_reass_free_complete_datagram+0x13c>)
 800dfc6:	4816      	ldr	r0, [pc, #88]	; (800e020 <ip_reass_free_complete_datagram+0x134>)
 800dfc8:	f000 ff78 	bl	800eebc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800dfcc:	8bfa      	ldrh	r2, [r7, #30]
 800dfce:	8a7b      	ldrh	r3, [r7, #18]
 800dfd0:	4413      	add	r3, r2
 800dfd2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800dfd4:	68f8      	ldr	r0, [r7, #12]
 800dfd6:	f7f8 f8cb 	bl	8006170 <pbuf_free>
  while (p != NULL) {
 800dfda:	69bb      	ldr	r3, [r7, #24]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d1dc      	bne.n	800df9a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800dfe0:	6839      	ldr	r1, [r7, #0]
 800dfe2:	6878      	ldr	r0, [r7, #4]
 800dfe4:	f000 f8c2 	bl	800e16c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800dfe8:	4b10      	ldr	r3, [pc, #64]	; (800e02c <ip_reass_free_complete_datagram+0x140>)
 800dfea:	881b      	ldrh	r3, [r3, #0]
 800dfec:	8bfa      	ldrh	r2, [r7, #30]
 800dfee:	429a      	cmp	r2, r3
 800dff0:	d905      	bls.n	800dffe <ip_reass_free_complete_datagram+0x112>
 800dff2:	4b09      	ldr	r3, [pc, #36]	; (800e018 <ip_reass_free_complete_datagram+0x12c>)
 800dff4:	22d2      	movs	r2, #210	; 0xd2
 800dff6:	490e      	ldr	r1, [pc, #56]	; (800e030 <ip_reass_free_complete_datagram+0x144>)
 800dff8:	4809      	ldr	r0, [pc, #36]	; (800e020 <ip_reass_free_complete_datagram+0x134>)
 800dffa:	f000 ff5f 	bl	800eebc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800dffe:	4b0b      	ldr	r3, [pc, #44]	; (800e02c <ip_reass_free_complete_datagram+0x140>)
 800e000:	881a      	ldrh	r2, [r3, #0]
 800e002:	8bfb      	ldrh	r3, [r7, #30]
 800e004:	1ad3      	subs	r3, r2, r3
 800e006:	b29a      	uxth	r2, r3
 800e008:	4b08      	ldr	r3, [pc, #32]	; (800e02c <ip_reass_free_complete_datagram+0x140>)
 800e00a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800e00c:	8bfb      	ldrh	r3, [r7, #30]
}
 800e00e:	4618      	mov	r0, r3
 800e010:	3720      	adds	r7, #32
 800e012:	46bd      	mov	sp, r7
 800e014:	bd80      	pop	{r7, pc}
 800e016:	bf00      	nop
 800e018:	080127f0 	.word	0x080127f0
 800e01c:	0801282c 	.word	0x0801282c
 800e020:	08012838 	.word	0x08012838
 800e024:	08012860 	.word	0x08012860
 800e028:	08012874 	.word	0x08012874
 800e02c:	2000a60c 	.word	0x2000a60c
 800e030:	08012894 	.word	0x08012894

0800e034 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b08a      	sub	sp, #40	; 0x28
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
 800e03c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800e03e:	2300      	movs	r3, #0
 800e040:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800e042:	2300      	movs	r3, #0
 800e044:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800e046:	2300      	movs	r3, #0
 800e048:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800e04a:	2300      	movs	r3, #0
 800e04c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800e04e:	2300      	movs	r3, #0
 800e050:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800e052:	4b28      	ldr	r3, [pc, #160]	; (800e0f4 <ip_reass_remove_oldest_datagram+0xc0>)
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e058:	e030      	b.n	800e0bc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e05c:	695a      	ldr	r2, [r3, #20]
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	68db      	ldr	r3, [r3, #12]
 800e062:	429a      	cmp	r2, r3
 800e064:	d10c      	bne.n	800e080 <ip_reass_remove_oldest_datagram+0x4c>
 800e066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e068:	699a      	ldr	r2, [r3, #24]
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	691b      	ldr	r3, [r3, #16]
 800e06e:	429a      	cmp	r2, r3
 800e070:	d106      	bne.n	800e080 <ip_reass_remove_oldest_datagram+0x4c>
 800e072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e074:	899a      	ldrh	r2, [r3, #12]
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	889b      	ldrh	r3, [r3, #4]
 800e07a:	b29b      	uxth	r3, r3
 800e07c:	429a      	cmp	r2, r3
 800e07e:	d014      	beq.n	800e0aa <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800e080:	693b      	ldr	r3, [r7, #16]
 800e082:	3301      	adds	r3, #1
 800e084:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800e086:	6a3b      	ldr	r3, [r7, #32]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d104      	bne.n	800e096 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800e08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e08e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e090:	69fb      	ldr	r3, [r7, #28]
 800e092:	61bb      	str	r3, [r7, #24]
 800e094:	e009      	b.n	800e0aa <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800e096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e098:	7fda      	ldrb	r2, [r3, #31]
 800e09a:	6a3b      	ldr	r3, [r7, #32]
 800e09c:	7fdb      	ldrb	r3, [r3, #31]
 800e09e:	429a      	cmp	r2, r3
 800e0a0:	d803      	bhi.n	800e0aa <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800e0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0a4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e0a6:	69fb      	ldr	r3, [r7, #28]
 800e0a8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800e0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d001      	beq.n	800e0b6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800e0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0b4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800e0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d1cb      	bne.n	800e05a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800e0c2:	6a3b      	ldr	r3, [r7, #32]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d008      	beq.n	800e0da <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800e0c8:	69b9      	ldr	r1, [r7, #24]
 800e0ca:	6a38      	ldr	r0, [r7, #32]
 800e0cc:	f7ff ff0e 	bl	800deec <ip_reass_free_complete_datagram>
 800e0d0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800e0d2:	697a      	ldr	r2, [r7, #20]
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	4413      	add	r3, r2
 800e0d8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800e0da:	697a      	ldr	r2, [r7, #20]
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	429a      	cmp	r2, r3
 800e0e0:	da02      	bge.n	800e0e8 <ip_reass_remove_oldest_datagram+0xb4>
 800e0e2:	693b      	ldr	r3, [r7, #16]
 800e0e4:	2b01      	cmp	r3, #1
 800e0e6:	dcac      	bgt.n	800e042 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800e0e8:	697b      	ldr	r3, [r7, #20]
}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	3728      	adds	r7, #40	; 0x28
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}
 800e0f2:	bf00      	nop
 800e0f4:	2000a608 	.word	0x2000a608

0800e0f8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b084      	sub	sp, #16
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
 800e100:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e102:	2004      	movs	r0, #4
 800e104:	f7f7 f94e 	bl	80053a4 <memp_malloc>
 800e108:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d110      	bne.n	800e132 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800e110:	6839      	ldr	r1, [r7, #0]
 800e112:	6878      	ldr	r0, [r7, #4]
 800e114:	f7ff ff8e 	bl	800e034 <ip_reass_remove_oldest_datagram>
 800e118:	4602      	mov	r2, r0
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	4293      	cmp	r3, r2
 800e11e:	dc03      	bgt.n	800e128 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e120:	2004      	movs	r0, #4
 800e122:	f7f7 f93f 	bl	80053a4 <memp_malloc>
 800e126:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d101      	bne.n	800e132 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800e12e:	2300      	movs	r3, #0
 800e130:	e016      	b.n	800e160 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800e132:	2220      	movs	r2, #32
 800e134:	2100      	movs	r1, #0
 800e136:	68f8      	ldr	r0, [r7, #12]
 800e138:	f000 ff5f 	bl	800effa <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	220f      	movs	r2, #15
 800e140:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800e142:	4b09      	ldr	r3, [pc, #36]	; (800e168 <ip_reass_enqueue_new_datagram+0x70>)
 800e144:	681a      	ldr	r2, [r3, #0]
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800e14a:	4a07      	ldr	r2, [pc, #28]	; (800e168 <ip_reass_enqueue_new_datagram+0x70>)
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	3308      	adds	r3, #8
 800e154:	2214      	movs	r2, #20
 800e156:	6879      	ldr	r1, [r7, #4]
 800e158:	4618      	mov	r0, r3
 800e15a:	f000 ffd6 	bl	800f10a <memcpy>
  return ipr;
 800e15e:	68fb      	ldr	r3, [r7, #12]
}
 800e160:	4618      	mov	r0, r3
 800e162:	3710      	adds	r7, #16
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}
 800e168:	2000a608 	.word	0x2000a608

0800e16c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b082      	sub	sp, #8
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
 800e174:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800e176:	4b10      	ldr	r3, [pc, #64]	; (800e1b8 <ip_reass_dequeue_datagram+0x4c>)
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	687a      	ldr	r2, [r7, #4]
 800e17c:	429a      	cmp	r2, r3
 800e17e:	d104      	bne.n	800e18a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	4a0c      	ldr	r2, [pc, #48]	; (800e1b8 <ip_reass_dequeue_datagram+0x4c>)
 800e186:	6013      	str	r3, [r2, #0]
 800e188:	e00d      	b.n	800e1a6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e18a:	683b      	ldr	r3, [r7, #0]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d106      	bne.n	800e19e <ip_reass_dequeue_datagram+0x32>
 800e190:	4b0a      	ldr	r3, [pc, #40]	; (800e1bc <ip_reass_dequeue_datagram+0x50>)
 800e192:	f240 1245 	movw	r2, #325	; 0x145
 800e196:	490a      	ldr	r1, [pc, #40]	; (800e1c0 <ip_reass_dequeue_datagram+0x54>)
 800e198:	480a      	ldr	r0, [pc, #40]	; (800e1c4 <ip_reass_dequeue_datagram+0x58>)
 800e19a:	f000 fe8f 	bl	800eebc <iprintf>
    prev->next = ipr->next;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681a      	ldr	r2, [r3, #0]
 800e1a2:	683b      	ldr	r3, [r7, #0]
 800e1a4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e1a6:	6879      	ldr	r1, [r7, #4]
 800e1a8:	2004      	movs	r0, #4
 800e1aa:	f7f7 f96b 	bl	8005484 <memp_free>
}
 800e1ae:	bf00      	nop
 800e1b0:	3708      	adds	r7, #8
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	bd80      	pop	{r7, pc}
 800e1b6:	bf00      	nop
 800e1b8:	2000a608 	.word	0x2000a608
 800e1bc:	080127f0 	.word	0x080127f0
 800e1c0:	080128b8 	.word	0x080128b8
 800e1c4:	08012838 	.word	0x08012838

0800e1c8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b08c      	sub	sp, #48	; 0x30
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	60f8      	str	r0, [r7, #12]
 800e1d0:	60b9      	str	r1, [r7, #8]
 800e1d2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800e1d8:	2301      	movs	r3, #1
 800e1da:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800e1dc:	68bb      	ldr	r3, [r7, #8]
 800e1de:	685b      	ldr	r3, [r3, #4]
 800e1e0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e1e2:	69fb      	ldr	r3, [r7, #28]
 800e1e4:	885b      	ldrh	r3, [r3, #2]
 800e1e6:	b29b      	uxth	r3, r3
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	f7f6 fc63 	bl	8004ab4 <lwip_htons>
 800e1ee:	4603      	mov	r3, r0
 800e1f0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800e1f2:	69fb      	ldr	r3, [r7, #28]
 800e1f4:	781b      	ldrb	r3, [r3, #0]
 800e1f6:	f003 030f 	and.w	r3, r3, #15
 800e1fa:	b2db      	uxtb	r3, r3
 800e1fc:	009b      	lsls	r3, r3, #2
 800e1fe:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800e200:	7e7b      	ldrb	r3, [r7, #25]
 800e202:	b29b      	uxth	r3, r3
 800e204:	8b7a      	ldrh	r2, [r7, #26]
 800e206:	429a      	cmp	r2, r3
 800e208:	d202      	bcs.n	800e210 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e20a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e20e:	e135      	b.n	800e47c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800e210:	7e7b      	ldrb	r3, [r7, #25]
 800e212:	b29b      	uxth	r3, r3
 800e214:	8b7a      	ldrh	r2, [r7, #26]
 800e216:	1ad3      	subs	r3, r2, r3
 800e218:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e21a:	69fb      	ldr	r3, [r7, #28]
 800e21c:	88db      	ldrh	r3, [r3, #6]
 800e21e:	b29b      	uxth	r3, r3
 800e220:	4618      	mov	r0, r3
 800e222:	f7f6 fc47 	bl	8004ab4 <lwip_htons>
 800e226:	4603      	mov	r3, r0
 800e228:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e22c:	b29b      	uxth	r3, r3
 800e22e:	00db      	lsls	r3, r3, #3
 800e230:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800e232:	68bb      	ldr	r3, [r7, #8]
 800e234:	685b      	ldr	r3, [r3, #4]
 800e236:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800e238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e23a:	2200      	movs	r2, #0
 800e23c:	701a      	strb	r2, [r3, #0]
 800e23e:	2200      	movs	r2, #0
 800e240:	705a      	strb	r2, [r3, #1]
 800e242:	2200      	movs	r2, #0
 800e244:	709a      	strb	r2, [r3, #2]
 800e246:	2200      	movs	r2, #0
 800e248:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800e24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e24c:	8afa      	ldrh	r2, [r7, #22]
 800e24e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800e250:	8afa      	ldrh	r2, [r7, #22]
 800e252:	8b7b      	ldrh	r3, [r7, #26]
 800e254:	4413      	add	r3, r2
 800e256:	b29a      	uxth	r2, r3
 800e258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e25a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800e25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e25e:	88db      	ldrh	r3, [r3, #6]
 800e260:	b29b      	uxth	r3, r3
 800e262:	8afa      	ldrh	r2, [r7, #22]
 800e264:	429a      	cmp	r2, r3
 800e266:	d902      	bls.n	800e26e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e268:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e26c:	e106      	b.n	800e47c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	685b      	ldr	r3, [r3, #4]
 800e272:	627b      	str	r3, [r7, #36]	; 0x24
 800e274:	e068      	b.n	800e348 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800e276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e278:	685b      	ldr	r3, [r3, #4]
 800e27a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800e27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e27e:	889b      	ldrh	r3, [r3, #4]
 800e280:	b29a      	uxth	r2, r3
 800e282:	693b      	ldr	r3, [r7, #16]
 800e284:	889b      	ldrh	r3, [r3, #4]
 800e286:	b29b      	uxth	r3, r3
 800e288:	429a      	cmp	r2, r3
 800e28a:	d235      	bcs.n	800e2f8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800e28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e28e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e290:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800e292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e294:	2b00      	cmp	r3, #0
 800e296:	d020      	beq.n	800e2da <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e29a:	889b      	ldrh	r3, [r3, #4]
 800e29c:	b29a      	uxth	r2, r3
 800e29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2a0:	88db      	ldrh	r3, [r3, #6]
 800e2a2:	b29b      	uxth	r3, r3
 800e2a4:	429a      	cmp	r2, r3
 800e2a6:	d307      	bcc.n	800e2b8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800e2a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2aa:	88db      	ldrh	r3, [r3, #6]
 800e2ac:	b29a      	uxth	r2, r3
 800e2ae:	693b      	ldr	r3, [r7, #16]
 800e2b0:	889b      	ldrh	r3, [r3, #4]
 800e2b2:	b29b      	uxth	r3, r3
 800e2b4:	429a      	cmp	r2, r3
 800e2b6:	d902      	bls.n	800e2be <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e2b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e2bc:	e0de      	b.n	800e47c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800e2be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2c0:	68ba      	ldr	r2, [r7, #8]
 800e2c2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800e2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2c6:	88db      	ldrh	r3, [r3, #6]
 800e2c8:	b29a      	uxth	r2, r3
 800e2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2cc:	889b      	ldrh	r3, [r3, #4]
 800e2ce:	b29b      	uxth	r3, r3
 800e2d0:	429a      	cmp	r2, r3
 800e2d2:	d03d      	beq.n	800e350 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800e2d8:	e03a      	b.n	800e350 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800e2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2dc:	88db      	ldrh	r3, [r3, #6]
 800e2de:	b29a      	uxth	r2, r3
 800e2e0:	693b      	ldr	r3, [r7, #16]
 800e2e2:	889b      	ldrh	r3, [r3, #4]
 800e2e4:	b29b      	uxth	r3, r3
 800e2e6:	429a      	cmp	r2, r3
 800e2e8:	d902      	bls.n	800e2f0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e2ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e2ee:	e0c5      	b.n	800e47c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	68ba      	ldr	r2, [r7, #8]
 800e2f4:	605a      	str	r2, [r3, #4]
      break;
 800e2f6:	e02b      	b.n	800e350 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800e2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2fa:	889b      	ldrh	r3, [r3, #4]
 800e2fc:	b29a      	uxth	r2, r3
 800e2fe:	693b      	ldr	r3, [r7, #16]
 800e300:	889b      	ldrh	r3, [r3, #4]
 800e302:	b29b      	uxth	r3, r3
 800e304:	429a      	cmp	r2, r3
 800e306:	d102      	bne.n	800e30e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e308:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e30c:	e0b6      	b.n	800e47c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800e30e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e310:	889b      	ldrh	r3, [r3, #4]
 800e312:	b29a      	uxth	r2, r3
 800e314:	693b      	ldr	r3, [r7, #16]
 800e316:	88db      	ldrh	r3, [r3, #6]
 800e318:	b29b      	uxth	r3, r3
 800e31a:	429a      	cmp	r2, r3
 800e31c:	d202      	bcs.n	800e324 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e31e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e322:	e0ab      	b.n	800e47c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800e324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e326:	2b00      	cmp	r3, #0
 800e328:	d009      	beq.n	800e33e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800e32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e32c:	88db      	ldrh	r3, [r3, #6]
 800e32e:	b29a      	uxth	r2, r3
 800e330:	693b      	ldr	r3, [r7, #16]
 800e332:	889b      	ldrh	r3, [r3, #4]
 800e334:	b29b      	uxth	r3, r3
 800e336:	429a      	cmp	r2, r3
 800e338:	d001      	beq.n	800e33e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e33a:	2300      	movs	r3, #0
 800e33c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800e33e:	693b      	ldr	r3, [r7, #16]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800e344:	693b      	ldr	r3, [r7, #16]
 800e346:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800e348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d193      	bne.n	800e276 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800e34e:	e000      	b.n	800e352 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800e350:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800e352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e354:	2b00      	cmp	r3, #0
 800e356:	d12d      	bne.n	800e3b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800e358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d01c      	beq.n	800e398 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800e35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e360:	88db      	ldrh	r3, [r3, #6]
 800e362:	b29a      	uxth	r2, r3
 800e364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e366:	889b      	ldrh	r3, [r3, #4]
 800e368:	b29b      	uxth	r3, r3
 800e36a:	429a      	cmp	r2, r3
 800e36c:	d906      	bls.n	800e37c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800e36e:	4b45      	ldr	r3, [pc, #276]	; (800e484 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e370:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800e374:	4944      	ldr	r1, [pc, #272]	; (800e488 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e376:	4845      	ldr	r0, [pc, #276]	; (800e48c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e378:	f000 fda0 	bl	800eebc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800e37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e37e:	68ba      	ldr	r2, [r7, #8]
 800e380:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800e382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e384:	88db      	ldrh	r3, [r3, #6]
 800e386:	b29a      	uxth	r2, r3
 800e388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e38a:	889b      	ldrh	r3, [r3, #4]
 800e38c:	b29b      	uxth	r3, r3
 800e38e:	429a      	cmp	r2, r3
 800e390:	d010      	beq.n	800e3b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800e392:	2300      	movs	r3, #0
 800e394:	623b      	str	r3, [r7, #32]
 800e396:	e00d      	b.n	800e3b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	685b      	ldr	r3, [r3, #4]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d006      	beq.n	800e3ae <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800e3a0:	4b38      	ldr	r3, [pc, #224]	; (800e484 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e3a2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800e3a6:	493a      	ldr	r1, [pc, #232]	; (800e490 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800e3a8:	4838      	ldr	r0, [pc, #224]	; (800e48c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e3aa:	f000 fd87 	bl	800eebc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	68ba      	ldr	r2, [r7, #8]
 800e3b2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d105      	bne.n	800e3c6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	7f9b      	ldrb	r3, [r3, #30]
 800e3be:	f003 0301 	and.w	r3, r3, #1
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d059      	beq.n	800e47a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800e3c6:	6a3b      	ldr	r3, [r7, #32]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d04f      	beq.n	800e46c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	685b      	ldr	r3, [r3, #4]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d006      	beq.n	800e3e2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	685b      	ldr	r3, [r3, #4]
 800e3d8:	685b      	ldr	r3, [r3, #4]
 800e3da:	889b      	ldrh	r3, [r3, #4]
 800e3dc:	b29b      	uxth	r3, r3
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d002      	beq.n	800e3e8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	623b      	str	r3, [r7, #32]
 800e3e6:	e041      	b.n	800e46c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800e3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ea:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800e3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e3f2:	e012      	b.n	800e41a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800e3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3f6:	685b      	ldr	r3, [r3, #4]
 800e3f8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800e3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3fc:	88db      	ldrh	r3, [r3, #6]
 800e3fe:	b29a      	uxth	r2, r3
 800e400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e402:	889b      	ldrh	r3, [r3, #4]
 800e404:	b29b      	uxth	r3, r3
 800e406:	429a      	cmp	r2, r3
 800e408:	d002      	beq.n	800e410 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800e40a:	2300      	movs	r3, #0
 800e40c:	623b      	str	r3, [r7, #32]
            break;
 800e40e:	e007      	b.n	800e420 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800e410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e412:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800e414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d1e9      	bne.n	800e3f4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800e420:	6a3b      	ldr	r3, [r7, #32]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d022      	beq.n	800e46c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	685b      	ldr	r3, [r3, #4]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d106      	bne.n	800e43c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800e42e:	4b15      	ldr	r3, [pc, #84]	; (800e484 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e430:	f240 12df 	movw	r2, #479	; 0x1df
 800e434:	4917      	ldr	r1, [pc, #92]	; (800e494 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e436:	4815      	ldr	r0, [pc, #84]	; (800e48c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e438:	f000 fd40 	bl	800eebc <iprintf>
          LWIP_ASSERT("sanity check",
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	685b      	ldr	r3, [r3, #4]
 800e440:	685b      	ldr	r3, [r3, #4]
 800e442:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e444:	429a      	cmp	r2, r3
 800e446:	d106      	bne.n	800e456 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800e448:	4b0e      	ldr	r3, [pc, #56]	; (800e484 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e44a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e44e:	4911      	ldr	r1, [pc, #68]	; (800e494 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e450:	480e      	ldr	r0, [pc, #56]	; (800e48c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e452:	f000 fd33 	bl	800eebc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d006      	beq.n	800e46c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800e45e:	4b09      	ldr	r3, [pc, #36]	; (800e484 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e460:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800e464:	490c      	ldr	r1, [pc, #48]	; (800e498 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e466:	4809      	ldr	r0, [pc, #36]	; (800e48c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e468:	f000 fd28 	bl	800eebc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e46c:	6a3b      	ldr	r3, [r7, #32]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	bf14      	ite	ne
 800e472:	2301      	movne	r3, #1
 800e474:	2300      	moveq	r3, #0
 800e476:	b2db      	uxtb	r3, r3
 800e478:	e000      	b.n	800e47c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e47a:	2300      	movs	r3, #0
}
 800e47c:	4618      	mov	r0, r3
 800e47e:	3730      	adds	r7, #48	; 0x30
 800e480:	46bd      	mov	sp, r7
 800e482:	bd80      	pop	{r7, pc}
 800e484:	080127f0 	.word	0x080127f0
 800e488:	080128d4 	.word	0x080128d4
 800e48c:	08012838 	.word	0x08012838
 800e490:	080128f4 	.word	0x080128f4
 800e494:	0801292c 	.word	0x0801292c
 800e498:	0801293c 	.word	0x0801293c

0800e49c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b08e      	sub	sp, #56	; 0x38
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	685b      	ldr	r3, [r3, #4]
 800e4a8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800e4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ac:	781b      	ldrb	r3, [r3, #0]
 800e4ae:	f003 030f 	and.w	r3, r3, #15
 800e4b2:	b2db      	uxtb	r3, r3
 800e4b4:	009b      	lsls	r3, r3, #2
 800e4b6:	b2db      	uxtb	r3, r3
 800e4b8:	2b14      	cmp	r3, #20
 800e4ba:	f040 8171 	bne.w	800e7a0 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800e4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4c0:	88db      	ldrh	r3, [r3, #6]
 800e4c2:	b29b      	uxth	r3, r3
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	f7f6 faf5 	bl	8004ab4 <lwip_htons>
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e4d0:	b29b      	uxth	r3, r3
 800e4d2:	00db      	lsls	r3, r3, #3
 800e4d4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4d8:	885b      	ldrh	r3, [r3, #2]
 800e4da:	b29b      	uxth	r3, r3
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f7f6 fae9 	bl	8004ab4 <lwip_htons>
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800e4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4e8:	781b      	ldrb	r3, [r3, #0]
 800e4ea:	f003 030f 	and.w	r3, r3, #15
 800e4ee:	b2db      	uxtb	r3, r3
 800e4f0:	009b      	lsls	r3, r3, #2
 800e4f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800e4f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e4fa:	b29b      	uxth	r3, r3
 800e4fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e4fe:	429a      	cmp	r2, r3
 800e500:	f0c0 8150 	bcc.w	800e7a4 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800e504:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e508:	b29b      	uxth	r3, r3
 800e50a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e50c:	1ad3      	subs	r3, r2, r3
 800e50e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	f7f7 feb5 	bl	8006280 <pbuf_clen>
 800e516:	4603      	mov	r3, r0
 800e518:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e51a:	4b8c      	ldr	r3, [pc, #560]	; (800e74c <ip4_reass+0x2b0>)
 800e51c:	881b      	ldrh	r3, [r3, #0]
 800e51e:	461a      	mov	r2, r3
 800e520:	8c3b      	ldrh	r3, [r7, #32]
 800e522:	4413      	add	r3, r2
 800e524:	2b0a      	cmp	r3, #10
 800e526:	dd10      	ble.n	800e54a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e528:	8c3b      	ldrh	r3, [r7, #32]
 800e52a:	4619      	mov	r1, r3
 800e52c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e52e:	f7ff fd81 	bl	800e034 <ip_reass_remove_oldest_datagram>
 800e532:	4603      	mov	r3, r0
 800e534:	2b00      	cmp	r3, #0
 800e536:	f000 8137 	beq.w	800e7a8 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e53a:	4b84      	ldr	r3, [pc, #528]	; (800e74c <ip4_reass+0x2b0>)
 800e53c:	881b      	ldrh	r3, [r3, #0]
 800e53e:	461a      	mov	r2, r3
 800e540:	8c3b      	ldrh	r3, [r7, #32]
 800e542:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e544:	2b0a      	cmp	r3, #10
 800e546:	f300 812f 	bgt.w	800e7a8 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e54a:	4b81      	ldr	r3, [pc, #516]	; (800e750 <ip4_reass+0x2b4>)
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	633b      	str	r3, [r7, #48]	; 0x30
 800e550:	e015      	b.n	800e57e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e554:	695a      	ldr	r2, [r3, #20]
 800e556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e558:	68db      	ldr	r3, [r3, #12]
 800e55a:	429a      	cmp	r2, r3
 800e55c:	d10c      	bne.n	800e578 <ip4_reass+0xdc>
 800e55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e560:	699a      	ldr	r2, [r3, #24]
 800e562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e564:	691b      	ldr	r3, [r3, #16]
 800e566:	429a      	cmp	r2, r3
 800e568:	d106      	bne.n	800e578 <ip4_reass+0xdc>
 800e56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e56c:	899a      	ldrh	r2, [r3, #12]
 800e56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e570:	889b      	ldrh	r3, [r3, #4]
 800e572:	b29b      	uxth	r3, r3
 800e574:	429a      	cmp	r2, r3
 800e576:	d006      	beq.n	800e586 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	633b      	str	r3, [r7, #48]	; 0x30
 800e57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e580:	2b00      	cmp	r3, #0
 800e582:	d1e6      	bne.n	800e552 <ip4_reass+0xb6>
 800e584:	e000      	b.n	800e588 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800e586:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800e588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d109      	bne.n	800e5a2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800e58e:	8c3b      	ldrh	r3, [r7, #32]
 800e590:	4619      	mov	r1, r3
 800e592:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e594:	f7ff fdb0 	bl	800e0f8 <ip_reass_enqueue_new_datagram>
 800e598:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800e59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d11c      	bne.n	800e5da <ip4_reass+0x13e>
      goto nullreturn;
 800e5a0:	e105      	b.n	800e7ae <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e5a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5a4:	88db      	ldrh	r3, [r3, #6]
 800e5a6:	b29b      	uxth	r3, r3
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	f7f6 fa83 	bl	8004ab4 <lwip_htons>
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d110      	bne.n	800e5da <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800e5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5ba:	89db      	ldrh	r3, [r3, #14]
 800e5bc:	4618      	mov	r0, r3
 800e5be:	f7f6 fa79 	bl	8004ab4 <lwip_htons>
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d006      	beq.n	800e5da <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800e5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5ce:	3308      	adds	r3, #8
 800e5d0:	2214      	movs	r2, #20
 800e5d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	f000 fd98 	bl	800f10a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800e5da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5dc:	88db      	ldrh	r3, [r3, #6]
 800e5de:	b29b      	uxth	r3, r3
 800e5e0:	f003 0320 	and.w	r3, r3, #32
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	bf0c      	ite	eq
 800e5e8:	2301      	moveq	r3, #1
 800e5ea:	2300      	movne	r3, #0
 800e5ec:	b2db      	uxtb	r3, r3
 800e5ee:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800e5f0:	69fb      	ldr	r3, [r7, #28]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d00e      	beq.n	800e614 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800e5f6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e5f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e5fa:	4413      	add	r3, r2
 800e5fc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800e5fe:	8b7a      	ldrh	r2, [r7, #26]
 800e600:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e602:	429a      	cmp	r2, r3
 800e604:	f0c0 80a0 	bcc.w	800e748 <ip4_reass+0x2ac>
 800e608:	8b7b      	ldrh	r3, [r7, #26]
 800e60a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800e60e:	4293      	cmp	r3, r2
 800e610:	f200 809a 	bhi.w	800e748 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800e614:	69fa      	ldr	r2, [r7, #28]
 800e616:	6879      	ldr	r1, [r7, #4]
 800e618:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e61a:	f7ff fdd5 	bl	800e1c8 <ip_reass_chain_frag_into_datagram_and_validate>
 800e61e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800e620:	697b      	ldr	r3, [r7, #20]
 800e622:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e626:	f000 809b 	beq.w	800e760 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800e62a:	4b48      	ldr	r3, [pc, #288]	; (800e74c <ip4_reass+0x2b0>)
 800e62c:	881a      	ldrh	r2, [r3, #0]
 800e62e:	8c3b      	ldrh	r3, [r7, #32]
 800e630:	4413      	add	r3, r2
 800e632:	b29a      	uxth	r2, r3
 800e634:	4b45      	ldr	r3, [pc, #276]	; (800e74c <ip4_reass+0x2b0>)
 800e636:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800e638:	69fb      	ldr	r3, [r7, #28]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d00d      	beq.n	800e65a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800e63e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e640:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e642:	4413      	add	r3, r2
 800e644:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800e646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e648:	8a7a      	ldrh	r2, [r7, #18]
 800e64a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800e64c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e64e:	7f9b      	ldrb	r3, [r3, #30]
 800e650:	f043 0301 	orr.w	r3, r3, #1
 800e654:	b2da      	uxtb	r2, r3
 800e656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e658:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800e65a:	697b      	ldr	r3, [r7, #20]
 800e65c:	2b01      	cmp	r3, #1
 800e65e:	d171      	bne.n	800e744 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800e660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e662:	8b9b      	ldrh	r3, [r3, #28]
 800e664:	3314      	adds	r3, #20
 800e666:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800e668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e66a:	685b      	ldr	r3, [r3, #4]
 800e66c:	685b      	ldr	r3, [r3, #4]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800e672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e674:	685b      	ldr	r3, [r3, #4]
 800e676:	685b      	ldr	r3, [r3, #4]
 800e678:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800e67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e67c:	3308      	adds	r3, #8
 800e67e:	2214      	movs	r2, #20
 800e680:	4619      	mov	r1, r3
 800e682:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e684:	f000 fd41 	bl	800f10a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800e688:	8a3b      	ldrh	r3, [r7, #16]
 800e68a:	4618      	mov	r0, r3
 800e68c:	f7f6 fa12 	bl	8004ab4 <lwip_htons>
 800e690:	4603      	mov	r3, r0
 800e692:	461a      	mov	r2, r3
 800e694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e696:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800e698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e69a:	2200      	movs	r2, #0
 800e69c:	719a      	strb	r2, [r3, #6]
 800e69e:	2200      	movs	r2, #0
 800e6a0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800e6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	729a      	strb	r2, [r3, #10]
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800e6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6ae:	685b      	ldr	r3, [r3, #4]
 800e6b0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800e6b2:	e00d      	b.n	800e6d0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800e6b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6b6:	685b      	ldr	r3, [r3, #4]
 800e6b8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800e6ba:	2114      	movs	r1, #20
 800e6bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e6be:	f7f7 fcd1 	bl	8006064 <pbuf_remove_header>
      pbuf_cat(p, r);
 800e6c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e6c4:	6878      	ldr	r0, [r7, #4]
 800e6c6:	f7f7 fe15 	bl	80062f4 <pbuf_cat>
      r = iprh->next_pbuf;
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800e6d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d1ee      	bne.n	800e6b4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800e6d6:	4b1e      	ldr	r3, [pc, #120]	; (800e750 <ip4_reass+0x2b4>)
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6dc:	429a      	cmp	r2, r3
 800e6de:	d102      	bne.n	800e6e6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e6e4:	e010      	b.n	800e708 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e6e6:	4b1a      	ldr	r3, [pc, #104]	; (800e750 <ip4_reass+0x2b4>)
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e6ec:	e007      	b.n	800e6fe <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800e6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6f4:	429a      	cmp	r2, r3
 800e6f6:	d006      	beq.n	800e706 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e700:	2b00      	cmp	r3, #0
 800e702:	d1f4      	bne.n	800e6ee <ip4_reass+0x252>
 800e704:	e000      	b.n	800e708 <ip4_reass+0x26c>
          break;
 800e706:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800e708:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e70a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e70c:	f7ff fd2e 	bl	800e16c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800e710:	6878      	ldr	r0, [r7, #4]
 800e712:	f7f7 fdb5 	bl	8006280 <pbuf_clen>
 800e716:	4603      	mov	r3, r0
 800e718:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800e71a:	4b0c      	ldr	r3, [pc, #48]	; (800e74c <ip4_reass+0x2b0>)
 800e71c:	881b      	ldrh	r3, [r3, #0]
 800e71e:	8c3a      	ldrh	r2, [r7, #32]
 800e720:	429a      	cmp	r2, r3
 800e722:	d906      	bls.n	800e732 <ip4_reass+0x296>
 800e724:	4b0b      	ldr	r3, [pc, #44]	; (800e754 <ip4_reass+0x2b8>)
 800e726:	f240 229b 	movw	r2, #667	; 0x29b
 800e72a:	490b      	ldr	r1, [pc, #44]	; (800e758 <ip4_reass+0x2bc>)
 800e72c:	480b      	ldr	r0, [pc, #44]	; (800e75c <ip4_reass+0x2c0>)
 800e72e:	f000 fbc5 	bl	800eebc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800e732:	4b06      	ldr	r3, [pc, #24]	; (800e74c <ip4_reass+0x2b0>)
 800e734:	881a      	ldrh	r2, [r3, #0]
 800e736:	8c3b      	ldrh	r3, [r7, #32]
 800e738:	1ad3      	subs	r3, r2, r3
 800e73a:	b29a      	uxth	r2, r3
 800e73c:	4b03      	ldr	r3, [pc, #12]	; (800e74c <ip4_reass+0x2b0>)
 800e73e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	e038      	b.n	800e7b6 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800e744:	2300      	movs	r3, #0
 800e746:	e036      	b.n	800e7b6 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800e748:	bf00      	nop
 800e74a:	e00a      	b.n	800e762 <ip4_reass+0x2c6>
 800e74c:	2000a60c 	.word	0x2000a60c
 800e750:	2000a608 	.word	0x2000a608
 800e754:	080127f0 	.word	0x080127f0
 800e758:	08012960 	.word	0x08012960
 800e75c:	08012838 	.word	0x08012838
    goto nullreturn_ipr;
 800e760:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800e762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e764:	2b00      	cmp	r3, #0
 800e766:	d106      	bne.n	800e776 <ip4_reass+0x2da>
 800e768:	4b15      	ldr	r3, [pc, #84]	; (800e7c0 <ip4_reass+0x324>)
 800e76a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800e76e:	4915      	ldr	r1, [pc, #84]	; (800e7c4 <ip4_reass+0x328>)
 800e770:	4815      	ldr	r0, [pc, #84]	; (800e7c8 <ip4_reass+0x32c>)
 800e772:	f000 fba3 	bl	800eebc <iprintf>
  if (ipr->p == NULL) {
 800e776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e778:	685b      	ldr	r3, [r3, #4]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d116      	bne.n	800e7ac <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800e77e:	4b13      	ldr	r3, [pc, #76]	; (800e7cc <ip4_reass+0x330>)
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e784:	429a      	cmp	r2, r3
 800e786:	d006      	beq.n	800e796 <ip4_reass+0x2fa>
 800e788:	4b0d      	ldr	r3, [pc, #52]	; (800e7c0 <ip4_reass+0x324>)
 800e78a:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e78e:	4910      	ldr	r1, [pc, #64]	; (800e7d0 <ip4_reass+0x334>)
 800e790:	480d      	ldr	r0, [pc, #52]	; (800e7c8 <ip4_reass+0x32c>)
 800e792:	f000 fb93 	bl	800eebc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800e796:	2100      	movs	r1, #0
 800e798:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e79a:	f7ff fce7 	bl	800e16c <ip_reass_dequeue_datagram>
 800e79e:	e006      	b.n	800e7ae <ip4_reass+0x312>
    goto nullreturn;
 800e7a0:	bf00      	nop
 800e7a2:	e004      	b.n	800e7ae <ip4_reass+0x312>
    goto nullreturn;
 800e7a4:	bf00      	nop
 800e7a6:	e002      	b.n	800e7ae <ip4_reass+0x312>
      goto nullreturn;
 800e7a8:	bf00      	nop
 800e7aa:	e000      	b.n	800e7ae <ip4_reass+0x312>
  }

nullreturn:
 800e7ac:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800e7ae:	6878      	ldr	r0, [r7, #4]
 800e7b0:	f7f7 fcde 	bl	8006170 <pbuf_free>
  return NULL;
 800e7b4:	2300      	movs	r3, #0
}
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	3738      	adds	r7, #56	; 0x38
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	bd80      	pop	{r7, pc}
 800e7be:	bf00      	nop
 800e7c0:	080127f0 	.word	0x080127f0
 800e7c4:	0801297c 	.word	0x0801297c
 800e7c8:	08012838 	.word	0x08012838
 800e7cc:	2000a608 	.word	0x2000a608
 800e7d0:	08012988 	.word	0x08012988

0800e7d4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800e7d8:	2005      	movs	r0, #5
 800e7da:	f7f6 fde3 	bl	80053a4 <memp_malloc>
 800e7de:	4603      	mov	r3, r0
}
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	bd80      	pop	{r7, pc}

0800e7e4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	b082      	sub	sp, #8
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d106      	bne.n	800e800 <ip_frag_free_pbuf_custom_ref+0x1c>
 800e7f2:	4b07      	ldr	r3, [pc, #28]	; (800e810 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800e7f4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800e7f8:	4906      	ldr	r1, [pc, #24]	; (800e814 <ip_frag_free_pbuf_custom_ref+0x30>)
 800e7fa:	4807      	ldr	r0, [pc, #28]	; (800e818 <ip_frag_free_pbuf_custom_ref+0x34>)
 800e7fc:	f000 fb5e 	bl	800eebc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800e800:	6879      	ldr	r1, [r7, #4]
 800e802:	2005      	movs	r0, #5
 800e804:	f7f6 fe3e 	bl	8005484 <memp_free>
}
 800e808:	bf00      	nop
 800e80a:	3708      	adds	r7, #8
 800e80c:	46bd      	mov	sp, r7
 800e80e:	bd80      	pop	{r7, pc}
 800e810:	080127f0 	.word	0x080127f0
 800e814:	080129a8 	.word	0x080129a8
 800e818:	08012838 	.word	0x08012838

0800e81c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b084      	sub	sp, #16
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d106      	bne.n	800e83c <ipfrag_free_pbuf_custom+0x20>
 800e82e:	4b11      	ldr	r3, [pc, #68]	; (800e874 <ipfrag_free_pbuf_custom+0x58>)
 800e830:	f240 22ce 	movw	r2, #718	; 0x2ce
 800e834:	4910      	ldr	r1, [pc, #64]	; (800e878 <ipfrag_free_pbuf_custom+0x5c>)
 800e836:	4811      	ldr	r0, [pc, #68]	; (800e87c <ipfrag_free_pbuf_custom+0x60>)
 800e838:	f000 fb40 	bl	800eebc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800e83c:	68fa      	ldr	r2, [r7, #12]
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	429a      	cmp	r2, r3
 800e842:	d006      	beq.n	800e852 <ipfrag_free_pbuf_custom+0x36>
 800e844:	4b0b      	ldr	r3, [pc, #44]	; (800e874 <ipfrag_free_pbuf_custom+0x58>)
 800e846:	f240 22cf 	movw	r2, #719	; 0x2cf
 800e84a:	490d      	ldr	r1, [pc, #52]	; (800e880 <ipfrag_free_pbuf_custom+0x64>)
 800e84c:	480b      	ldr	r0, [pc, #44]	; (800e87c <ipfrag_free_pbuf_custom+0x60>)
 800e84e:	f000 fb35 	bl	800eebc <iprintf>
  if (pcr->original != NULL) {
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	695b      	ldr	r3, [r3, #20]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d004      	beq.n	800e864 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	695b      	ldr	r3, [r3, #20]
 800e85e:	4618      	mov	r0, r3
 800e860:	f7f7 fc86 	bl	8006170 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800e864:	68f8      	ldr	r0, [r7, #12]
 800e866:	f7ff ffbd 	bl	800e7e4 <ip_frag_free_pbuf_custom_ref>
}
 800e86a:	bf00      	nop
 800e86c:	3710      	adds	r7, #16
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}
 800e872:	bf00      	nop
 800e874:	080127f0 	.word	0x080127f0
 800e878:	080129b4 	.word	0x080129b4
 800e87c:	08012838 	.word	0x08012838
 800e880:	080129c0 	.word	0x080129c0

0800e884 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b094      	sub	sp, #80	; 0x50
 800e888:	af02      	add	r7, sp, #8
 800e88a:	60f8      	str	r0, [r7, #12]
 800e88c:	60b9      	str	r1, [r7, #8]
 800e88e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800e890:	2300      	movs	r3, #0
 800e892:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800e896:	68bb      	ldr	r3, [r7, #8]
 800e898:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e89a:	3b14      	subs	r3, #20
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	da00      	bge.n	800e8a2 <ip4_frag+0x1e>
 800e8a0:	3307      	adds	r3, #7
 800e8a2:	10db      	asrs	r3, r3, #3
 800e8a4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800e8a6:	2314      	movs	r3, #20
 800e8a8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	685b      	ldr	r3, [r3, #4]
 800e8ae:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800e8b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8b2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800e8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8b6:	781b      	ldrb	r3, [r3, #0]
 800e8b8:	f003 030f 	and.w	r3, r3, #15
 800e8bc:	b2db      	uxtb	r3, r3
 800e8be:	009b      	lsls	r3, r3, #2
 800e8c0:	b2db      	uxtb	r3, r3
 800e8c2:	2b14      	cmp	r3, #20
 800e8c4:	d002      	beq.n	800e8cc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800e8c6:	f06f 0305 	mvn.w	r3, #5
 800e8ca:	e110      	b.n	800eaee <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	895b      	ldrh	r3, [r3, #10]
 800e8d0:	2b13      	cmp	r3, #19
 800e8d2:	d809      	bhi.n	800e8e8 <ip4_frag+0x64>
 800e8d4:	4b88      	ldr	r3, [pc, #544]	; (800eaf8 <ip4_frag+0x274>)
 800e8d6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800e8da:	4988      	ldr	r1, [pc, #544]	; (800eafc <ip4_frag+0x278>)
 800e8dc:	4888      	ldr	r0, [pc, #544]	; (800eb00 <ip4_frag+0x27c>)
 800e8de:	f000 faed 	bl	800eebc <iprintf>
 800e8e2:	f06f 0305 	mvn.w	r3, #5
 800e8e6:	e102      	b.n	800eaee <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800e8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8ea:	88db      	ldrh	r3, [r3, #6]
 800e8ec:	b29b      	uxth	r3, r3
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f7f6 f8e0 	bl	8004ab4 <lwip_htons>
 800e8f4:	4603      	mov	r3, r0
 800e8f6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800e8f8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e8fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e8fe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800e902:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e904:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e908:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	891b      	ldrh	r3, [r3, #8]
 800e90e:	3b14      	subs	r3, #20
 800e910:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800e914:	e0e1      	b.n	800eada <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800e916:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e918:	00db      	lsls	r3, r3, #3
 800e91a:	b29b      	uxth	r3, r3
 800e91c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e920:	4293      	cmp	r3, r2
 800e922:	bf28      	it	cs
 800e924:	4613      	movcs	r3, r2
 800e926:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800e928:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e92c:	2114      	movs	r1, #20
 800e92e:	200e      	movs	r0, #14
 800e930:	f7f7 f93a 	bl	8005ba8 <pbuf_alloc>
 800e934:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800e936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e938:	2b00      	cmp	r3, #0
 800e93a:	f000 80d5 	beq.w	800eae8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800e93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e940:	895b      	ldrh	r3, [r3, #10]
 800e942:	2b13      	cmp	r3, #19
 800e944:	d806      	bhi.n	800e954 <ip4_frag+0xd0>
 800e946:	4b6c      	ldr	r3, [pc, #432]	; (800eaf8 <ip4_frag+0x274>)
 800e948:	f44f 7249 	mov.w	r2, #804	; 0x324
 800e94c:	496d      	ldr	r1, [pc, #436]	; (800eb04 <ip4_frag+0x280>)
 800e94e:	486c      	ldr	r0, [pc, #432]	; (800eb00 <ip4_frag+0x27c>)
 800e950:	f000 fab4 	bl	800eebc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800e954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e956:	685b      	ldr	r3, [r3, #4]
 800e958:	2214      	movs	r2, #20
 800e95a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e95c:	4618      	mov	r0, r3
 800e95e:	f000 fbd4 	bl	800f10a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800e962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e964:	685b      	ldr	r3, [r3, #4]
 800e966:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800e968:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e96a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800e96e:	e064      	b.n	800ea3a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	895a      	ldrh	r2, [r3, #10]
 800e974:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e976:	1ad3      	subs	r3, r2, r3
 800e978:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	895b      	ldrh	r3, [r3, #10]
 800e97e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e980:	429a      	cmp	r2, r3
 800e982:	d906      	bls.n	800e992 <ip4_frag+0x10e>
 800e984:	4b5c      	ldr	r3, [pc, #368]	; (800eaf8 <ip4_frag+0x274>)
 800e986:	f240 322d 	movw	r2, #813	; 0x32d
 800e98a:	495f      	ldr	r1, [pc, #380]	; (800eb08 <ip4_frag+0x284>)
 800e98c:	485c      	ldr	r0, [pc, #368]	; (800eb00 <ip4_frag+0x27c>)
 800e98e:	f000 fa95 	bl	800eebc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800e992:	8bfa      	ldrh	r2, [r7, #30]
 800e994:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e998:	4293      	cmp	r3, r2
 800e99a:	bf28      	it	cs
 800e99c:	4613      	movcs	r3, r2
 800e99e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800e9a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d105      	bne.n	800e9b6 <ip4_frag+0x132>
        poff = 0;
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	60fb      	str	r3, [r7, #12]
        continue;
 800e9b4:	e041      	b.n	800ea3a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800e9b6:	f7ff ff0d 	bl	800e7d4 <ip_frag_alloc_pbuf_custom_ref>
 800e9ba:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800e9bc:	69bb      	ldr	r3, [r7, #24]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d103      	bne.n	800e9ca <ip4_frag+0x146>
        pbuf_free(rambuf);
 800e9c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e9c4:	f7f7 fbd4 	bl	8006170 <pbuf_free>
        goto memerr;
 800e9c8:	e08f      	b.n	800eaea <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e9ca:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e9d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e9d2:	4413      	add	r3, r2
 800e9d4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800e9d8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800e9dc:	9201      	str	r2, [sp, #4]
 800e9de:	9300      	str	r3, [sp, #0]
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	2241      	movs	r2, #65	; 0x41
 800e9e4:	2000      	movs	r0, #0
 800e9e6:	f7f7 fa09 	bl	8005dfc <pbuf_alloced_custom>
 800e9ea:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800e9ec:	697b      	ldr	r3, [r7, #20]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d106      	bne.n	800ea00 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800e9f2:	69b8      	ldr	r0, [r7, #24]
 800e9f4:	f7ff fef6 	bl	800e7e4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800e9f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e9fa:	f7f7 fbb9 	bl	8006170 <pbuf_free>
        goto memerr;
 800e9fe:	e074      	b.n	800eaea <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800ea00:	68f8      	ldr	r0, [r7, #12]
 800ea02:	f7f7 fc55 	bl	80062b0 <pbuf_ref>
      pcr->original = p;
 800ea06:	69bb      	ldr	r3, [r7, #24]
 800ea08:	68fa      	ldr	r2, [r7, #12]
 800ea0a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800ea0c:	69bb      	ldr	r3, [r7, #24]
 800ea0e:	4a3f      	ldr	r2, [pc, #252]	; (800eb0c <ip4_frag+0x288>)
 800ea10:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800ea12:	6979      	ldr	r1, [r7, #20]
 800ea14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ea16:	f7f7 fc6d 	bl	80062f4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800ea1a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800ea1e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ea22:	1ad3      	subs	r3, r2, r3
 800ea24:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800ea28:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d004      	beq.n	800ea3a <ip4_frag+0x1b6>
        poff = 0;
 800ea30:	2300      	movs	r3, #0
 800ea32:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800ea3a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d196      	bne.n	800e970 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800ea42:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800ea44:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ea48:	4413      	add	r3, r2
 800ea4a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800ea4c:	68bb      	ldr	r3, [r7, #8]
 800ea4e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ea50:	f1a3 0213 	sub.w	r2, r3, #19
 800ea54:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ea58:	429a      	cmp	r2, r3
 800ea5a:	bfcc      	ite	gt
 800ea5c:	2301      	movgt	r3, #1
 800ea5e:	2300      	movle	r3, #0
 800ea60:	b2db      	uxtb	r3, r3
 800ea62:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800ea64:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ea68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ea6c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800ea6e:	6a3b      	ldr	r3, [r7, #32]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d002      	beq.n	800ea7a <ip4_frag+0x1f6>
 800ea74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d003      	beq.n	800ea82 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800ea7a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ea7c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ea80:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800ea82:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ea84:	4618      	mov	r0, r3
 800ea86:	f7f6 f815 	bl	8004ab4 <lwip_htons>
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	461a      	mov	r2, r3
 800ea8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea90:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800ea92:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ea94:	3314      	adds	r3, #20
 800ea96:	b29b      	uxth	r3, r3
 800ea98:	4618      	mov	r0, r3
 800ea9a:	f7f6 f80b 	bl	8004ab4 <lwip_htons>
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	461a      	mov	r2, r3
 800eaa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaa4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800eaa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	729a      	strb	r2, [r3, #10]
 800eaac:	2200      	movs	r2, #0
 800eaae:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800eab0:	68bb      	ldr	r3, [r7, #8]
 800eab2:	695b      	ldr	r3, [r3, #20]
 800eab4:	687a      	ldr	r2, [r7, #4]
 800eab6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eab8:	68b8      	ldr	r0, [r7, #8]
 800eaba:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800eabc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eabe:	f7f7 fb57 	bl	8006170 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800eac2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800eac6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800eac8:	1ad3      	subs	r3, r2, r3
 800eaca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800eace:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800ead2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ead4:	4413      	add	r3, r2
 800ead6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800eada:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800eade:	2b00      	cmp	r3, #0
 800eae0:	f47f af19 	bne.w	800e916 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800eae4:	2300      	movs	r3, #0
 800eae6:	e002      	b.n	800eaee <ip4_frag+0x26a>
      goto memerr;
 800eae8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800eaea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800eaee:	4618      	mov	r0, r3
 800eaf0:	3748      	adds	r7, #72	; 0x48
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	bd80      	pop	{r7, pc}
 800eaf6:	bf00      	nop
 800eaf8:	080127f0 	.word	0x080127f0
 800eafc:	080129cc 	.word	0x080129cc
 800eb00:	08012838 	.word	0x08012838
 800eb04:	080129e8 	.word	0x080129e8
 800eb08:	08012a08 	.word	0x08012a08
 800eb0c:	0800e81d 	.word	0x0800e81d

0800eb10 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b086      	sub	sp, #24
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
 800eb18:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800eb1a:	230e      	movs	r3, #14
 800eb1c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	895b      	ldrh	r3, [r3, #10]
 800eb22:	2b0e      	cmp	r3, #14
 800eb24:	d96e      	bls.n	800ec04 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	7bdb      	ldrb	r3, [r3, #15]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d106      	bne.n	800eb3c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800eb2e:	683b      	ldr	r3, [r7, #0]
 800eb30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eb34:	3301      	adds	r3, #1
 800eb36:	b2da      	uxtb	r2, r3
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	685b      	ldr	r3, [r3, #4]
 800eb40:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800eb42:	693b      	ldr	r3, [r7, #16]
 800eb44:	7b1a      	ldrb	r2, [r3, #12]
 800eb46:	7b5b      	ldrb	r3, [r3, #13]
 800eb48:	021b      	lsls	r3, r3, #8
 800eb4a:	4313      	orrs	r3, r2
 800eb4c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800eb4e:	693b      	ldr	r3, [r7, #16]
 800eb50:	781b      	ldrb	r3, [r3, #0]
 800eb52:	f003 0301 	and.w	r3, r3, #1
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d023      	beq.n	800eba2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800eb5a:	693b      	ldr	r3, [r7, #16]
 800eb5c:	781b      	ldrb	r3, [r3, #0]
 800eb5e:	2b01      	cmp	r3, #1
 800eb60:	d10f      	bne.n	800eb82 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800eb62:	693b      	ldr	r3, [r7, #16]
 800eb64:	785b      	ldrb	r3, [r3, #1]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d11b      	bne.n	800eba2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800eb6a:	693b      	ldr	r3, [r7, #16]
 800eb6c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800eb6e:	2b5e      	cmp	r3, #94	; 0x5e
 800eb70:	d117      	bne.n	800eba2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	7b5b      	ldrb	r3, [r3, #13]
 800eb76:	f043 0310 	orr.w	r3, r3, #16
 800eb7a:	b2da      	uxtb	r2, r3
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	735a      	strb	r2, [r3, #13]
 800eb80:	e00f      	b.n	800eba2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800eb82:	693b      	ldr	r3, [r7, #16]
 800eb84:	2206      	movs	r2, #6
 800eb86:	4928      	ldr	r1, [pc, #160]	; (800ec28 <ethernet_input+0x118>)
 800eb88:	4618      	mov	r0, r3
 800eb8a:	f000 fa0c 	bl	800efa6 <memcmp>
 800eb8e:	4603      	mov	r3, r0
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d106      	bne.n	800eba2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	7b5b      	ldrb	r3, [r3, #13]
 800eb98:	f043 0308 	orr.w	r3, r3, #8
 800eb9c:	b2da      	uxtb	r2, r3
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800eba2:	89fb      	ldrh	r3, [r7, #14]
 800eba4:	2b08      	cmp	r3, #8
 800eba6:	d003      	beq.n	800ebb0 <ethernet_input+0xa0>
 800eba8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800ebac:	d014      	beq.n	800ebd8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800ebae:	e032      	b.n	800ec16 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ebb0:	683b      	ldr	r3, [r7, #0]
 800ebb2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ebb6:	f003 0308 	and.w	r3, r3, #8
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d024      	beq.n	800ec08 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800ebbe:	8afb      	ldrh	r3, [r7, #22]
 800ebc0:	4619      	mov	r1, r3
 800ebc2:	6878      	ldr	r0, [r7, #4]
 800ebc4:	f7f7 fa4e 	bl	8006064 <pbuf_remove_header>
 800ebc8:	4603      	mov	r3, r0
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d11e      	bne.n	800ec0c <ethernet_input+0xfc>
        ip4_input(p, netif);
 800ebce:	6839      	ldr	r1, [r7, #0]
 800ebd0:	6878      	ldr	r0, [r7, #4]
 800ebd2:	f7fe ff21 	bl	800da18 <ip4_input>
      break;
 800ebd6:	e013      	b.n	800ec00 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ebd8:	683b      	ldr	r3, [r7, #0]
 800ebda:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ebde:	f003 0308 	and.w	r3, r3, #8
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d014      	beq.n	800ec10 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800ebe6:	8afb      	ldrh	r3, [r7, #22]
 800ebe8:	4619      	mov	r1, r3
 800ebea:	6878      	ldr	r0, [r7, #4]
 800ebec:	f7f7 fa3a 	bl	8006064 <pbuf_remove_header>
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d10e      	bne.n	800ec14 <ethernet_input+0x104>
        etharp_input(p, netif);
 800ebf6:	6839      	ldr	r1, [r7, #0]
 800ebf8:	6878      	ldr	r0, [r7, #4]
 800ebfa:	f7fe f8c1 	bl	800cd80 <etharp_input>
      break;
 800ebfe:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800ec00:	2300      	movs	r3, #0
 800ec02:	e00c      	b.n	800ec1e <ethernet_input+0x10e>
    goto free_and_return;
 800ec04:	bf00      	nop
 800ec06:	e006      	b.n	800ec16 <ethernet_input+0x106>
        goto free_and_return;
 800ec08:	bf00      	nop
 800ec0a:	e004      	b.n	800ec16 <ethernet_input+0x106>
        goto free_and_return;
 800ec0c:	bf00      	nop
 800ec0e:	e002      	b.n	800ec16 <ethernet_input+0x106>
        goto free_and_return;
 800ec10:	bf00      	nop
 800ec12:	e000      	b.n	800ec16 <ethernet_input+0x106>
        goto free_and_return;
 800ec14:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800ec16:	6878      	ldr	r0, [r7, #4]
 800ec18:	f7f7 faaa 	bl	8006170 <pbuf_free>
  return ERR_OK;
 800ec1c:	2300      	movs	r3, #0
}
 800ec1e:	4618      	mov	r0, r3
 800ec20:	3718      	adds	r7, #24
 800ec22:	46bd      	mov	sp, r7
 800ec24:	bd80      	pop	{r7, pc}
 800ec26:	bf00      	nop
 800ec28:	08012b9c 	.word	0x08012b9c

0800ec2c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b086      	sub	sp, #24
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	60f8      	str	r0, [r7, #12]
 800ec34:	60b9      	str	r1, [r7, #8]
 800ec36:	607a      	str	r2, [r7, #4]
 800ec38:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800ec3a:	8c3b      	ldrh	r3, [r7, #32]
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	f7f5 ff39 	bl	8004ab4 <lwip_htons>
 800ec42:	4603      	mov	r3, r0
 800ec44:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800ec46:	210e      	movs	r1, #14
 800ec48:	68b8      	ldr	r0, [r7, #8]
 800ec4a:	f7f7 f9fb 	bl	8006044 <pbuf_add_header>
 800ec4e:	4603      	mov	r3, r0
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d125      	bne.n	800eca0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800ec54:	68bb      	ldr	r3, [r7, #8]
 800ec56:	685b      	ldr	r3, [r3, #4]
 800ec58:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800ec5a:	693b      	ldr	r3, [r7, #16]
 800ec5c:	8afa      	ldrh	r2, [r7, #22]
 800ec5e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800ec60:	693b      	ldr	r3, [r7, #16]
 800ec62:	2206      	movs	r2, #6
 800ec64:	6839      	ldr	r1, [r7, #0]
 800ec66:	4618      	mov	r0, r3
 800ec68:	f000 fa4f 	bl	800f10a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800ec6c:	693b      	ldr	r3, [r7, #16]
 800ec6e:	3306      	adds	r3, #6
 800ec70:	2206      	movs	r2, #6
 800ec72:	6879      	ldr	r1, [r7, #4]
 800ec74:	4618      	mov	r0, r3
 800ec76:	f000 fa48 	bl	800f10a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ec80:	2b06      	cmp	r3, #6
 800ec82:	d006      	beq.n	800ec92 <ethernet_output+0x66>
 800ec84:	4b0a      	ldr	r3, [pc, #40]	; (800ecb0 <ethernet_output+0x84>)
 800ec86:	f44f 7299 	mov.w	r2, #306	; 0x132
 800ec8a:	490a      	ldr	r1, [pc, #40]	; (800ecb4 <ethernet_output+0x88>)
 800ec8c:	480a      	ldr	r0, [pc, #40]	; (800ecb8 <ethernet_output+0x8c>)
 800ec8e:	f000 f915 	bl	800eebc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	699b      	ldr	r3, [r3, #24]
 800ec96:	68b9      	ldr	r1, [r7, #8]
 800ec98:	68f8      	ldr	r0, [r7, #12]
 800ec9a:	4798      	blx	r3
 800ec9c:	4603      	mov	r3, r0
 800ec9e:	e002      	b.n	800eca6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800eca0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800eca2:	f06f 0301 	mvn.w	r3, #1
}
 800eca6:	4618      	mov	r0, r3
 800eca8:	3718      	adds	r7, #24
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	bd80      	pop	{r7, pc}
 800ecae:	bf00      	nop
 800ecb0:	08012a18 	.word	0x08012a18
 800ecb4:	08012a50 	.word	0x08012a50
 800ecb8:	08012a84 	.word	0x08012a84

0800ecbc <rand>:
 800ecbc:	4b16      	ldr	r3, [pc, #88]	; (800ed18 <rand+0x5c>)
 800ecbe:	b510      	push	{r4, lr}
 800ecc0:	681c      	ldr	r4, [r3, #0]
 800ecc2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ecc4:	b9b3      	cbnz	r3, 800ecf4 <rand+0x38>
 800ecc6:	2018      	movs	r0, #24
 800ecc8:	f000 fa98 	bl	800f1fc <malloc>
 800eccc:	4602      	mov	r2, r0
 800ecce:	6320      	str	r0, [r4, #48]	; 0x30
 800ecd0:	b920      	cbnz	r0, 800ecdc <rand+0x20>
 800ecd2:	4b12      	ldr	r3, [pc, #72]	; (800ed1c <rand+0x60>)
 800ecd4:	4812      	ldr	r0, [pc, #72]	; (800ed20 <rand+0x64>)
 800ecd6:	2152      	movs	r1, #82	; 0x52
 800ecd8:	f000 fa26 	bl	800f128 <__assert_func>
 800ecdc:	4911      	ldr	r1, [pc, #68]	; (800ed24 <rand+0x68>)
 800ecde:	4b12      	ldr	r3, [pc, #72]	; (800ed28 <rand+0x6c>)
 800ece0:	e9c0 1300 	strd	r1, r3, [r0]
 800ece4:	4b11      	ldr	r3, [pc, #68]	; (800ed2c <rand+0x70>)
 800ece6:	6083      	str	r3, [r0, #8]
 800ece8:	230b      	movs	r3, #11
 800ecea:	8183      	strh	r3, [r0, #12]
 800ecec:	2100      	movs	r1, #0
 800ecee:	2001      	movs	r0, #1
 800ecf0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800ecf4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ecf6:	480e      	ldr	r0, [pc, #56]	; (800ed30 <rand+0x74>)
 800ecf8:	690b      	ldr	r3, [r1, #16]
 800ecfa:	694c      	ldr	r4, [r1, #20]
 800ecfc:	4a0d      	ldr	r2, [pc, #52]	; (800ed34 <rand+0x78>)
 800ecfe:	4358      	muls	r0, r3
 800ed00:	fb02 0004 	mla	r0, r2, r4, r0
 800ed04:	fba3 3202 	umull	r3, r2, r3, r2
 800ed08:	3301      	adds	r3, #1
 800ed0a:	eb40 0002 	adc.w	r0, r0, r2
 800ed0e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800ed12:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ed16:	bd10      	pop	{r4, pc}
 800ed18:	20000084 	.word	0x20000084
 800ed1c:	08012baa 	.word	0x08012baa
 800ed20:	08012bc1 	.word	0x08012bc1
 800ed24:	abcd330e 	.word	0xabcd330e
 800ed28:	e66d1234 	.word	0xe66d1234
 800ed2c:	0005deec 	.word	0x0005deec
 800ed30:	5851f42d 	.word	0x5851f42d
 800ed34:	4c957f2d 	.word	0x4c957f2d

0800ed38 <std>:
 800ed38:	2300      	movs	r3, #0
 800ed3a:	b510      	push	{r4, lr}
 800ed3c:	4604      	mov	r4, r0
 800ed3e:	e9c0 3300 	strd	r3, r3, [r0]
 800ed42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ed46:	6083      	str	r3, [r0, #8]
 800ed48:	8181      	strh	r1, [r0, #12]
 800ed4a:	6643      	str	r3, [r0, #100]	; 0x64
 800ed4c:	81c2      	strh	r2, [r0, #14]
 800ed4e:	6183      	str	r3, [r0, #24]
 800ed50:	4619      	mov	r1, r3
 800ed52:	2208      	movs	r2, #8
 800ed54:	305c      	adds	r0, #92	; 0x5c
 800ed56:	f000 f950 	bl	800effa <memset>
 800ed5a:	4b0d      	ldr	r3, [pc, #52]	; (800ed90 <std+0x58>)
 800ed5c:	6263      	str	r3, [r4, #36]	; 0x24
 800ed5e:	4b0d      	ldr	r3, [pc, #52]	; (800ed94 <std+0x5c>)
 800ed60:	62a3      	str	r3, [r4, #40]	; 0x28
 800ed62:	4b0d      	ldr	r3, [pc, #52]	; (800ed98 <std+0x60>)
 800ed64:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ed66:	4b0d      	ldr	r3, [pc, #52]	; (800ed9c <std+0x64>)
 800ed68:	6323      	str	r3, [r4, #48]	; 0x30
 800ed6a:	4b0d      	ldr	r3, [pc, #52]	; (800eda0 <std+0x68>)
 800ed6c:	6224      	str	r4, [r4, #32]
 800ed6e:	429c      	cmp	r4, r3
 800ed70:	d006      	beq.n	800ed80 <std+0x48>
 800ed72:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ed76:	4294      	cmp	r4, r2
 800ed78:	d002      	beq.n	800ed80 <std+0x48>
 800ed7a:	33d0      	adds	r3, #208	; 0xd0
 800ed7c:	429c      	cmp	r4, r3
 800ed7e:	d105      	bne.n	800ed8c <std+0x54>
 800ed80:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ed84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed88:	f000 b9bc 	b.w	800f104 <__retarget_lock_init_recursive>
 800ed8c:	bd10      	pop	{r4, pc}
 800ed8e:	bf00      	nop
 800ed90:	0800ef21 	.word	0x0800ef21
 800ed94:	0800ef43 	.word	0x0800ef43
 800ed98:	0800ef7b 	.word	0x0800ef7b
 800ed9c:	0800ef9f 	.word	0x0800ef9f
 800eda0:	2000a610 	.word	0x2000a610

0800eda4 <stdio_exit_handler>:
 800eda4:	4a02      	ldr	r2, [pc, #8]	; (800edb0 <stdio_exit_handler+0xc>)
 800eda6:	4903      	ldr	r1, [pc, #12]	; (800edb4 <stdio_exit_handler+0x10>)
 800eda8:	4803      	ldr	r0, [pc, #12]	; (800edb8 <stdio_exit_handler+0x14>)
 800edaa:	f000 b869 	b.w	800ee80 <_fwalk_sglue>
 800edae:	bf00      	nop
 800edb0:	2000002c 	.word	0x2000002c
 800edb4:	0800fcc9 	.word	0x0800fcc9
 800edb8:	20000038 	.word	0x20000038

0800edbc <cleanup_stdio>:
 800edbc:	6841      	ldr	r1, [r0, #4]
 800edbe:	4b0c      	ldr	r3, [pc, #48]	; (800edf0 <cleanup_stdio+0x34>)
 800edc0:	4299      	cmp	r1, r3
 800edc2:	b510      	push	{r4, lr}
 800edc4:	4604      	mov	r4, r0
 800edc6:	d001      	beq.n	800edcc <cleanup_stdio+0x10>
 800edc8:	f000 ff7e 	bl	800fcc8 <_fflush_r>
 800edcc:	68a1      	ldr	r1, [r4, #8]
 800edce:	4b09      	ldr	r3, [pc, #36]	; (800edf4 <cleanup_stdio+0x38>)
 800edd0:	4299      	cmp	r1, r3
 800edd2:	d002      	beq.n	800edda <cleanup_stdio+0x1e>
 800edd4:	4620      	mov	r0, r4
 800edd6:	f000 ff77 	bl	800fcc8 <_fflush_r>
 800edda:	68e1      	ldr	r1, [r4, #12]
 800eddc:	4b06      	ldr	r3, [pc, #24]	; (800edf8 <cleanup_stdio+0x3c>)
 800edde:	4299      	cmp	r1, r3
 800ede0:	d004      	beq.n	800edec <cleanup_stdio+0x30>
 800ede2:	4620      	mov	r0, r4
 800ede4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ede8:	f000 bf6e 	b.w	800fcc8 <_fflush_r>
 800edec:	bd10      	pop	{r4, pc}
 800edee:	bf00      	nop
 800edf0:	2000a610 	.word	0x2000a610
 800edf4:	2000a678 	.word	0x2000a678
 800edf8:	2000a6e0 	.word	0x2000a6e0

0800edfc <global_stdio_init.part.0>:
 800edfc:	b510      	push	{r4, lr}
 800edfe:	4b0b      	ldr	r3, [pc, #44]	; (800ee2c <global_stdio_init.part.0+0x30>)
 800ee00:	4c0b      	ldr	r4, [pc, #44]	; (800ee30 <global_stdio_init.part.0+0x34>)
 800ee02:	4a0c      	ldr	r2, [pc, #48]	; (800ee34 <global_stdio_init.part.0+0x38>)
 800ee04:	601a      	str	r2, [r3, #0]
 800ee06:	4620      	mov	r0, r4
 800ee08:	2200      	movs	r2, #0
 800ee0a:	2104      	movs	r1, #4
 800ee0c:	f7ff ff94 	bl	800ed38 <std>
 800ee10:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ee14:	2201      	movs	r2, #1
 800ee16:	2109      	movs	r1, #9
 800ee18:	f7ff ff8e 	bl	800ed38 <std>
 800ee1c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ee20:	2202      	movs	r2, #2
 800ee22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee26:	2112      	movs	r1, #18
 800ee28:	f7ff bf86 	b.w	800ed38 <std>
 800ee2c:	2000a748 	.word	0x2000a748
 800ee30:	2000a610 	.word	0x2000a610
 800ee34:	0800eda5 	.word	0x0800eda5

0800ee38 <__sfp_lock_acquire>:
 800ee38:	4801      	ldr	r0, [pc, #4]	; (800ee40 <__sfp_lock_acquire+0x8>)
 800ee3a:	f000 b964 	b.w	800f106 <__retarget_lock_acquire_recursive>
 800ee3e:	bf00      	nop
 800ee40:	2000a751 	.word	0x2000a751

0800ee44 <__sfp_lock_release>:
 800ee44:	4801      	ldr	r0, [pc, #4]	; (800ee4c <__sfp_lock_release+0x8>)
 800ee46:	f000 b95f 	b.w	800f108 <__retarget_lock_release_recursive>
 800ee4a:	bf00      	nop
 800ee4c:	2000a751 	.word	0x2000a751

0800ee50 <__sinit>:
 800ee50:	b510      	push	{r4, lr}
 800ee52:	4604      	mov	r4, r0
 800ee54:	f7ff fff0 	bl	800ee38 <__sfp_lock_acquire>
 800ee58:	6a23      	ldr	r3, [r4, #32]
 800ee5a:	b11b      	cbz	r3, 800ee64 <__sinit+0x14>
 800ee5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee60:	f7ff bff0 	b.w	800ee44 <__sfp_lock_release>
 800ee64:	4b04      	ldr	r3, [pc, #16]	; (800ee78 <__sinit+0x28>)
 800ee66:	6223      	str	r3, [r4, #32]
 800ee68:	4b04      	ldr	r3, [pc, #16]	; (800ee7c <__sinit+0x2c>)
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d1f5      	bne.n	800ee5c <__sinit+0xc>
 800ee70:	f7ff ffc4 	bl	800edfc <global_stdio_init.part.0>
 800ee74:	e7f2      	b.n	800ee5c <__sinit+0xc>
 800ee76:	bf00      	nop
 800ee78:	0800edbd 	.word	0x0800edbd
 800ee7c:	2000a748 	.word	0x2000a748

0800ee80 <_fwalk_sglue>:
 800ee80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee84:	4607      	mov	r7, r0
 800ee86:	4688      	mov	r8, r1
 800ee88:	4614      	mov	r4, r2
 800ee8a:	2600      	movs	r6, #0
 800ee8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ee90:	f1b9 0901 	subs.w	r9, r9, #1
 800ee94:	d505      	bpl.n	800eea2 <_fwalk_sglue+0x22>
 800ee96:	6824      	ldr	r4, [r4, #0]
 800ee98:	2c00      	cmp	r4, #0
 800ee9a:	d1f7      	bne.n	800ee8c <_fwalk_sglue+0xc>
 800ee9c:	4630      	mov	r0, r6
 800ee9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eea2:	89ab      	ldrh	r3, [r5, #12]
 800eea4:	2b01      	cmp	r3, #1
 800eea6:	d907      	bls.n	800eeb8 <_fwalk_sglue+0x38>
 800eea8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eeac:	3301      	adds	r3, #1
 800eeae:	d003      	beq.n	800eeb8 <_fwalk_sglue+0x38>
 800eeb0:	4629      	mov	r1, r5
 800eeb2:	4638      	mov	r0, r7
 800eeb4:	47c0      	blx	r8
 800eeb6:	4306      	orrs	r6, r0
 800eeb8:	3568      	adds	r5, #104	; 0x68
 800eeba:	e7e9      	b.n	800ee90 <_fwalk_sglue+0x10>

0800eebc <iprintf>:
 800eebc:	b40f      	push	{r0, r1, r2, r3}
 800eebe:	b507      	push	{r0, r1, r2, lr}
 800eec0:	4906      	ldr	r1, [pc, #24]	; (800eedc <iprintf+0x20>)
 800eec2:	ab04      	add	r3, sp, #16
 800eec4:	6808      	ldr	r0, [r1, #0]
 800eec6:	f853 2b04 	ldr.w	r2, [r3], #4
 800eeca:	6881      	ldr	r1, [r0, #8]
 800eecc:	9301      	str	r3, [sp, #4]
 800eece:	f000 fbcb 	bl	800f668 <_vfiprintf_r>
 800eed2:	b003      	add	sp, #12
 800eed4:	f85d eb04 	ldr.w	lr, [sp], #4
 800eed8:	b004      	add	sp, #16
 800eeda:	4770      	bx	lr
 800eedc:	20000084 	.word	0x20000084

0800eee0 <siprintf>:
 800eee0:	b40e      	push	{r1, r2, r3}
 800eee2:	b500      	push	{lr}
 800eee4:	b09c      	sub	sp, #112	; 0x70
 800eee6:	ab1d      	add	r3, sp, #116	; 0x74
 800eee8:	9002      	str	r0, [sp, #8]
 800eeea:	9006      	str	r0, [sp, #24]
 800eeec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800eef0:	4809      	ldr	r0, [pc, #36]	; (800ef18 <siprintf+0x38>)
 800eef2:	9107      	str	r1, [sp, #28]
 800eef4:	9104      	str	r1, [sp, #16]
 800eef6:	4909      	ldr	r1, [pc, #36]	; (800ef1c <siprintf+0x3c>)
 800eef8:	f853 2b04 	ldr.w	r2, [r3], #4
 800eefc:	9105      	str	r1, [sp, #20]
 800eefe:	6800      	ldr	r0, [r0, #0]
 800ef00:	9301      	str	r3, [sp, #4]
 800ef02:	a902      	add	r1, sp, #8
 800ef04:	f000 fa88 	bl	800f418 <_svfiprintf_r>
 800ef08:	9b02      	ldr	r3, [sp, #8]
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	701a      	strb	r2, [r3, #0]
 800ef0e:	b01c      	add	sp, #112	; 0x70
 800ef10:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef14:	b003      	add	sp, #12
 800ef16:	4770      	bx	lr
 800ef18:	20000084 	.word	0x20000084
 800ef1c:	ffff0208 	.word	0xffff0208

0800ef20 <__sread>:
 800ef20:	b510      	push	{r4, lr}
 800ef22:	460c      	mov	r4, r1
 800ef24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef28:	f000 f8a4 	bl	800f074 <_read_r>
 800ef2c:	2800      	cmp	r0, #0
 800ef2e:	bfab      	itete	ge
 800ef30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ef32:	89a3      	ldrhlt	r3, [r4, #12]
 800ef34:	181b      	addge	r3, r3, r0
 800ef36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ef3a:	bfac      	ite	ge
 800ef3c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ef3e:	81a3      	strhlt	r3, [r4, #12]
 800ef40:	bd10      	pop	{r4, pc}

0800ef42 <__swrite>:
 800ef42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef46:	461f      	mov	r7, r3
 800ef48:	898b      	ldrh	r3, [r1, #12]
 800ef4a:	05db      	lsls	r3, r3, #23
 800ef4c:	4605      	mov	r5, r0
 800ef4e:	460c      	mov	r4, r1
 800ef50:	4616      	mov	r6, r2
 800ef52:	d505      	bpl.n	800ef60 <__swrite+0x1e>
 800ef54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef58:	2302      	movs	r3, #2
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	f000 f878 	bl	800f050 <_lseek_r>
 800ef60:	89a3      	ldrh	r3, [r4, #12]
 800ef62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ef6a:	81a3      	strh	r3, [r4, #12]
 800ef6c:	4632      	mov	r2, r6
 800ef6e:	463b      	mov	r3, r7
 800ef70:	4628      	mov	r0, r5
 800ef72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef76:	f000 b88f 	b.w	800f098 <_write_r>

0800ef7a <__sseek>:
 800ef7a:	b510      	push	{r4, lr}
 800ef7c:	460c      	mov	r4, r1
 800ef7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef82:	f000 f865 	bl	800f050 <_lseek_r>
 800ef86:	1c43      	adds	r3, r0, #1
 800ef88:	89a3      	ldrh	r3, [r4, #12]
 800ef8a:	bf15      	itete	ne
 800ef8c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ef8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ef92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ef96:	81a3      	strheq	r3, [r4, #12]
 800ef98:	bf18      	it	ne
 800ef9a:	81a3      	strhne	r3, [r4, #12]
 800ef9c:	bd10      	pop	{r4, pc}

0800ef9e <__sclose>:
 800ef9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efa2:	f000 b845 	b.w	800f030 <_close_r>

0800efa6 <memcmp>:
 800efa6:	b510      	push	{r4, lr}
 800efa8:	3901      	subs	r1, #1
 800efaa:	4402      	add	r2, r0
 800efac:	4290      	cmp	r0, r2
 800efae:	d101      	bne.n	800efb4 <memcmp+0xe>
 800efb0:	2000      	movs	r0, #0
 800efb2:	e005      	b.n	800efc0 <memcmp+0x1a>
 800efb4:	7803      	ldrb	r3, [r0, #0]
 800efb6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800efba:	42a3      	cmp	r3, r4
 800efbc:	d001      	beq.n	800efc2 <memcmp+0x1c>
 800efbe:	1b18      	subs	r0, r3, r4
 800efc0:	bd10      	pop	{r4, pc}
 800efc2:	3001      	adds	r0, #1
 800efc4:	e7f2      	b.n	800efac <memcmp+0x6>

0800efc6 <memmove>:
 800efc6:	4288      	cmp	r0, r1
 800efc8:	b510      	push	{r4, lr}
 800efca:	eb01 0402 	add.w	r4, r1, r2
 800efce:	d902      	bls.n	800efd6 <memmove+0x10>
 800efd0:	4284      	cmp	r4, r0
 800efd2:	4623      	mov	r3, r4
 800efd4:	d807      	bhi.n	800efe6 <memmove+0x20>
 800efd6:	1e43      	subs	r3, r0, #1
 800efd8:	42a1      	cmp	r1, r4
 800efda:	d008      	beq.n	800efee <memmove+0x28>
 800efdc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800efe0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800efe4:	e7f8      	b.n	800efd8 <memmove+0x12>
 800efe6:	4402      	add	r2, r0
 800efe8:	4601      	mov	r1, r0
 800efea:	428a      	cmp	r2, r1
 800efec:	d100      	bne.n	800eff0 <memmove+0x2a>
 800efee:	bd10      	pop	{r4, pc}
 800eff0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eff4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800eff8:	e7f7      	b.n	800efea <memmove+0x24>

0800effa <memset>:
 800effa:	4402      	add	r2, r0
 800effc:	4603      	mov	r3, r0
 800effe:	4293      	cmp	r3, r2
 800f000:	d100      	bne.n	800f004 <memset+0xa>
 800f002:	4770      	bx	lr
 800f004:	f803 1b01 	strb.w	r1, [r3], #1
 800f008:	e7f9      	b.n	800effe <memset+0x4>

0800f00a <strncpy>:
 800f00a:	b510      	push	{r4, lr}
 800f00c:	3901      	subs	r1, #1
 800f00e:	4603      	mov	r3, r0
 800f010:	b132      	cbz	r2, 800f020 <strncpy+0x16>
 800f012:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f016:	f803 4b01 	strb.w	r4, [r3], #1
 800f01a:	3a01      	subs	r2, #1
 800f01c:	2c00      	cmp	r4, #0
 800f01e:	d1f7      	bne.n	800f010 <strncpy+0x6>
 800f020:	441a      	add	r2, r3
 800f022:	2100      	movs	r1, #0
 800f024:	4293      	cmp	r3, r2
 800f026:	d100      	bne.n	800f02a <strncpy+0x20>
 800f028:	bd10      	pop	{r4, pc}
 800f02a:	f803 1b01 	strb.w	r1, [r3], #1
 800f02e:	e7f9      	b.n	800f024 <strncpy+0x1a>

0800f030 <_close_r>:
 800f030:	b538      	push	{r3, r4, r5, lr}
 800f032:	4d06      	ldr	r5, [pc, #24]	; (800f04c <_close_r+0x1c>)
 800f034:	2300      	movs	r3, #0
 800f036:	4604      	mov	r4, r0
 800f038:	4608      	mov	r0, r1
 800f03a:	602b      	str	r3, [r5, #0]
 800f03c:	f7f1 febf 	bl	8000dbe <_close>
 800f040:	1c43      	adds	r3, r0, #1
 800f042:	d102      	bne.n	800f04a <_close_r+0x1a>
 800f044:	682b      	ldr	r3, [r5, #0]
 800f046:	b103      	cbz	r3, 800f04a <_close_r+0x1a>
 800f048:	6023      	str	r3, [r4, #0]
 800f04a:	bd38      	pop	{r3, r4, r5, pc}
 800f04c:	2000a74c 	.word	0x2000a74c

0800f050 <_lseek_r>:
 800f050:	b538      	push	{r3, r4, r5, lr}
 800f052:	4d07      	ldr	r5, [pc, #28]	; (800f070 <_lseek_r+0x20>)
 800f054:	4604      	mov	r4, r0
 800f056:	4608      	mov	r0, r1
 800f058:	4611      	mov	r1, r2
 800f05a:	2200      	movs	r2, #0
 800f05c:	602a      	str	r2, [r5, #0]
 800f05e:	461a      	mov	r2, r3
 800f060:	f7f1 fed4 	bl	8000e0c <_lseek>
 800f064:	1c43      	adds	r3, r0, #1
 800f066:	d102      	bne.n	800f06e <_lseek_r+0x1e>
 800f068:	682b      	ldr	r3, [r5, #0]
 800f06a:	b103      	cbz	r3, 800f06e <_lseek_r+0x1e>
 800f06c:	6023      	str	r3, [r4, #0]
 800f06e:	bd38      	pop	{r3, r4, r5, pc}
 800f070:	2000a74c 	.word	0x2000a74c

0800f074 <_read_r>:
 800f074:	b538      	push	{r3, r4, r5, lr}
 800f076:	4d07      	ldr	r5, [pc, #28]	; (800f094 <_read_r+0x20>)
 800f078:	4604      	mov	r4, r0
 800f07a:	4608      	mov	r0, r1
 800f07c:	4611      	mov	r1, r2
 800f07e:	2200      	movs	r2, #0
 800f080:	602a      	str	r2, [r5, #0]
 800f082:	461a      	mov	r2, r3
 800f084:	f7f1 fe62 	bl	8000d4c <_read>
 800f088:	1c43      	adds	r3, r0, #1
 800f08a:	d102      	bne.n	800f092 <_read_r+0x1e>
 800f08c:	682b      	ldr	r3, [r5, #0]
 800f08e:	b103      	cbz	r3, 800f092 <_read_r+0x1e>
 800f090:	6023      	str	r3, [r4, #0]
 800f092:	bd38      	pop	{r3, r4, r5, pc}
 800f094:	2000a74c 	.word	0x2000a74c

0800f098 <_write_r>:
 800f098:	b538      	push	{r3, r4, r5, lr}
 800f09a:	4d07      	ldr	r5, [pc, #28]	; (800f0b8 <_write_r+0x20>)
 800f09c:	4604      	mov	r4, r0
 800f09e:	4608      	mov	r0, r1
 800f0a0:	4611      	mov	r1, r2
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	602a      	str	r2, [r5, #0]
 800f0a6:	461a      	mov	r2, r3
 800f0a8:	f7f1 fe6d 	bl	8000d86 <_write>
 800f0ac:	1c43      	adds	r3, r0, #1
 800f0ae:	d102      	bne.n	800f0b6 <_write_r+0x1e>
 800f0b0:	682b      	ldr	r3, [r5, #0]
 800f0b2:	b103      	cbz	r3, 800f0b6 <_write_r+0x1e>
 800f0b4:	6023      	str	r3, [r4, #0]
 800f0b6:	bd38      	pop	{r3, r4, r5, pc}
 800f0b8:	2000a74c 	.word	0x2000a74c

0800f0bc <__libc_init_array>:
 800f0bc:	b570      	push	{r4, r5, r6, lr}
 800f0be:	4d0d      	ldr	r5, [pc, #52]	; (800f0f4 <__libc_init_array+0x38>)
 800f0c0:	4c0d      	ldr	r4, [pc, #52]	; (800f0f8 <__libc_init_array+0x3c>)
 800f0c2:	1b64      	subs	r4, r4, r5
 800f0c4:	10a4      	asrs	r4, r4, #2
 800f0c6:	2600      	movs	r6, #0
 800f0c8:	42a6      	cmp	r6, r4
 800f0ca:	d109      	bne.n	800f0e0 <__libc_init_array+0x24>
 800f0cc:	4d0b      	ldr	r5, [pc, #44]	; (800f0fc <__libc_init_array+0x40>)
 800f0ce:	4c0c      	ldr	r4, [pc, #48]	; (800f100 <__libc_init_array+0x44>)
 800f0d0:	f000 ffe0 	bl	8010094 <_init>
 800f0d4:	1b64      	subs	r4, r4, r5
 800f0d6:	10a4      	asrs	r4, r4, #2
 800f0d8:	2600      	movs	r6, #0
 800f0da:	42a6      	cmp	r6, r4
 800f0dc:	d105      	bne.n	800f0ea <__libc_init_array+0x2e>
 800f0de:	bd70      	pop	{r4, r5, r6, pc}
 800f0e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800f0e4:	4798      	blx	r3
 800f0e6:	3601      	adds	r6, #1
 800f0e8:	e7ee      	b.n	800f0c8 <__libc_init_array+0xc>
 800f0ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800f0ee:	4798      	blx	r3
 800f0f0:	3601      	adds	r6, #1
 800f0f2:	e7f2      	b.n	800f0da <__libc_init_array+0x1e>
 800f0f4:	08012c90 	.word	0x08012c90
 800f0f8:	08012c90 	.word	0x08012c90
 800f0fc:	08012c90 	.word	0x08012c90
 800f100:	08012c94 	.word	0x08012c94

0800f104 <__retarget_lock_init_recursive>:
 800f104:	4770      	bx	lr

0800f106 <__retarget_lock_acquire_recursive>:
 800f106:	4770      	bx	lr

0800f108 <__retarget_lock_release_recursive>:
 800f108:	4770      	bx	lr

0800f10a <memcpy>:
 800f10a:	440a      	add	r2, r1
 800f10c:	4291      	cmp	r1, r2
 800f10e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f112:	d100      	bne.n	800f116 <memcpy+0xc>
 800f114:	4770      	bx	lr
 800f116:	b510      	push	{r4, lr}
 800f118:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f11c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f120:	4291      	cmp	r1, r2
 800f122:	d1f9      	bne.n	800f118 <memcpy+0xe>
 800f124:	bd10      	pop	{r4, pc}
	...

0800f128 <__assert_func>:
 800f128:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f12a:	4614      	mov	r4, r2
 800f12c:	461a      	mov	r2, r3
 800f12e:	4b09      	ldr	r3, [pc, #36]	; (800f154 <__assert_func+0x2c>)
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	4605      	mov	r5, r0
 800f134:	68d8      	ldr	r0, [r3, #12]
 800f136:	b14c      	cbz	r4, 800f14c <__assert_func+0x24>
 800f138:	4b07      	ldr	r3, [pc, #28]	; (800f158 <__assert_func+0x30>)
 800f13a:	9100      	str	r1, [sp, #0]
 800f13c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f140:	4906      	ldr	r1, [pc, #24]	; (800f15c <__assert_func+0x34>)
 800f142:	462b      	mov	r3, r5
 800f144:	f000 fde8 	bl	800fd18 <fiprintf>
 800f148:	f000 fe9e 	bl	800fe88 <abort>
 800f14c:	4b04      	ldr	r3, [pc, #16]	; (800f160 <__assert_func+0x38>)
 800f14e:	461c      	mov	r4, r3
 800f150:	e7f3      	b.n	800f13a <__assert_func+0x12>
 800f152:	bf00      	nop
 800f154:	20000084 	.word	0x20000084
 800f158:	08012c19 	.word	0x08012c19
 800f15c:	08012c26 	.word	0x08012c26
 800f160:	08012c54 	.word	0x08012c54

0800f164 <_free_r>:
 800f164:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f166:	2900      	cmp	r1, #0
 800f168:	d044      	beq.n	800f1f4 <_free_r+0x90>
 800f16a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f16e:	9001      	str	r0, [sp, #4]
 800f170:	2b00      	cmp	r3, #0
 800f172:	f1a1 0404 	sub.w	r4, r1, #4
 800f176:	bfb8      	it	lt
 800f178:	18e4      	addlt	r4, r4, r3
 800f17a:	f000 f8e7 	bl	800f34c <__malloc_lock>
 800f17e:	4a1e      	ldr	r2, [pc, #120]	; (800f1f8 <_free_r+0x94>)
 800f180:	9801      	ldr	r0, [sp, #4]
 800f182:	6813      	ldr	r3, [r2, #0]
 800f184:	b933      	cbnz	r3, 800f194 <_free_r+0x30>
 800f186:	6063      	str	r3, [r4, #4]
 800f188:	6014      	str	r4, [r2, #0]
 800f18a:	b003      	add	sp, #12
 800f18c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f190:	f000 b8e2 	b.w	800f358 <__malloc_unlock>
 800f194:	42a3      	cmp	r3, r4
 800f196:	d908      	bls.n	800f1aa <_free_r+0x46>
 800f198:	6825      	ldr	r5, [r4, #0]
 800f19a:	1961      	adds	r1, r4, r5
 800f19c:	428b      	cmp	r3, r1
 800f19e:	bf01      	itttt	eq
 800f1a0:	6819      	ldreq	r1, [r3, #0]
 800f1a2:	685b      	ldreq	r3, [r3, #4]
 800f1a4:	1949      	addeq	r1, r1, r5
 800f1a6:	6021      	streq	r1, [r4, #0]
 800f1a8:	e7ed      	b.n	800f186 <_free_r+0x22>
 800f1aa:	461a      	mov	r2, r3
 800f1ac:	685b      	ldr	r3, [r3, #4]
 800f1ae:	b10b      	cbz	r3, 800f1b4 <_free_r+0x50>
 800f1b0:	42a3      	cmp	r3, r4
 800f1b2:	d9fa      	bls.n	800f1aa <_free_r+0x46>
 800f1b4:	6811      	ldr	r1, [r2, #0]
 800f1b6:	1855      	adds	r5, r2, r1
 800f1b8:	42a5      	cmp	r5, r4
 800f1ba:	d10b      	bne.n	800f1d4 <_free_r+0x70>
 800f1bc:	6824      	ldr	r4, [r4, #0]
 800f1be:	4421      	add	r1, r4
 800f1c0:	1854      	adds	r4, r2, r1
 800f1c2:	42a3      	cmp	r3, r4
 800f1c4:	6011      	str	r1, [r2, #0]
 800f1c6:	d1e0      	bne.n	800f18a <_free_r+0x26>
 800f1c8:	681c      	ldr	r4, [r3, #0]
 800f1ca:	685b      	ldr	r3, [r3, #4]
 800f1cc:	6053      	str	r3, [r2, #4]
 800f1ce:	440c      	add	r4, r1
 800f1d0:	6014      	str	r4, [r2, #0]
 800f1d2:	e7da      	b.n	800f18a <_free_r+0x26>
 800f1d4:	d902      	bls.n	800f1dc <_free_r+0x78>
 800f1d6:	230c      	movs	r3, #12
 800f1d8:	6003      	str	r3, [r0, #0]
 800f1da:	e7d6      	b.n	800f18a <_free_r+0x26>
 800f1dc:	6825      	ldr	r5, [r4, #0]
 800f1de:	1961      	adds	r1, r4, r5
 800f1e0:	428b      	cmp	r3, r1
 800f1e2:	bf04      	itt	eq
 800f1e4:	6819      	ldreq	r1, [r3, #0]
 800f1e6:	685b      	ldreq	r3, [r3, #4]
 800f1e8:	6063      	str	r3, [r4, #4]
 800f1ea:	bf04      	itt	eq
 800f1ec:	1949      	addeq	r1, r1, r5
 800f1ee:	6021      	streq	r1, [r4, #0]
 800f1f0:	6054      	str	r4, [r2, #4]
 800f1f2:	e7ca      	b.n	800f18a <_free_r+0x26>
 800f1f4:	b003      	add	sp, #12
 800f1f6:	bd30      	pop	{r4, r5, pc}
 800f1f8:	2000a754 	.word	0x2000a754

0800f1fc <malloc>:
 800f1fc:	4b02      	ldr	r3, [pc, #8]	; (800f208 <malloc+0xc>)
 800f1fe:	4601      	mov	r1, r0
 800f200:	6818      	ldr	r0, [r3, #0]
 800f202:	f000 b823 	b.w	800f24c <_malloc_r>
 800f206:	bf00      	nop
 800f208:	20000084 	.word	0x20000084

0800f20c <sbrk_aligned>:
 800f20c:	b570      	push	{r4, r5, r6, lr}
 800f20e:	4e0e      	ldr	r6, [pc, #56]	; (800f248 <sbrk_aligned+0x3c>)
 800f210:	460c      	mov	r4, r1
 800f212:	6831      	ldr	r1, [r6, #0]
 800f214:	4605      	mov	r5, r0
 800f216:	b911      	cbnz	r1, 800f21e <sbrk_aligned+0x12>
 800f218:	f000 fe26 	bl	800fe68 <_sbrk_r>
 800f21c:	6030      	str	r0, [r6, #0]
 800f21e:	4621      	mov	r1, r4
 800f220:	4628      	mov	r0, r5
 800f222:	f000 fe21 	bl	800fe68 <_sbrk_r>
 800f226:	1c43      	adds	r3, r0, #1
 800f228:	d00a      	beq.n	800f240 <sbrk_aligned+0x34>
 800f22a:	1cc4      	adds	r4, r0, #3
 800f22c:	f024 0403 	bic.w	r4, r4, #3
 800f230:	42a0      	cmp	r0, r4
 800f232:	d007      	beq.n	800f244 <sbrk_aligned+0x38>
 800f234:	1a21      	subs	r1, r4, r0
 800f236:	4628      	mov	r0, r5
 800f238:	f000 fe16 	bl	800fe68 <_sbrk_r>
 800f23c:	3001      	adds	r0, #1
 800f23e:	d101      	bne.n	800f244 <sbrk_aligned+0x38>
 800f240:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f244:	4620      	mov	r0, r4
 800f246:	bd70      	pop	{r4, r5, r6, pc}
 800f248:	2000a758 	.word	0x2000a758

0800f24c <_malloc_r>:
 800f24c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f250:	1ccd      	adds	r5, r1, #3
 800f252:	f025 0503 	bic.w	r5, r5, #3
 800f256:	3508      	adds	r5, #8
 800f258:	2d0c      	cmp	r5, #12
 800f25a:	bf38      	it	cc
 800f25c:	250c      	movcc	r5, #12
 800f25e:	2d00      	cmp	r5, #0
 800f260:	4607      	mov	r7, r0
 800f262:	db01      	blt.n	800f268 <_malloc_r+0x1c>
 800f264:	42a9      	cmp	r1, r5
 800f266:	d905      	bls.n	800f274 <_malloc_r+0x28>
 800f268:	230c      	movs	r3, #12
 800f26a:	603b      	str	r3, [r7, #0]
 800f26c:	2600      	movs	r6, #0
 800f26e:	4630      	mov	r0, r6
 800f270:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f274:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f348 <_malloc_r+0xfc>
 800f278:	f000 f868 	bl	800f34c <__malloc_lock>
 800f27c:	f8d8 3000 	ldr.w	r3, [r8]
 800f280:	461c      	mov	r4, r3
 800f282:	bb5c      	cbnz	r4, 800f2dc <_malloc_r+0x90>
 800f284:	4629      	mov	r1, r5
 800f286:	4638      	mov	r0, r7
 800f288:	f7ff ffc0 	bl	800f20c <sbrk_aligned>
 800f28c:	1c43      	adds	r3, r0, #1
 800f28e:	4604      	mov	r4, r0
 800f290:	d155      	bne.n	800f33e <_malloc_r+0xf2>
 800f292:	f8d8 4000 	ldr.w	r4, [r8]
 800f296:	4626      	mov	r6, r4
 800f298:	2e00      	cmp	r6, #0
 800f29a:	d145      	bne.n	800f328 <_malloc_r+0xdc>
 800f29c:	2c00      	cmp	r4, #0
 800f29e:	d048      	beq.n	800f332 <_malloc_r+0xe6>
 800f2a0:	6823      	ldr	r3, [r4, #0]
 800f2a2:	4631      	mov	r1, r6
 800f2a4:	4638      	mov	r0, r7
 800f2a6:	eb04 0903 	add.w	r9, r4, r3
 800f2aa:	f000 fddd 	bl	800fe68 <_sbrk_r>
 800f2ae:	4581      	cmp	r9, r0
 800f2b0:	d13f      	bne.n	800f332 <_malloc_r+0xe6>
 800f2b2:	6821      	ldr	r1, [r4, #0]
 800f2b4:	1a6d      	subs	r5, r5, r1
 800f2b6:	4629      	mov	r1, r5
 800f2b8:	4638      	mov	r0, r7
 800f2ba:	f7ff ffa7 	bl	800f20c <sbrk_aligned>
 800f2be:	3001      	adds	r0, #1
 800f2c0:	d037      	beq.n	800f332 <_malloc_r+0xe6>
 800f2c2:	6823      	ldr	r3, [r4, #0]
 800f2c4:	442b      	add	r3, r5
 800f2c6:	6023      	str	r3, [r4, #0]
 800f2c8:	f8d8 3000 	ldr.w	r3, [r8]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d038      	beq.n	800f342 <_malloc_r+0xf6>
 800f2d0:	685a      	ldr	r2, [r3, #4]
 800f2d2:	42a2      	cmp	r2, r4
 800f2d4:	d12b      	bne.n	800f32e <_malloc_r+0xe2>
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	605a      	str	r2, [r3, #4]
 800f2da:	e00f      	b.n	800f2fc <_malloc_r+0xb0>
 800f2dc:	6822      	ldr	r2, [r4, #0]
 800f2de:	1b52      	subs	r2, r2, r5
 800f2e0:	d41f      	bmi.n	800f322 <_malloc_r+0xd6>
 800f2e2:	2a0b      	cmp	r2, #11
 800f2e4:	d917      	bls.n	800f316 <_malloc_r+0xca>
 800f2e6:	1961      	adds	r1, r4, r5
 800f2e8:	42a3      	cmp	r3, r4
 800f2ea:	6025      	str	r5, [r4, #0]
 800f2ec:	bf18      	it	ne
 800f2ee:	6059      	strne	r1, [r3, #4]
 800f2f0:	6863      	ldr	r3, [r4, #4]
 800f2f2:	bf08      	it	eq
 800f2f4:	f8c8 1000 	streq.w	r1, [r8]
 800f2f8:	5162      	str	r2, [r4, r5]
 800f2fa:	604b      	str	r3, [r1, #4]
 800f2fc:	4638      	mov	r0, r7
 800f2fe:	f104 060b 	add.w	r6, r4, #11
 800f302:	f000 f829 	bl	800f358 <__malloc_unlock>
 800f306:	f026 0607 	bic.w	r6, r6, #7
 800f30a:	1d23      	adds	r3, r4, #4
 800f30c:	1af2      	subs	r2, r6, r3
 800f30e:	d0ae      	beq.n	800f26e <_malloc_r+0x22>
 800f310:	1b9b      	subs	r3, r3, r6
 800f312:	50a3      	str	r3, [r4, r2]
 800f314:	e7ab      	b.n	800f26e <_malloc_r+0x22>
 800f316:	42a3      	cmp	r3, r4
 800f318:	6862      	ldr	r2, [r4, #4]
 800f31a:	d1dd      	bne.n	800f2d8 <_malloc_r+0x8c>
 800f31c:	f8c8 2000 	str.w	r2, [r8]
 800f320:	e7ec      	b.n	800f2fc <_malloc_r+0xb0>
 800f322:	4623      	mov	r3, r4
 800f324:	6864      	ldr	r4, [r4, #4]
 800f326:	e7ac      	b.n	800f282 <_malloc_r+0x36>
 800f328:	4634      	mov	r4, r6
 800f32a:	6876      	ldr	r6, [r6, #4]
 800f32c:	e7b4      	b.n	800f298 <_malloc_r+0x4c>
 800f32e:	4613      	mov	r3, r2
 800f330:	e7cc      	b.n	800f2cc <_malloc_r+0x80>
 800f332:	230c      	movs	r3, #12
 800f334:	603b      	str	r3, [r7, #0]
 800f336:	4638      	mov	r0, r7
 800f338:	f000 f80e 	bl	800f358 <__malloc_unlock>
 800f33c:	e797      	b.n	800f26e <_malloc_r+0x22>
 800f33e:	6025      	str	r5, [r4, #0]
 800f340:	e7dc      	b.n	800f2fc <_malloc_r+0xb0>
 800f342:	605b      	str	r3, [r3, #4]
 800f344:	deff      	udf	#255	; 0xff
 800f346:	bf00      	nop
 800f348:	2000a754 	.word	0x2000a754

0800f34c <__malloc_lock>:
 800f34c:	4801      	ldr	r0, [pc, #4]	; (800f354 <__malloc_lock+0x8>)
 800f34e:	f7ff beda 	b.w	800f106 <__retarget_lock_acquire_recursive>
 800f352:	bf00      	nop
 800f354:	2000a750 	.word	0x2000a750

0800f358 <__malloc_unlock>:
 800f358:	4801      	ldr	r0, [pc, #4]	; (800f360 <__malloc_unlock+0x8>)
 800f35a:	f7ff bed5 	b.w	800f108 <__retarget_lock_release_recursive>
 800f35e:	bf00      	nop
 800f360:	2000a750 	.word	0x2000a750

0800f364 <__ssputs_r>:
 800f364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f368:	688e      	ldr	r6, [r1, #8]
 800f36a:	461f      	mov	r7, r3
 800f36c:	42be      	cmp	r6, r7
 800f36e:	680b      	ldr	r3, [r1, #0]
 800f370:	4682      	mov	sl, r0
 800f372:	460c      	mov	r4, r1
 800f374:	4690      	mov	r8, r2
 800f376:	d82c      	bhi.n	800f3d2 <__ssputs_r+0x6e>
 800f378:	898a      	ldrh	r2, [r1, #12]
 800f37a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f37e:	d026      	beq.n	800f3ce <__ssputs_r+0x6a>
 800f380:	6965      	ldr	r5, [r4, #20]
 800f382:	6909      	ldr	r1, [r1, #16]
 800f384:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f388:	eba3 0901 	sub.w	r9, r3, r1
 800f38c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f390:	1c7b      	adds	r3, r7, #1
 800f392:	444b      	add	r3, r9
 800f394:	106d      	asrs	r5, r5, #1
 800f396:	429d      	cmp	r5, r3
 800f398:	bf38      	it	cc
 800f39a:	461d      	movcc	r5, r3
 800f39c:	0553      	lsls	r3, r2, #21
 800f39e:	d527      	bpl.n	800f3f0 <__ssputs_r+0x8c>
 800f3a0:	4629      	mov	r1, r5
 800f3a2:	f7ff ff53 	bl	800f24c <_malloc_r>
 800f3a6:	4606      	mov	r6, r0
 800f3a8:	b360      	cbz	r0, 800f404 <__ssputs_r+0xa0>
 800f3aa:	6921      	ldr	r1, [r4, #16]
 800f3ac:	464a      	mov	r2, r9
 800f3ae:	f7ff feac 	bl	800f10a <memcpy>
 800f3b2:	89a3      	ldrh	r3, [r4, #12]
 800f3b4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f3b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3bc:	81a3      	strh	r3, [r4, #12]
 800f3be:	6126      	str	r6, [r4, #16]
 800f3c0:	6165      	str	r5, [r4, #20]
 800f3c2:	444e      	add	r6, r9
 800f3c4:	eba5 0509 	sub.w	r5, r5, r9
 800f3c8:	6026      	str	r6, [r4, #0]
 800f3ca:	60a5      	str	r5, [r4, #8]
 800f3cc:	463e      	mov	r6, r7
 800f3ce:	42be      	cmp	r6, r7
 800f3d0:	d900      	bls.n	800f3d4 <__ssputs_r+0x70>
 800f3d2:	463e      	mov	r6, r7
 800f3d4:	6820      	ldr	r0, [r4, #0]
 800f3d6:	4632      	mov	r2, r6
 800f3d8:	4641      	mov	r1, r8
 800f3da:	f7ff fdf4 	bl	800efc6 <memmove>
 800f3de:	68a3      	ldr	r3, [r4, #8]
 800f3e0:	1b9b      	subs	r3, r3, r6
 800f3e2:	60a3      	str	r3, [r4, #8]
 800f3e4:	6823      	ldr	r3, [r4, #0]
 800f3e6:	4433      	add	r3, r6
 800f3e8:	6023      	str	r3, [r4, #0]
 800f3ea:	2000      	movs	r0, #0
 800f3ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3f0:	462a      	mov	r2, r5
 800f3f2:	f000 fd50 	bl	800fe96 <_realloc_r>
 800f3f6:	4606      	mov	r6, r0
 800f3f8:	2800      	cmp	r0, #0
 800f3fa:	d1e0      	bne.n	800f3be <__ssputs_r+0x5a>
 800f3fc:	6921      	ldr	r1, [r4, #16]
 800f3fe:	4650      	mov	r0, sl
 800f400:	f7ff feb0 	bl	800f164 <_free_r>
 800f404:	230c      	movs	r3, #12
 800f406:	f8ca 3000 	str.w	r3, [sl]
 800f40a:	89a3      	ldrh	r3, [r4, #12]
 800f40c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f410:	81a3      	strh	r3, [r4, #12]
 800f412:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f416:	e7e9      	b.n	800f3ec <__ssputs_r+0x88>

0800f418 <_svfiprintf_r>:
 800f418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f41c:	4698      	mov	r8, r3
 800f41e:	898b      	ldrh	r3, [r1, #12]
 800f420:	061b      	lsls	r3, r3, #24
 800f422:	b09d      	sub	sp, #116	; 0x74
 800f424:	4607      	mov	r7, r0
 800f426:	460d      	mov	r5, r1
 800f428:	4614      	mov	r4, r2
 800f42a:	d50e      	bpl.n	800f44a <_svfiprintf_r+0x32>
 800f42c:	690b      	ldr	r3, [r1, #16]
 800f42e:	b963      	cbnz	r3, 800f44a <_svfiprintf_r+0x32>
 800f430:	2140      	movs	r1, #64	; 0x40
 800f432:	f7ff ff0b 	bl	800f24c <_malloc_r>
 800f436:	6028      	str	r0, [r5, #0]
 800f438:	6128      	str	r0, [r5, #16]
 800f43a:	b920      	cbnz	r0, 800f446 <_svfiprintf_r+0x2e>
 800f43c:	230c      	movs	r3, #12
 800f43e:	603b      	str	r3, [r7, #0]
 800f440:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f444:	e0d0      	b.n	800f5e8 <_svfiprintf_r+0x1d0>
 800f446:	2340      	movs	r3, #64	; 0x40
 800f448:	616b      	str	r3, [r5, #20]
 800f44a:	2300      	movs	r3, #0
 800f44c:	9309      	str	r3, [sp, #36]	; 0x24
 800f44e:	2320      	movs	r3, #32
 800f450:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f454:	f8cd 800c 	str.w	r8, [sp, #12]
 800f458:	2330      	movs	r3, #48	; 0x30
 800f45a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f600 <_svfiprintf_r+0x1e8>
 800f45e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f462:	f04f 0901 	mov.w	r9, #1
 800f466:	4623      	mov	r3, r4
 800f468:	469a      	mov	sl, r3
 800f46a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f46e:	b10a      	cbz	r2, 800f474 <_svfiprintf_r+0x5c>
 800f470:	2a25      	cmp	r2, #37	; 0x25
 800f472:	d1f9      	bne.n	800f468 <_svfiprintf_r+0x50>
 800f474:	ebba 0b04 	subs.w	fp, sl, r4
 800f478:	d00b      	beq.n	800f492 <_svfiprintf_r+0x7a>
 800f47a:	465b      	mov	r3, fp
 800f47c:	4622      	mov	r2, r4
 800f47e:	4629      	mov	r1, r5
 800f480:	4638      	mov	r0, r7
 800f482:	f7ff ff6f 	bl	800f364 <__ssputs_r>
 800f486:	3001      	adds	r0, #1
 800f488:	f000 80a9 	beq.w	800f5de <_svfiprintf_r+0x1c6>
 800f48c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f48e:	445a      	add	r2, fp
 800f490:	9209      	str	r2, [sp, #36]	; 0x24
 800f492:	f89a 3000 	ldrb.w	r3, [sl]
 800f496:	2b00      	cmp	r3, #0
 800f498:	f000 80a1 	beq.w	800f5de <_svfiprintf_r+0x1c6>
 800f49c:	2300      	movs	r3, #0
 800f49e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f4a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f4a6:	f10a 0a01 	add.w	sl, sl, #1
 800f4aa:	9304      	str	r3, [sp, #16]
 800f4ac:	9307      	str	r3, [sp, #28]
 800f4ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f4b2:	931a      	str	r3, [sp, #104]	; 0x68
 800f4b4:	4654      	mov	r4, sl
 800f4b6:	2205      	movs	r2, #5
 800f4b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4bc:	4850      	ldr	r0, [pc, #320]	; (800f600 <_svfiprintf_r+0x1e8>)
 800f4be:	f7f0 febf 	bl	8000240 <memchr>
 800f4c2:	9a04      	ldr	r2, [sp, #16]
 800f4c4:	b9d8      	cbnz	r0, 800f4fe <_svfiprintf_r+0xe6>
 800f4c6:	06d0      	lsls	r0, r2, #27
 800f4c8:	bf44      	itt	mi
 800f4ca:	2320      	movmi	r3, #32
 800f4cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f4d0:	0711      	lsls	r1, r2, #28
 800f4d2:	bf44      	itt	mi
 800f4d4:	232b      	movmi	r3, #43	; 0x2b
 800f4d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f4da:	f89a 3000 	ldrb.w	r3, [sl]
 800f4de:	2b2a      	cmp	r3, #42	; 0x2a
 800f4e0:	d015      	beq.n	800f50e <_svfiprintf_r+0xf6>
 800f4e2:	9a07      	ldr	r2, [sp, #28]
 800f4e4:	4654      	mov	r4, sl
 800f4e6:	2000      	movs	r0, #0
 800f4e8:	f04f 0c0a 	mov.w	ip, #10
 800f4ec:	4621      	mov	r1, r4
 800f4ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f4f2:	3b30      	subs	r3, #48	; 0x30
 800f4f4:	2b09      	cmp	r3, #9
 800f4f6:	d94d      	bls.n	800f594 <_svfiprintf_r+0x17c>
 800f4f8:	b1b0      	cbz	r0, 800f528 <_svfiprintf_r+0x110>
 800f4fa:	9207      	str	r2, [sp, #28]
 800f4fc:	e014      	b.n	800f528 <_svfiprintf_r+0x110>
 800f4fe:	eba0 0308 	sub.w	r3, r0, r8
 800f502:	fa09 f303 	lsl.w	r3, r9, r3
 800f506:	4313      	orrs	r3, r2
 800f508:	9304      	str	r3, [sp, #16]
 800f50a:	46a2      	mov	sl, r4
 800f50c:	e7d2      	b.n	800f4b4 <_svfiprintf_r+0x9c>
 800f50e:	9b03      	ldr	r3, [sp, #12]
 800f510:	1d19      	adds	r1, r3, #4
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	9103      	str	r1, [sp, #12]
 800f516:	2b00      	cmp	r3, #0
 800f518:	bfbb      	ittet	lt
 800f51a:	425b      	neglt	r3, r3
 800f51c:	f042 0202 	orrlt.w	r2, r2, #2
 800f520:	9307      	strge	r3, [sp, #28]
 800f522:	9307      	strlt	r3, [sp, #28]
 800f524:	bfb8      	it	lt
 800f526:	9204      	strlt	r2, [sp, #16]
 800f528:	7823      	ldrb	r3, [r4, #0]
 800f52a:	2b2e      	cmp	r3, #46	; 0x2e
 800f52c:	d10c      	bne.n	800f548 <_svfiprintf_r+0x130>
 800f52e:	7863      	ldrb	r3, [r4, #1]
 800f530:	2b2a      	cmp	r3, #42	; 0x2a
 800f532:	d134      	bne.n	800f59e <_svfiprintf_r+0x186>
 800f534:	9b03      	ldr	r3, [sp, #12]
 800f536:	1d1a      	adds	r2, r3, #4
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	9203      	str	r2, [sp, #12]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	bfb8      	it	lt
 800f540:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f544:	3402      	adds	r4, #2
 800f546:	9305      	str	r3, [sp, #20]
 800f548:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f610 <_svfiprintf_r+0x1f8>
 800f54c:	7821      	ldrb	r1, [r4, #0]
 800f54e:	2203      	movs	r2, #3
 800f550:	4650      	mov	r0, sl
 800f552:	f7f0 fe75 	bl	8000240 <memchr>
 800f556:	b138      	cbz	r0, 800f568 <_svfiprintf_r+0x150>
 800f558:	9b04      	ldr	r3, [sp, #16]
 800f55a:	eba0 000a 	sub.w	r0, r0, sl
 800f55e:	2240      	movs	r2, #64	; 0x40
 800f560:	4082      	lsls	r2, r0
 800f562:	4313      	orrs	r3, r2
 800f564:	3401      	adds	r4, #1
 800f566:	9304      	str	r3, [sp, #16]
 800f568:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f56c:	4825      	ldr	r0, [pc, #148]	; (800f604 <_svfiprintf_r+0x1ec>)
 800f56e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f572:	2206      	movs	r2, #6
 800f574:	f7f0 fe64 	bl	8000240 <memchr>
 800f578:	2800      	cmp	r0, #0
 800f57a:	d038      	beq.n	800f5ee <_svfiprintf_r+0x1d6>
 800f57c:	4b22      	ldr	r3, [pc, #136]	; (800f608 <_svfiprintf_r+0x1f0>)
 800f57e:	bb1b      	cbnz	r3, 800f5c8 <_svfiprintf_r+0x1b0>
 800f580:	9b03      	ldr	r3, [sp, #12]
 800f582:	3307      	adds	r3, #7
 800f584:	f023 0307 	bic.w	r3, r3, #7
 800f588:	3308      	adds	r3, #8
 800f58a:	9303      	str	r3, [sp, #12]
 800f58c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f58e:	4433      	add	r3, r6
 800f590:	9309      	str	r3, [sp, #36]	; 0x24
 800f592:	e768      	b.n	800f466 <_svfiprintf_r+0x4e>
 800f594:	fb0c 3202 	mla	r2, ip, r2, r3
 800f598:	460c      	mov	r4, r1
 800f59a:	2001      	movs	r0, #1
 800f59c:	e7a6      	b.n	800f4ec <_svfiprintf_r+0xd4>
 800f59e:	2300      	movs	r3, #0
 800f5a0:	3401      	adds	r4, #1
 800f5a2:	9305      	str	r3, [sp, #20]
 800f5a4:	4619      	mov	r1, r3
 800f5a6:	f04f 0c0a 	mov.w	ip, #10
 800f5aa:	4620      	mov	r0, r4
 800f5ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f5b0:	3a30      	subs	r2, #48	; 0x30
 800f5b2:	2a09      	cmp	r2, #9
 800f5b4:	d903      	bls.n	800f5be <_svfiprintf_r+0x1a6>
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d0c6      	beq.n	800f548 <_svfiprintf_r+0x130>
 800f5ba:	9105      	str	r1, [sp, #20]
 800f5bc:	e7c4      	b.n	800f548 <_svfiprintf_r+0x130>
 800f5be:	fb0c 2101 	mla	r1, ip, r1, r2
 800f5c2:	4604      	mov	r4, r0
 800f5c4:	2301      	movs	r3, #1
 800f5c6:	e7f0      	b.n	800f5aa <_svfiprintf_r+0x192>
 800f5c8:	ab03      	add	r3, sp, #12
 800f5ca:	9300      	str	r3, [sp, #0]
 800f5cc:	462a      	mov	r2, r5
 800f5ce:	4b0f      	ldr	r3, [pc, #60]	; (800f60c <_svfiprintf_r+0x1f4>)
 800f5d0:	a904      	add	r1, sp, #16
 800f5d2:	4638      	mov	r0, r7
 800f5d4:	f3af 8000 	nop.w
 800f5d8:	1c42      	adds	r2, r0, #1
 800f5da:	4606      	mov	r6, r0
 800f5dc:	d1d6      	bne.n	800f58c <_svfiprintf_r+0x174>
 800f5de:	89ab      	ldrh	r3, [r5, #12]
 800f5e0:	065b      	lsls	r3, r3, #25
 800f5e2:	f53f af2d 	bmi.w	800f440 <_svfiprintf_r+0x28>
 800f5e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f5e8:	b01d      	add	sp, #116	; 0x74
 800f5ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5ee:	ab03      	add	r3, sp, #12
 800f5f0:	9300      	str	r3, [sp, #0]
 800f5f2:	462a      	mov	r2, r5
 800f5f4:	4b05      	ldr	r3, [pc, #20]	; (800f60c <_svfiprintf_r+0x1f4>)
 800f5f6:	a904      	add	r1, sp, #16
 800f5f8:	4638      	mov	r0, r7
 800f5fa:	f000 f9bd 	bl	800f978 <_printf_i>
 800f5fe:	e7eb      	b.n	800f5d8 <_svfiprintf_r+0x1c0>
 800f600:	08012c55 	.word	0x08012c55
 800f604:	08012c5f 	.word	0x08012c5f
 800f608:	00000000 	.word	0x00000000
 800f60c:	0800f365 	.word	0x0800f365
 800f610:	08012c5b 	.word	0x08012c5b

0800f614 <__sfputc_r>:
 800f614:	6893      	ldr	r3, [r2, #8]
 800f616:	3b01      	subs	r3, #1
 800f618:	2b00      	cmp	r3, #0
 800f61a:	b410      	push	{r4}
 800f61c:	6093      	str	r3, [r2, #8]
 800f61e:	da08      	bge.n	800f632 <__sfputc_r+0x1e>
 800f620:	6994      	ldr	r4, [r2, #24]
 800f622:	42a3      	cmp	r3, r4
 800f624:	db01      	blt.n	800f62a <__sfputc_r+0x16>
 800f626:	290a      	cmp	r1, #10
 800f628:	d103      	bne.n	800f632 <__sfputc_r+0x1e>
 800f62a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f62e:	f000 bb85 	b.w	800fd3c <__swbuf_r>
 800f632:	6813      	ldr	r3, [r2, #0]
 800f634:	1c58      	adds	r0, r3, #1
 800f636:	6010      	str	r0, [r2, #0]
 800f638:	7019      	strb	r1, [r3, #0]
 800f63a:	4608      	mov	r0, r1
 800f63c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f640:	4770      	bx	lr

0800f642 <__sfputs_r>:
 800f642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f644:	4606      	mov	r6, r0
 800f646:	460f      	mov	r7, r1
 800f648:	4614      	mov	r4, r2
 800f64a:	18d5      	adds	r5, r2, r3
 800f64c:	42ac      	cmp	r4, r5
 800f64e:	d101      	bne.n	800f654 <__sfputs_r+0x12>
 800f650:	2000      	movs	r0, #0
 800f652:	e007      	b.n	800f664 <__sfputs_r+0x22>
 800f654:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f658:	463a      	mov	r2, r7
 800f65a:	4630      	mov	r0, r6
 800f65c:	f7ff ffda 	bl	800f614 <__sfputc_r>
 800f660:	1c43      	adds	r3, r0, #1
 800f662:	d1f3      	bne.n	800f64c <__sfputs_r+0xa>
 800f664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f668 <_vfiprintf_r>:
 800f668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f66c:	460d      	mov	r5, r1
 800f66e:	b09d      	sub	sp, #116	; 0x74
 800f670:	4614      	mov	r4, r2
 800f672:	4698      	mov	r8, r3
 800f674:	4606      	mov	r6, r0
 800f676:	b118      	cbz	r0, 800f680 <_vfiprintf_r+0x18>
 800f678:	6a03      	ldr	r3, [r0, #32]
 800f67a:	b90b      	cbnz	r3, 800f680 <_vfiprintf_r+0x18>
 800f67c:	f7ff fbe8 	bl	800ee50 <__sinit>
 800f680:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f682:	07d9      	lsls	r1, r3, #31
 800f684:	d405      	bmi.n	800f692 <_vfiprintf_r+0x2a>
 800f686:	89ab      	ldrh	r3, [r5, #12]
 800f688:	059a      	lsls	r2, r3, #22
 800f68a:	d402      	bmi.n	800f692 <_vfiprintf_r+0x2a>
 800f68c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f68e:	f7ff fd3a 	bl	800f106 <__retarget_lock_acquire_recursive>
 800f692:	89ab      	ldrh	r3, [r5, #12]
 800f694:	071b      	lsls	r3, r3, #28
 800f696:	d501      	bpl.n	800f69c <_vfiprintf_r+0x34>
 800f698:	692b      	ldr	r3, [r5, #16]
 800f69a:	b99b      	cbnz	r3, 800f6c4 <_vfiprintf_r+0x5c>
 800f69c:	4629      	mov	r1, r5
 800f69e:	4630      	mov	r0, r6
 800f6a0:	f000 fb8a 	bl	800fdb8 <__swsetup_r>
 800f6a4:	b170      	cbz	r0, 800f6c4 <_vfiprintf_r+0x5c>
 800f6a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f6a8:	07dc      	lsls	r4, r3, #31
 800f6aa:	d504      	bpl.n	800f6b6 <_vfiprintf_r+0x4e>
 800f6ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f6b0:	b01d      	add	sp, #116	; 0x74
 800f6b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6b6:	89ab      	ldrh	r3, [r5, #12]
 800f6b8:	0598      	lsls	r0, r3, #22
 800f6ba:	d4f7      	bmi.n	800f6ac <_vfiprintf_r+0x44>
 800f6bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f6be:	f7ff fd23 	bl	800f108 <__retarget_lock_release_recursive>
 800f6c2:	e7f3      	b.n	800f6ac <_vfiprintf_r+0x44>
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	9309      	str	r3, [sp, #36]	; 0x24
 800f6c8:	2320      	movs	r3, #32
 800f6ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f6ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800f6d2:	2330      	movs	r3, #48	; 0x30
 800f6d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f888 <_vfiprintf_r+0x220>
 800f6d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f6dc:	f04f 0901 	mov.w	r9, #1
 800f6e0:	4623      	mov	r3, r4
 800f6e2:	469a      	mov	sl, r3
 800f6e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f6e8:	b10a      	cbz	r2, 800f6ee <_vfiprintf_r+0x86>
 800f6ea:	2a25      	cmp	r2, #37	; 0x25
 800f6ec:	d1f9      	bne.n	800f6e2 <_vfiprintf_r+0x7a>
 800f6ee:	ebba 0b04 	subs.w	fp, sl, r4
 800f6f2:	d00b      	beq.n	800f70c <_vfiprintf_r+0xa4>
 800f6f4:	465b      	mov	r3, fp
 800f6f6:	4622      	mov	r2, r4
 800f6f8:	4629      	mov	r1, r5
 800f6fa:	4630      	mov	r0, r6
 800f6fc:	f7ff ffa1 	bl	800f642 <__sfputs_r>
 800f700:	3001      	adds	r0, #1
 800f702:	f000 80a9 	beq.w	800f858 <_vfiprintf_r+0x1f0>
 800f706:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f708:	445a      	add	r2, fp
 800f70a:	9209      	str	r2, [sp, #36]	; 0x24
 800f70c:	f89a 3000 	ldrb.w	r3, [sl]
 800f710:	2b00      	cmp	r3, #0
 800f712:	f000 80a1 	beq.w	800f858 <_vfiprintf_r+0x1f0>
 800f716:	2300      	movs	r3, #0
 800f718:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f71c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f720:	f10a 0a01 	add.w	sl, sl, #1
 800f724:	9304      	str	r3, [sp, #16]
 800f726:	9307      	str	r3, [sp, #28]
 800f728:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f72c:	931a      	str	r3, [sp, #104]	; 0x68
 800f72e:	4654      	mov	r4, sl
 800f730:	2205      	movs	r2, #5
 800f732:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f736:	4854      	ldr	r0, [pc, #336]	; (800f888 <_vfiprintf_r+0x220>)
 800f738:	f7f0 fd82 	bl	8000240 <memchr>
 800f73c:	9a04      	ldr	r2, [sp, #16]
 800f73e:	b9d8      	cbnz	r0, 800f778 <_vfiprintf_r+0x110>
 800f740:	06d1      	lsls	r1, r2, #27
 800f742:	bf44      	itt	mi
 800f744:	2320      	movmi	r3, #32
 800f746:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f74a:	0713      	lsls	r3, r2, #28
 800f74c:	bf44      	itt	mi
 800f74e:	232b      	movmi	r3, #43	; 0x2b
 800f750:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f754:	f89a 3000 	ldrb.w	r3, [sl]
 800f758:	2b2a      	cmp	r3, #42	; 0x2a
 800f75a:	d015      	beq.n	800f788 <_vfiprintf_r+0x120>
 800f75c:	9a07      	ldr	r2, [sp, #28]
 800f75e:	4654      	mov	r4, sl
 800f760:	2000      	movs	r0, #0
 800f762:	f04f 0c0a 	mov.w	ip, #10
 800f766:	4621      	mov	r1, r4
 800f768:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f76c:	3b30      	subs	r3, #48	; 0x30
 800f76e:	2b09      	cmp	r3, #9
 800f770:	d94d      	bls.n	800f80e <_vfiprintf_r+0x1a6>
 800f772:	b1b0      	cbz	r0, 800f7a2 <_vfiprintf_r+0x13a>
 800f774:	9207      	str	r2, [sp, #28]
 800f776:	e014      	b.n	800f7a2 <_vfiprintf_r+0x13a>
 800f778:	eba0 0308 	sub.w	r3, r0, r8
 800f77c:	fa09 f303 	lsl.w	r3, r9, r3
 800f780:	4313      	orrs	r3, r2
 800f782:	9304      	str	r3, [sp, #16]
 800f784:	46a2      	mov	sl, r4
 800f786:	e7d2      	b.n	800f72e <_vfiprintf_r+0xc6>
 800f788:	9b03      	ldr	r3, [sp, #12]
 800f78a:	1d19      	adds	r1, r3, #4
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	9103      	str	r1, [sp, #12]
 800f790:	2b00      	cmp	r3, #0
 800f792:	bfbb      	ittet	lt
 800f794:	425b      	neglt	r3, r3
 800f796:	f042 0202 	orrlt.w	r2, r2, #2
 800f79a:	9307      	strge	r3, [sp, #28]
 800f79c:	9307      	strlt	r3, [sp, #28]
 800f79e:	bfb8      	it	lt
 800f7a0:	9204      	strlt	r2, [sp, #16]
 800f7a2:	7823      	ldrb	r3, [r4, #0]
 800f7a4:	2b2e      	cmp	r3, #46	; 0x2e
 800f7a6:	d10c      	bne.n	800f7c2 <_vfiprintf_r+0x15a>
 800f7a8:	7863      	ldrb	r3, [r4, #1]
 800f7aa:	2b2a      	cmp	r3, #42	; 0x2a
 800f7ac:	d134      	bne.n	800f818 <_vfiprintf_r+0x1b0>
 800f7ae:	9b03      	ldr	r3, [sp, #12]
 800f7b0:	1d1a      	adds	r2, r3, #4
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	9203      	str	r2, [sp, #12]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	bfb8      	it	lt
 800f7ba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f7be:	3402      	adds	r4, #2
 800f7c0:	9305      	str	r3, [sp, #20]
 800f7c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f898 <_vfiprintf_r+0x230>
 800f7c6:	7821      	ldrb	r1, [r4, #0]
 800f7c8:	2203      	movs	r2, #3
 800f7ca:	4650      	mov	r0, sl
 800f7cc:	f7f0 fd38 	bl	8000240 <memchr>
 800f7d0:	b138      	cbz	r0, 800f7e2 <_vfiprintf_r+0x17a>
 800f7d2:	9b04      	ldr	r3, [sp, #16]
 800f7d4:	eba0 000a 	sub.w	r0, r0, sl
 800f7d8:	2240      	movs	r2, #64	; 0x40
 800f7da:	4082      	lsls	r2, r0
 800f7dc:	4313      	orrs	r3, r2
 800f7de:	3401      	adds	r4, #1
 800f7e0:	9304      	str	r3, [sp, #16]
 800f7e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7e6:	4829      	ldr	r0, [pc, #164]	; (800f88c <_vfiprintf_r+0x224>)
 800f7e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f7ec:	2206      	movs	r2, #6
 800f7ee:	f7f0 fd27 	bl	8000240 <memchr>
 800f7f2:	2800      	cmp	r0, #0
 800f7f4:	d03f      	beq.n	800f876 <_vfiprintf_r+0x20e>
 800f7f6:	4b26      	ldr	r3, [pc, #152]	; (800f890 <_vfiprintf_r+0x228>)
 800f7f8:	bb1b      	cbnz	r3, 800f842 <_vfiprintf_r+0x1da>
 800f7fa:	9b03      	ldr	r3, [sp, #12]
 800f7fc:	3307      	adds	r3, #7
 800f7fe:	f023 0307 	bic.w	r3, r3, #7
 800f802:	3308      	adds	r3, #8
 800f804:	9303      	str	r3, [sp, #12]
 800f806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f808:	443b      	add	r3, r7
 800f80a:	9309      	str	r3, [sp, #36]	; 0x24
 800f80c:	e768      	b.n	800f6e0 <_vfiprintf_r+0x78>
 800f80e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f812:	460c      	mov	r4, r1
 800f814:	2001      	movs	r0, #1
 800f816:	e7a6      	b.n	800f766 <_vfiprintf_r+0xfe>
 800f818:	2300      	movs	r3, #0
 800f81a:	3401      	adds	r4, #1
 800f81c:	9305      	str	r3, [sp, #20]
 800f81e:	4619      	mov	r1, r3
 800f820:	f04f 0c0a 	mov.w	ip, #10
 800f824:	4620      	mov	r0, r4
 800f826:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f82a:	3a30      	subs	r2, #48	; 0x30
 800f82c:	2a09      	cmp	r2, #9
 800f82e:	d903      	bls.n	800f838 <_vfiprintf_r+0x1d0>
 800f830:	2b00      	cmp	r3, #0
 800f832:	d0c6      	beq.n	800f7c2 <_vfiprintf_r+0x15a>
 800f834:	9105      	str	r1, [sp, #20]
 800f836:	e7c4      	b.n	800f7c2 <_vfiprintf_r+0x15a>
 800f838:	fb0c 2101 	mla	r1, ip, r1, r2
 800f83c:	4604      	mov	r4, r0
 800f83e:	2301      	movs	r3, #1
 800f840:	e7f0      	b.n	800f824 <_vfiprintf_r+0x1bc>
 800f842:	ab03      	add	r3, sp, #12
 800f844:	9300      	str	r3, [sp, #0]
 800f846:	462a      	mov	r2, r5
 800f848:	4b12      	ldr	r3, [pc, #72]	; (800f894 <_vfiprintf_r+0x22c>)
 800f84a:	a904      	add	r1, sp, #16
 800f84c:	4630      	mov	r0, r6
 800f84e:	f3af 8000 	nop.w
 800f852:	4607      	mov	r7, r0
 800f854:	1c78      	adds	r0, r7, #1
 800f856:	d1d6      	bne.n	800f806 <_vfiprintf_r+0x19e>
 800f858:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f85a:	07d9      	lsls	r1, r3, #31
 800f85c:	d405      	bmi.n	800f86a <_vfiprintf_r+0x202>
 800f85e:	89ab      	ldrh	r3, [r5, #12]
 800f860:	059a      	lsls	r2, r3, #22
 800f862:	d402      	bmi.n	800f86a <_vfiprintf_r+0x202>
 800f864:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f866:	f7ff fc4f 	bl	800f108 <__retarget_lock_release_recursive>
 800f86a:	89ab      	ldrh	r3, [r5, #12]
 800f86c:	065b      	lsls	r3, r3, #25
 800f86e:	f53f af1d 	bmi.w	800f6ac <_vfiprintf_r+0x44>
 800f872:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f874:	e71c      	b.n	800f6b0 <_vfiprintf_r+0x48>
 800f876:	ab03      	add	r3, sp, #12
 800f878:	9300      	str	r3, [sp, #0]
 800f87a:	462a      	mov	r2, r5
 800f87c:	4b05      	ldr	r3, [pc, #20]	; (800f894 <_vfiprintf_r+0x22c>)
 800f87e:	a904      	add	r1, sp, #16
 800f880:	4630      	mov	r0, r6
 800f882:	f000 f879 	bl	800f978 <_printf_i>
 800f886:	e7e4      	b.n	800f852 <_vfiprintf_r+0x1ea>
 800f888:	08012c55 	.word	0x08012c55
 800f88c:	08012c5f 	.word	0x08012c5f
 800f890:	00000000 	.word	0x00000000
 800f894:	0800f643 	.word	0x0800f643
 800f898:	08012c5b 	.word	0x08012c5b

0800f89c <_printf_common>:
 800f89c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8a0:	4616      	mov	r6, r2
 800f8a2:	4699      	mov	r9, r3
 800f8a4:	688a      	ldr	r2, [r1, #8]
 800f8a6:	690b      	ldr	r3, [r1, #16]
 800f8a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f8ac:	4293      	cmp	r3, r2
 800f8ae:	bfb8      	it	lt
 800f8b0:	4613      	movlt	r3, r2
 800f8b2:	6033      	str	r3, [r6, #0]
 800f8b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f8b8:	4607      	mov	r7, r0
 800f8ba:	460c      	mov	r4, r1
 800f8bc:	b10a      	cbz	r2, 800f8c2 <_printf_common+0x26>
 800f8be:	3301      	adds	r3, #1
 800f8c0:	6033      	str	r3, [r6, #0]
 800f8c2:	6823      	ldr	r3, [r4, #0]
 800f8c4:	0699      	lsls	r1, r3, #26
 800f8c6:	bf42      	ittt	mi
 800f8c8:	6833      	ldrmi	r3, [r6, #0]
 800f8ca:	3302      	addmi	r3, #2
 800f8cc:	6033      	strmi	r3, [r6, #0]
 800f8ce:	6825      	ldr	r5, [r4, #0]
 800f8d0:	f015 0506 	ands.w	r5, r5, #6
 800f8d4:	d106      	bne.n	800f8e4 <_printf_common+0x48>
 800f8d6:	f104 0a19 	add.w	sl, r4, #25
 800f8da:	68e3      	ldr	r3, [r4, #12]
 800f8dc:	6832      	ldr	r2, [r6, #0]
 800f8de:	1a9b      	subs	r3, r3, r2
 800f8e0:	42ab      	cmp	r3, r5
 800f8e2:	dc26      	bgt.n	800f932 <_printf_common+0x96>
 800f8e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f8e8:	1e13      	subs	r3, r2, #0
 800f8ea:	6822      	ldr	r2, [r4, #0]
 800f8ec:	bf18      	it	ne
 800f8ee:	2301      	movne	r3, #1
 800f8f0:	0692      	lsls	r2, r2, #26
 800f8f2:	d42b      	bmi.n	800f94c <_printf_common+0xb0>
 800f8f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f8f8:	4649      	mov	r1, r9
 800f8fa:	4638      	mov	r0, r7
 800f8fc:	47c0      	blx	r8
 800f8fe:	3001      	adds	r0, #1
 800f900:	d01e      	beq.n	800f940 <_printf_common+0xa4>
 800f902:	6823      	ldr	r3, [r4, #0]
 800f904:	6922      	ldr	r2, [r4, #16]
 800f906:	f003 0306 	and.w	r3, r3, #6
 800f90a:	2b04      	cmp	r3, #4
 800f90c:	bf02      	ittt	eq
 800f90e:	68e5      	ldreq	r5, [r4, #12]
 800f910:	6833      	ldreq	r3, [r6, #0]
 800f912:	1aed      	subeq	r5, r5, r3
 800f914:	68a3      	ldr	r3, [r4, #8]
 800f916:	bf0c      	ite	eq
 800f918:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f91c:	2500      	movne	r5, #0
 800f91e:	4293      	cmp	r3, r2
 800f920:	bfc4      	itt	gt
 800f922:	1a9b      	subgt	r3, r3, r2
 800f924:	18ed      	addgt	r5, r5, r3
 800f926:	2600      	movs	r6, #0
 800f928:	341a      	adds	r4, #26
 800f92a:	42b5      	cmp	r5, r6
 800f92c:	d11a      	bne.n	800f964 <_printf_common+0xc8>
 800f92e:	2000      	movs	r0, #0
 800f930:	e008      	b.n	800f944 <_printf_common+0xa8>
 800f932:	2301      	movs	r3, #1
 800f934:	4652      	mov	r2, sl
 800f936:	4649      	mov	r1, r9
 800f938:	4638      	mov	r0, r7
 800f93a:	47c0      	blx	r8
 800f93c:	3001      	adds	r0, #1
 800f93e:	d103      	bne.n	800f948 <_printf_common+0xac>
 800f940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f948:	3501      	adds	r5, #1
 800f94a:	e7c6      	b.n	800f8da <_printf_common+0x3e>
 800f94c:	18e1      	adds	r1, r4, r3
 800f94e:	1c5a      	adds	r2, r3, #1
 800f950:	2030      	movs	r0, #48	; 0x30
 800f952:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f956:	4422      	add	r2, r4
 800f958:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f95c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f960:	3302      	adds	r3, #2
 800f962:	e7c7      	b.n	800f8f4 <_printf_common+0x58>
 800f964:	2301      	movs	r3, #1
 800f966:	4622      	mov	r2, r4
 800f968:	4649      	mov	r1, r9
 800f96a:	4638      	mov	r0, r7
 800f96c:	47c0      	blx	r8
 800f96e:	3001      	adds	r0, #1
 800f970:	d0e6      	beq.n	800f940 <_printf_common+0xa4>
 800f972:	3601      	adds	r6, #1
 800f974:	e7d9      	b.n	800f92a <_printf_common+0x8e>
	...

0800f978 <_printf_i>:
 800f978:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f97c:	7e0f      	ldrb	r7, [r1, #24]
 800f97e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f980:	2f78      	cmp	r7, #120	; 0x78
 800f982:	4691      	mov	r9, r2
 800f984:	4680      	mov	r8, r0
 800f986:	460c      	mov	r4, r1
 800f988:	469a      	mov	sl, r3
 800f98a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f98e:	d807      	bhi.n	800f9a0 <_printf_i+0x28>
 800f990:	2f62      	cmp	r7, #98	; 0x62
 800f992:	d80a      	bhi.n	800f9aa <_printf_i+0x32>
 800f994:	2f00      	cmp	r7, #0
 800f996:	f000 80d4 	beq.w	800fb42 <_printf_i+0x1ca>
 800f99a:	2f58      	cmp	r7, #88	; 0x58
 800f99c:	f000 80c0 	beq.w	800fb20 <_printf_i+0x1a8>
 800f9a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f9a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f9a8:	e03a      	b.n	800fa20 <_printf_i+0xa8>
 800f9aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f9ae:	2b15      	cmp	r3, #21
 800f9b0:	d8f6      	bhi.n	800f9a0 <_printf_i+0x28>
 800f9b2:	a101      	add	r1, pc, #4	; (adr r1, 800f9b8 <_printf_i+0x40>)
 800f9b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f9b8:	0800fa11 	.word	0x0800fa11
 800f9bc:	0800fa25 	.word	0x0800fa25
 800f9c0:	0800f9a1 	.word	0x0800f9a1
 800f9c4:	0800f9a1 	.word	0x0800f9a1
 800f9c8:	0800f9a1 	.word	0x0800f9a1
 800f9cc:	0800f9a1 	.word	0x0800f9a1
 800f9d0:	0800fa25 	.word	0x0800fa25
 800f9d4:	0800f9a1 	.word	0x0800f9a1
 800f9d8:	0800f9a1 	.word	0x0800f9a1
 800f9dc:	0800f9a1 	.word	0x0800f9a1
 800f9e0:	0800f9a1 	.word	0x0800f9a1
 800f9e4:	0800fb29 	.word	0x0800fb29
 800f9e8:	0800fa51 	.word	0x0800fa51
 800f9ec:	0800fae3 	.word	0x0800fae3
 800f9f0:	0800f9a1 	.word	0x0800f9a1
 800f9f4:	0800f9a1 	.word	0x0800f9a1
 800f9f8:	0800fb4b 	.word	0x0800fb4b
 800f9fc:	0800f9a1 	.word	0x0800f9a1
 800fa00:	0800fa51 	.word	0x0800fa51
 800fa04:	0800f9a1 	.word	0x0800f9a1
 800fa08:	0800f9a1 	.word	0x0800f9a1
 800fa0c:	0800faeb 	.word	0x0800faeb
 800fa10:	682b      	ldr	r3, [r5, #0]
 800fa12:	1d1a      	adds	r2, r3, #4
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	602a      	str	r2, [r5, #0]
 800fa18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fa1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fa20:	2301      	movs	r3, #1
 800fa22:	e09f      	b.n	800fb64 <_printf_i+0x1ec>
 800fa24:	6820      	ldr	r0, [r4, #0]
 800fa26:	682b      	ldr	r3, [r5, #0]
 800fa28:	0607      	lsls	r7, r0, #24
 800fa2a:	f103 0104 	add.w	r1, r3, #4
 800fa2e:	6029      	str	r1, [r5, #0]
 800fa30:	d501      	bpl.n	800fa36 <_printf_i+0xbe>
 800fa32:	681e      	ldr	r6, [r3, #0]
 800fa34:	e003      	b.n	800fa3e <_printf_i+0xc6>
 800fa36:	0646      	lsls	r6, r0, #25
 800fa38:	d5fb      	bpl.n	800fa32 <_printf_i+0xba>
 800fa3a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fa3e:	2e00      	cmp	r6, #0
 800fa40:	da03      	bge.n	800fa4a <_printf_i+0xd2>
 800fa42:	232d      	movs	r3, #45	; 0x2d
 800fa44:	4276      	negs	r6, r6
 800fa46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fa4a:	485a      	ldr	r0, [pc, #360]	; (800fbb4 <_printf_i+0x23c>)
 800fa4c:	230a      	movs	r3, #10
 800fa4e:	e012      	b.n	800fa76 <_printf_i+0xfe>
 800fa50:	682b      	ldr	r3, [r5, #0]
 800fa52:	6820      	ldr	r0, [r4, #0]
 800fa54:	1d19      	adds	r1, r3, #4
 800fa56:	6029      	str	r1, [r5, #0]
 800fa58:	0605      	lsls	r5, r0, #24
 800fa5a:	d501      	bpl.n	800fa60 <_printf_i+0xe8>
 800fa5c:	681e      	ldr	r6, [r3, #0]
 800fa5e:	e002      	b.n	800fa66 <_printf_i+0xee>
 800fa60:	0641      	lsls	r1, r0, #25
 800fa62:	d5fb      	bpl.n	800fa5c <_printf_i+0xe4>
 800fa64:	881e      	ldrh	r6, [r3, #0]
 800fa66:	4853      	ldr	r0, [pc, #332]	; (800fbb4 <_printf_i+0x23c>)
 800fa68:	2f6f      	cmp	r7, #111	; 0x6f
 800fa6a:	bf0c      	ite	eq
 800fa6c:	2308      	moveq	r3, #8
 800fa6e:	230a      	movne	r3, #10
 800fa70:	2100      	movs	r1, #0
 800fa72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fa76:	6865      	ldr	r5, [r4, #4]
 800fa78:	60a5      	str	r5, [r4, #8]
 800fa7a:	2d00      	cmp	r5, #0
 800fa7c:	bfa2      	ittt	ge
 800fa7e:	6821      	ldrge	r1, [r4, #0]
 800fa80:	f021 0104 	bicge.w	r1, r1, #4
 800fa84:	6021      	strge	r1, [r4, #0]
 800fa86:	b90e      	cbnz	r6, 800fa8c <_printf_i+0x114>
 800fa88:	2d00      	cmp	r5, #0
 800fa8a:	d04b      	beq.n	800fb24 <_printf_i+0x1ac>
 800fa8c:	4615      	mov	r5, r2
 800fa8e:	fbb6 f1f3 	udiv	r1, r6, r3
 800fa92:	fb03 6711 	mls	r7, r3, r1, r6
 800fa96:	5dc7      	ldrb	r7, [r0, r7]
 800fa98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fa9c:	4637      	mov	r7, r6
 800fa9e:	42bb      	cmp	r3, r7
 800faa0:	460e      	mov	r6, r1
 800faa2:	d9f4      	bls.n	800fa8e <_printf_i+0x116>
 800faa4:	2b08      	cmp	r3, #8
 800faa6:	d10b      	bne.n	800fac0 <_printf_i+0x148>
 800faa8:	6823      	ldr	r3, [r4, #0]
 800faaa:	07de      	lsls	r6, r3, #31
 800faac:	d508      	bpl.n	800fac0 <_printf_i+0x148>
 800faae:	6923      	ldr	r3, [r4, #16]
 800fab0:	6861      	ldr	r1, [r4, #4]
 800fab2:	4299      	cmp	r1, r3
 800fab4:	bfde      	ittt	le
 800fab6:	2330      	movle	r3, #48	; 0x30
 800fab8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fabc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800fac0:	1b52      	subs	r2, r2, r5
 800fac2:	6122      	str	r2, [r4, #16]
 800fac4:	f8cd a000 	str.w	sl, [sp]
 800fac8:	464b      	mov	r3, r9
 800faca:	aa03      	add	r2, sp, #12
 800facc:	4621      	mov	r1, r4
 800face:	4640      	mov	r0, r8
 800fad0:	f7ff fee4 	bl	800f89c <_printf_common>
 800fad4:	3001      	adds	r0, #1
 800fad6:	d14a      	bne.n	800fb6e <_printf_i+0x1f6>
 800fad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fadc:	b004      	add	sp, #16
 800fade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fae2:	6823      	ldr	r3, [r4, #0]
 800fae4:	f043 0320 	orr.w	r3, r3, #32
 800fae8:	6023      	str	r3, [r4, #0]
 800faea:	4833      	ldr	r0, [pc, #204]	; (800fbb8 <_printf_i+0x240>)
 800faec:	2778      	movs	r7, #120	; 0x78
 800faee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800faf2:	6823      	ldr	r3, [r4, #0]
 800faf4:	6829      	ldr	r1, [r5, #0]
 800faf6:	061f      	lsls	r7, r3, #24
 800faf8:	f851 6b04 	ldr.w	r6, [r1], #4
 800fafc:	d402      	bmi.n	800fb04 <_printf_i+0x18c>
 800fafe:	065f      	lsls	r7, r3, #25
 800fb00:	bf48      	it	mi
 800fb02:	b2b6      	uxthmi	r6, r6
 800fb04:	07df      	lsls	r7, r3, #31
 800fb06:	bf48      	it	mi
 800fb08:	f043 0320 	orrmi.w	r3, r3, #32
 800fb0c:	6029      	str	r1, [r5, #0]
 800fb0e:	bf48      	it	mi
 800fb10:	6023      	strmi	r3, [r4, #0]
 800fb12:	b91e      	cbnz	r6, 800fb1c <_printf_i+0x1a4>
 800fb14:	6823      	ldr	r3, [r4, #0]
 800fb16:	f023 0320 	bic.w	r3, r3, #32
 800fb1a:	6023      	str	r3, [r4, #0]
 800fb1c:	2310      	movs	r3, #16
 800fb1e:	e7a7      	b.n	800fa70 <_printf_i+0xf8>
 800fb20:	4824      	ldr	r0, [pc, #144]	; (800fbb4 <_printf_i+0x23c>)
 800fb22:	e7e4      	b.n	800faee <_printf_i+0x176>
 800fb24:	4615      	mov	r5, r2
 800fb26:	e7bd      	b.n	800faa4 <_printf_i+0x12c>
 800fb28:	682b      	ldr	r3, [r5, #0]
 800fb2a:	6826      	ldr	r6, [r4, #0]
 800fb2c:	6961      	ldr	r1, [r4, #20]
 800fb2e:	1d18      	adds	r0, r3, #4
 800fb30:	6028      	str	r0, [r5, #0]
 800fb32:	0635      	lsls	r5, r6, #24
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	d501      	bpl.n	800fb3c <_printf_i+0x1c4>
 800fb38:	6019      	str	r1, [r3, #0]
 800fb3a:	e002      	b.n	800fb42 <_printf_i+0x1ca>
 800fb3c:	0670      	lsls	r0, r6, #25
 800fb3e:	d5fb      	bpl.n	800fb38 <_printf_i+0x1c0>
 800fb40:	8019      	strh	r1, [r3, #0]
 800fb42:	2300      	movs	r3, #0
 800fb44:	6123      	str	r3, [r4, #16]
 800fb46:	4615      	mov	r5, r2
 800fb48:	e7bc      	b.n	800fac4 <_printf_i+0x14c>
 800fb4a:	682b      	ldr	r3, [r5, #0]
 800fb4c:	1d1a      	adds	r2, r3, #4
 800fb4e:	602a      	str	r2, [r5, #0]
 800fb50:	681d      	ldr	r5, [r3, #0]
 800fb52:	6862      	ldr	r2, [r4, #4]
 800fb54:	2100      	movs	r1, #0
 800fb56:	4628      	mov	r0, r5
 800fb58:	f7f0 fb72 	bl	8000240 <memchr>
 800fb5c:	b108      	cbz	r0, 800fb62 <_printf_i+0x1ea>
 800fb5e:	1b40      	subs	r0, r0, r5
 800fb60:	6060      	str	r0, [r4, #4]
 800fb62:	6863      	ldr	r3, [r4, #4]
 800fb64:	6123      	str	r3, [r4, #16]
 800fb66:	2300      	movs	r3, #0
 800fb68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fb6c:	e7aa      	b.n	800fac4 <_printf_i+0x14c>
 800fb6e:	6923      	ldr	r3, [r4, #16]
 800fb70:	462a      	mov	r2, r5
 800fb72:	4649      	mov	r1, r9
 800fb74:	4640      	mov	r0, r8
 800fb76:	47d0      	blx	sl
 800fb78:	3001      	adds	r0, #1
 800fb7a:	d0ad      	beq.n	800fad8 <_printf_i+0x160>
 800fb7c:	6823      	ldr	r3, [r4, #0]
 800fb7e:	079b      	lsls	r3, r3, #30
 800fb80:	d413      	bmi.n	800fbaa <_printf_i+0x232>
 800fb82:	68e0      	ldr	r0, [r4, #12]
 800fb84:	9b03      	ldr	r3, [sp, #12]
 800fb86:	4298      	cmp	r0, r3
 800fb88:	bfb8      	it	lt
 800fb8a:	4618      	movlt	r0, r3
 800fb8c:	e7a6      	b.n	800fadc <_printf_i+0x164>
 800fb8e:	2301      	movs	r3, #1
 800fb90:	4632      	mov	r2, r6
 800fb92:	4649      	mov	r1, r9
 800fb94:	4640      	mov	r0, r8
 800fb96:	47d0      	blx	sl
 800fb98:	3001      	adds	r0, #1
 800fb9a:	d09d      	beq.n	800fad8 <_printf_i+0x160>
 800fb9c:	3501      	adds	r5, #1
 800fb9e:	68e3      	ldr	r3, [r4, #12]
 800fba0:	9903      	ldr	r1, [sp, #12]
 800fba2:	1a5b      	subs	r3, r3, r1
 800fba4:	42ab      	cmp	r3, r5
 800fba6:	dcf2      	bgt.n	800fb8e <_printf_i+0x216>
 800fba8:	e7eb      	b.n	800fb82 <_printf_i+0x20a>
 800fbaa:	2500      	movs	r5, #0
 800fbac:	f104 0619 	add.w	r6, r4, #25
 800fbb0:	e7f5      	b.n	800fb9e <_printf_i+0x226>
 800fbb2:	bf00      	nop
 800fbb4:	08012c66 	.word	0x08012c66
 800fbb8:	08012c77 	.word	0x08012c77

0800fbbc <__sflush_r>:
 800fbbc:	898a      	ldrh	r2, [r1, #12]
 800fbbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbc2:	4605      	mov	r5, r0
 800fbc4:	0710      	lsls	r0, r2, #28
 800fbc6:	460c      	mov	r4, r1
 800fbc8:	d458      	bmi.n	800fc7c <__sflush_r+0xc0>
 800fbca:	684b      	ldr	r3, [r1, #4]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	dc05      	bgt.n	800fbdc <__sflush_r+0x20>
 800fbd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	dc02      	bgt.n	800fbdc <__sflush_r+0x20>
 800fbd6:	2000      	movs	r0, #0
 800fbd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fbde:	2e00      	cmp	r6, #0
 800fbe0:	d0f9      	beq.n	800fbd6 <__sflush_r+0x1a>
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fbe8:	682f      	ldr	r7, [r5, #0]
 800fbea:	6a21      	ldr	r1, [r4, #32]
 800fbec:	602b      	str	r3, [r5, #0]
 800fbee:	d032      	beq.n	800fc56 <__sflush_r+0x9a>
 800fbf0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fbf2:	89a3      	ldrh	r3, [r4, #12]
 800fbf4:	075a      	lsls	r2, r3, #29
 800fbf6:	d505      	bpl.n	800fc04 <__sflush_r+0x48>
 800fbf8:	6863      	ldr	r3, [r4, #4]
 800fbfa:	1ac0      	subs	r0, r0, r3
 800fbfc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fbfe:	b10b      	cbz	r3, 800fc04 <__sflush_r+0x48>
 800fc00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fc02:	1ac0      	subs	r0, r0, r3
 800fc04:	2300      	movs	r3, #0
 800fc06:	4602      	mov	r2, r0
 800fc08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fc0a:	6a21      	ldr	r1, [r4, #32]
 800fc0c:	4628      	mov	r0, r5
 800fc0e:	47b0      	blx	r6
 800fc10:	1c43      	adds	r3, r0, #1
 800fc12:	89a3      	ldrh	r3, [r4, #12]
 800fc14:	d106      	bne.n	800fc24 <__sflush_r+0x68>
 800fc16:	6829      	ldr	r1, [r5, #0]
 800fc18:	291d      	cmp	r1, #29
 800fc1a:	d82b      	bhi.n	800fc74 <__sflush_r+0xb8>
 800fc1c:	4a29      	ldr	r2, [pc, #164]	; (800fcc4 <__sflush_r+0x108>)
 800fc1e:	410a      	asrs	r2, r1
 800fc20:	07d6      	lsls	r6, r2, #31
 800fc22:	d427      	bmi.n	800fc74 <__sflush_r+0xb8>
 800fc24:	2200      	movs	r2, #0
 800fc26:	6062      	str	r2, [r4, #4]
 800fc28:	04d9      	lsls	r1, r3, #19
 800fc2a:	6922      	ldr	r2, [r4, #16]
 800fc2c:	6022      	str	r2, [r4, #0]
 800fc2e:	d504      	bpl.n	800fc3a <__sflush_r+0x7e>
 800fc30:	1c42      	adds	r2, r0, #1
 800fc32:	d101      	bne.n	800fc38 <__sflush_r+0x7c>
 800fc34:	682b      	ldr	r3, [r5, #0]
 800fc36:	b903      	cbnz	r3, 800fc3a <__sflush_r+0x7e>
 800fc38:	6560      	str	r0, [r4, #84]	; 0x54
 800fc3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fc3c:	602f      	str	r7, [r5, #0]
 800fc3e:	2900      	cmp	r1, #0
 800fc40:	d0c9      	beq.n	800fbd6 <__sflush_r+0x1a>
 800fc42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fc46:	4299      	cmp	r1, r3
 800fc48:	d002      	beq.n	800fc50 <__sflush_r+0x94>
 800fc4a:	4628      	mov	r0, r5
 800fc4c:	f7ff fa8a 	bl	800f164 <_free_r>
 800fc50:	2000      	movs	r0, #0
 800fc52:	6360      	str	r0, [r4, #52]	; 0x34
 800fc54:	e7c0      	b.n	800fbd8 <__sflush_r+0x1c>
 800fc56:	2301      	movs	r3, #1
 800fc58:	4628      	mov	r0, r5
 800fc5a:	47b0      	blx	r6
 800fc5c:	1c41      	adds	r1, r0, #1
 800fc5e:	d1c8      	bne.n	800fbf2 <__sflush_r+0x36>
 800fc60:	682b      	ldr	r3, [r5, #0]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d0c5      	beq.n	800fbf2 <__sflush_r+0x36>
 800fc66:	2b1d      	cmp	r3, #29
 800fc68:	d001      	beq.n	800fc6e <__sflush_r+0xb2>
 800fc6a:	2b16      	cmp	r3, #22
 800fc6c:	d101      	bne.n	800fc72 <__sflush_r+0xb6>
 800fc6e:	602f      	str	r7, [r5, #0]
 800fc70:	e7b1      	b.n	800fbd6 <__sflush_r+0x1a>
 800fc72:	89a3      	ldrh	r3, [r4, #12]
 800fc74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc78:	81a3      	strh	r3, [r4, #12]
 800fc7a:	e7ad      	b.n	800fbd8 <__sflush_r+0x1c>
 800fc7c:	690f      	ldr	r7, [r1, #16]
 800fc7e:	2f00      	cmp	r7, #0
 800fc80:	d0a9      	beq.n	800fbd6 <__sflush_r+0x1a>
 800fc82:	0793      	lsls	r3, r2, #30
 800fc84:	680e      	ldr	r6, [r1, #0]
 800fc86:	bf08      	it	eq
 800fc88:	694b      	ldreq	r3, [r1, #20]
 800fc8a:	600f      	str	r7, [r1, #0]
 800fc8c:	bf18      	it	ne
 800fc8e:	2300      	movne	r3, #0
 800fc90:	eba6 0807 	sub.w	r8, r6, r7
 800fc94:	608b      	str	r3, [r1, #8]
 800fc96:	f1b8 0f00 	cmp.w	r8, #0
 800fc9a:	dd9c      	ble.n	800fbd6 <__sflush_r+0x1a>
 800fc9c:	6a21      	ldr	r1, [r4, #32]
 800fc9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fca0:	4643      	mov	r3, r8
 800fca2:	463a      	mov	r2, r7
 800fca4:	4628      	mov	r0, r5
 800fca6:	47b0      	blx	r6
 800fca8:	2800      	cmp	r0, #0
 800fcaa:	dc06      	bgt.n	800fcba <__sflush_r+0xfe>
 800fcac:	89a3      	ldrh	r3, [r4, #12]
 800fcae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fcb2:	81a3      	strh	r3, [r4, #12]
 800fcb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fcb8:	e78e      	b.n	800fbd8 <__sflush_r+0x1c>
 800fcba:	4407      	add	r7, r0
 800fcbc:	eba8 0800 	sub.w	r8, r8, r0
 800fcc0:	e7e9      	b.n	800fc96 <__sflush_r+0xda>
 800fcc2:	bf00      	nop
 800fcc4:	dfbffffe 	.word	0xdfbffffe

0800fcc8 <_fflush_r>:
 800fcc8:	b538      	push	{r3, r4, r5, lr}
 800fcca:	690b      	ldr	r3, [r1, #16]
 800fccc:	4605      	mov	r5, r0
 800fcce:	460c      	mov	r4, r1
 800fcd0:	b913      	cbnz	r3, 800fcd8 <_fflush_r+0x10>
 800fcd2:	2500      	movs	r5, #0
 800fcd4:	4628      	mov	r0, r5
 800fcd6:	bd38      	pop	{r3, r4, r5, pc}
 800fcd8:	b118      	cbz	r0, 800fce2 <_fflush_r+0x1a>
 800fcda:	6a03      	ldr	r3, [r0, #32]
 800fcdc:	b90b      	cbnz	r3, 800fce2 <_fflush_r+0x1a>
 800fcde:	f7ff f8b7 	bl	800ee50 <__sinit>
 800fce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d0f3      	beq.n	800fcd2 <_fflush_r+0xa>
 800fcea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fcec:	07d0      	lsls	r0, r2, #31
 800fcee:	d404      	bmi.n	800fcfa <_fflush_r+0x32>
 800fcf0:	0599      	lsls	r1, r3, #22
 800fcf2:	d402      	bmi.n	800fcfa <_fflush_r+0x32>
 800fcf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fcf6:	f7ff fa06 	bl	800f106 <__retarget_lock_acquire_recursive>
 800fcfa:	4628      	mov	r0, r5
 800fcfc:	4621      	mov	r1, r4
 800fcfe:	f7ff ff5d 	bl	800fbbc <__sflush_r>
 800fd02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fd04:	07da      	lsls	r2, r3, #31
 800fd06:	4605      	mov	r5, r0
 800fd08:	d4e4      	bmi.n	800fcd4 <_fflush_r+0xc>
 800fd0a:	89a3      	ldrh	r3, [r4, #12]
 800fd0c:	059b      	lsls	r3, r3, #22
 800fd0e:	d4e1      	bmi.n	800fcd4 <_fflush_r+0xc>
 800fd10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fd12:	f7ff f9f9 	bl	800f108 <__retarget_lock_release_recursive>
 800fd16:	e7dd      	b.n	800fcd4 <_fflush_r+0xc>

0800fd18 <fiprintf>:
 800fd18:	b40e      	push	{r1, r2, r3}
 800fd1a:	b503      	push	{r0, r1, lr}
 800fd1c:	4601      	mov	r1, r0
 800fd1e:	ab03      	add	r3, sp, #12
 800fd20:	4805      	ldr	r0, [pc, #20]	; (800fd38 <fiprintf+0x20>)
 800fd22:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd26:	6800      	ldr	r0, [r0, #0]
 800fd28:	9301      	str	r3, [sp, #4]
 800fd2a:	f7ff fc9d 	bl	800f668 <_vfiprintf_r>
 800fd2e:	b002      	add	sp, #8
 800fd30:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd34:	b003      	add	sp, #12
 800fd36:	4770      	bx	lr
 800fd38:	20000084 	.word	0x20000084

0800fd3c <__swbuf_r>:
 800fd3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd3e:	460e      	mov	r6, r1
 800fd40:	4614      	mov	r4, r2
 800fd42:	4605      	mov	r5, r0
 800fd44:	b118      	cbz	r0, 800fd4e <__swbuf_r+0x12>
 800fd46:	6a03      	ldr	r3, [r0, #32]
 800fd48:	b90b      	cbnz	r3, 800fd4e <__swbuf_r+0x12>
 800fd4a:	f7ff f881 	bl	800ee50 <__sinit>
 800fd4e:	69a3      	ldr	r3, [r4, #24]
 800fd50:	60a3      	str	r3, [r4, #8]
 800fd52:	89a3      	ldrh	r3, [r4, #12]
 800fd54:	071a      	lsls	r2, r3, #28
 800fd56:	d525      	bpl.n	800fda4 <__swbuf_r+0x68>
 800fd58:	6923      	ldr	r3, [r4, #16]
 800fd5a:	b31b      	cbz	r3, 800fda4 <__swbuf_r+0x68>
 800fd5c:	6823      	ldr	r3, [r4, #0]
 800fd5e:	6922      	ldr	r2, [r4, #16]
 800fd60:	1a98      	subs	r0, r3, r2
 800fd62:	6963      	ldr	r3, [r4, #20]
 800fd64:	b2f6      	uxtb	r6, r6
 800fd66:	4283      	cmp	r3, r0
 800fd68:	4637      	mov	r7, r6
 800fd6a:	dc04      	bgt.n	800fd76 <__swbuf_r+0x3a>
 800fd6c:	4621      	mov	r1, r4
 800fd6e:	4628      	mov	r0, r5
 800fd70:	f7ff ffaa 	bl	800fcc8 <_fflush_r>
 800fd74:	b9e0      	cbnz	r0, 800fdb0 <__swbuf_r+0x74>
 800fd76:	68a3      	ldr	r3, [r4, #8]
 800fd78:	3b01      	subs	r3, #1
 800fd7a:	60a3      	str	r3, [r4, #8]
 800fd7c:	6823      	ldr	r3, [r4, #0]
 800fd7e:	1c5a      	adds	r2, r3, #1
 800fd80:	6022      	str	r2, [r4, #0]
 800fd82:	701e      	strb	r6, [r3, #0]
 800fd84:	6962      	ldr	r2, [r4, #20]
 800fd86:	1c43      	adds	r3, r0, #1
 800fd88:	429a      	cmp	r2, r3
 800fd8a:	d004      	beq.n	800fd96 <__swbuf_r+0x5a>
 800fd8c:	89a3      	ldrh	r3, [r4, #12]
 800fd8e:	07db      	lsls	r3, r3, #31
 800fd90:	d506      	bpl.n	800fda0 <__swbuf_r+0x64>
 800fd92:	2e0a      	cmp	r6, #10
 800fd94:	d104      	bne.n	800fda0 <__swbuf_r+0x64>
 800fd96:	4621      	mov	r1, r4
 800fd98:	4628      	mov	r0, r5
 800fd9a:	f7ff ff95 	bl	800fcc8 <_fflush_r>
 800fd9e:	b938      	cbnz	r0, 800fdb0 <__swbuf_r+0x74>
 800fda0:	4638      	mov	r0, r7
 800fda2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fda4:	4621      	mov	r1, r4
 800fda6:	4628      	mov	r0, r5
 800fda8:	f000 f806 	bl	800fdb8 <__swsetup_r>
 800fdac:	2800      	cmp	r0, #0
 800fdae:	d0d5      	beq.n	800fd5c <__swbuf_r+0x20>
 800fdb0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800fdb4:	e7f4      	b.n	800fda0 <__swbuf_r+0x64>
	...

0800fdb8 <__swsetup_r>:
 800fdb8:	b538      	push	{r3, r4, r5, lr}
 800fdba:	4b2a      	ldr	r3, [pc, #168]	; (800fe64 <__swsetup_r+0xac>)
 800fdbc:	4605      	mov	r5, r0
 800fdbe:	6818      	ldr	r0, [r3, #0]
 800fdc0:	460c      	mov	r4, r1
 800fdc2:	b118      	cbz	r0, 800fdcc <__swsetup_r+0x14>
 800fdc4:	6a03      	ldr	r3, [r0, #32]
 800fdc6:	b90b      	cbnz	r3, 800fdcc <__swsetup_r+0x14>
 800fdc8:	f7ff f842 	bl	800ee50 <__sinit>
 800fdcc:	89a3      	ldrh	r3, [r4, #12]
 800fdce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fdd2:	0718      	lsls	r0, r3, #28
 800fdd4:	d422      	bmi.n	800fe1c <__swsetup_r+0x64>
 800fdd6:	06d9      	lsls	r1, r3, #27
 800fdd8:	d407      	bmi.n	800fdea <__swsetup_r+0x32>
 800fdda:	2309      	movs	r3, #9
 800fddc:	602b      	str	r3, [r5, #0]
 800fdde:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fde2:	81a3      	strh	r3, [r4, #12]
 800fde4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fde8:	e034      	b.n	800fe54 <__swsetup_r+0x9c>
 800fdea:	0758      	lsls	r0, r3, #29
 800fdec:	d512      	bpl.n	800fe14 <__swsetup_r+0x5c>
 800fdee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fdf0:	b141      	cbz	r1, 800fe04 <__swsetup_r+0x4c>
 800fdf2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fdf6:	4299      	cmp	r1, r3
 800fdf8:	d002      	beq.n	800fe00 <__swsetup_r+0x48>
 800fdfa:	4628      	mov	r0, r5
 800fdfc:	f7ff f9b2 	bl	800f164 <_free_r>
 800fe00:	2300      	movs	r3, #0
 800fe02:	6363      	str	r3, [r4, #52]	; 0x34
 800fe04:	89a3      	ldrh	r3, [r4, #12]
 800fe06:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fe0a:	81a3      	strh	r3, [r4, #12]
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	6063      	str	r3, [r4, #4]
 800fe10:	6923      	ldr	r3, [r4, #16]
 800fe12:	6023      	str	r3, [r4, #0]
 800fe14:	89a3      	ldrh	r3, [r4, #12]
 800fe16:	f043 0308 	orr.w	r3, r3, #8
 800fe1a:	81a3      	strh	r3, [r4, #12]
 800fe1c:	6923      	ldr	r3, [r4, #16]
 800fe1e:	b94b      	cbnz	r3, 800fe34 <__swsetup_r+0x7c>
 800fe20:	89a3      	ldrh	r3, [r4, #12]
 800fe22:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fe26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fe2a:	d003      	beq.n	800fe34 <__swsetup_r+0x7c>
 800fe2c:	4621      	mov	r1, r4
 800fe2e:	4628      	mov	r0, r5
 800fe30:	f000 f886 	bl	800ff40 <__smakebuf_r>
 800fe34:	89a0      	ldrh	r0, [r4, #12]
 800fe36:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fe3a:	f010 0301 	ands.w	r3, r0, #1
 800fe3e:	d00a      	beq.n	800fe56 <__swsetup_r+0x9e>
 800fe40:	2300      	movs	r3, #0
 800fe42:	60a3      	str	r3, [r4, #8]
 800fe44:	6963      	ldr	r3, [r4, #20]
 800fe46:	425b      	negs	r3, r3
 800fe48:	61a3      	str	r3, [r4, #24]
 800fe4a:	6923      	ldr	r3, [r4, #16]
 800fe4c:	b943      	cbnz	r3, 800fe60 <__swsetup_r+0xa8>
 800fe4e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fe52:	d1c4      	bne.n	800fdde <__swsetup_r+0x26>
 800fe54:	bd38      	pop	{r3, r4, r5, pc}
 800fe56:	0781      	lsls	r1, r0, #30
 800fe58:	bf58      	it	pl
 800fe5a:	6963      	ldrpl	r3, [r4, #20]
 800fe5c:	60a3      	str	r3, [r4, #8]
 800fe5e:	e7f4      	b.n	800fe4a <__swsetup_r+0x92>
 800fe60:	2000      	movs	r0, #0
 800fe62:	e7f7      	b.n	800fe54 <__swsetup_r+0x9c>
 800fe64:	20000084 	.word	0x20000084

0800fe68 <_sbrk_r>:
 800fe68:	b538      	push	{r3, r4, r5, lr}
 800fe6a:	4d06      	ldr	r5, [pc, #24]	; (800fe84 <_sbrk_r+0x1c>)
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	4604      	mov	r4, r0
 800fe70:	4608      	mov	r0, r1
 800fe72:	602b      	str	r3, [r5, #0]
 800fe74:	f7f0 ffd8 	bl	8000e28 <_sbrk>
 800fe78:	1c43      	adds	r3, r0, #1
 800fe7a:	d102      	bne.n	800fe82 <_sbrk_r+0x1a>
 800fe7c:	682b      	ldr	r3, [r5, #0]
 800fe7e:	b103      	cbz	r3, 800fe82 <_sbrk_r+0x1a>
 800fe80:	6023      	str	r3, [r4, #0]
 800fe82:	bd38      	pop	{r3, r4, r5, pc}
 800fe84:	2000a74c 	.word	0x2000a74c

0800fe88 <abort>:
 800fe88:	b508      	push	{r3, lr}
 800fe8a:	2006      	movs	r0, #6
 800fe8c:	f000 f8bc 	bl	8010008 <raise>
 800fe90:	2001      	movs	r0, #1
 800fe92:	f7f0 ff51 	bl	8000d38 <_exit>

0800fe96 <_realloc_r>:
 800fe96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe9a:	4680      	mov	r8, r0
 800fe9c:	4614      	mov	r4, r2
 800fe9e:	460e      	mov	r6, r1
 800fea0:	b921      	cbnz	r1, 800feac <_realloc_r+0x16>
 800fea2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fea6:	4611      	mov	r1, r2
 800fea8:	f7ff b9d0 	b.w	800f24c <_malloc_r>
 800feac:	b92a      	cbnz	r2, 800feba <_realloc_r+0x24>
 800feae:	f7ff f959 	bl	800f164 <_free_r>
 800feb2:	4625      	mov	r5, r4
 800feb4:	4628      	mov	r0, r5
 800feb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800feba:	f000 f8e3 	bl	8010084 <_malloc_usable_size_r>
 800febe:	4284      	cmp	r4, r0
 800fec0:	4607      	mov	r7, r0
 800fec2:	d802      	bhi.n	800feca <_realloc_r+0x34>
 800fec4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fec8:	d812      	bhi.n	800fef0 <_realloc_r+0x5a>
 800feca:	4621      	mov	r1, r4
 800fecc:	4640      	mov	r0, r8
 800fece:	f7ff f9bd 	bl	800f24c <_malloc_r>
 800fed2:	4605      	mov	r5, r0
 800fed4:	2800      	cmp	r0, #0
 800fed6:	d0ed      	beq.n	800feb4 <_realloc_r+0x1e>
 800fed8:	42bc      	cmp	r4, r7
 800feda:	4622      	mov	r2, r4
 800fedc:	4631      	mov	r1, r6
 800fede:	bf28      	it	cs
 800fee0:	463a      	movcs	r2, r7
 800fee2:	f7ff f912 	bl	800f10a <memcpy>
 800fee6:	4631      	mov	r1, r6
 800fee8:	4640      	mov	r0, r8
 800feea:	f7ff f93b 	bl	800f164 <_free_r>
 800feee:	e7e1      	b.n	800feb4 <_realloc_r+0x1e>
 800fef0:	4635      	mov	r5, r6
 800fef2:	e7df      	b.n	800feb4 <_realloc_r+0x1e>

0800fef4 <__swhatbuf_r>:
 800fef4:	b570      	push	{r4, r5, r6, lr}
 800fef6:	460c      	mov	r4, r1
 800fef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fefc:	2900      	cmp	r1, #0
 800fefe:	b096      	sub	sp, #88	; 0x58
 800ff00:	4615      	mov	r5, r2
 800ff02:	461e      	mov	r6, r3
 800ff04:	da0d      	bge.n	800ff22 <__swhatbuf_r+0x2e>
 800ff06:	89a3      	ldrh	r3, [r4, #12]
 800ff08:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ff0c:	f04f 0100 	mov.w	r1, #0
 800ff10:	bf0c      	ite	eq
 800ff12:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ff16:	2340      	movne	r3, #64	; 0x40
 800ff18:	2000      	movs	r0, #0
 800ff1a:	6031      	str	r1, [r6, #0]
 800ff1c:	602b      	str	r3, [r5, #0]
 800ff1e:	b016      	add	sp, #88	; 0x58
 800ff20:	bd70      	pop	{r4, r5, r6, pc}
 800ff22:	466a      	mov	r2, sp
 800ff24:	f000 f878 	bl	8010018 <_fstat_r>
 800ff28:	2800      	cmp	r0, #0
 800ff2a:	dbec      	blt.n	800ff06 <__swhatbuf_r+0x12>
 800ff2c:	9901      	ldr	r1, [sp, #4]
 800ff2e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ff32:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ff36:	4259      	negs	r1, r3
 800ff38:	4159      	adcs	r1, r3
 800ff3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ff3e:	e7eb      	b.n	800ff18 <__swhatbuf_r+0x24>

0800ff40 <__smakebuf_r>:
 800ff40:	898b      	ldrh	r3, [r1, #12]
 800ff42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ff44:	079d      	lsls	r5, r3, #30
 800ff46:	4606      	mov	r6, r0
 800ff48:	460c      	mov	r4, r1
 800ff4a:	d507      	bpl.n	800ff5c <__smakebuf_r+0x1c>
 800ff4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ff50:	6023      	str	r3, [r4, #0]
 800ff52:	6123      	str	r3, [r4, #16]
 800ff54:	2301      	movs	r3, #1
 800ff56:	6163      	str	r3, [r4, #20]
 800ff58:	b002      	add	sp, #8
 800ff5a:	bd70      	pop	{r4, r5, r6, pc}
 800ff5c:	ab01      	add	r3, sp, #4
 800ff5e:	466a      	mov	r2, sp
 800ff60:	f7ff ffc8 	bl	800fef4 <__swhatbuf_r>
 800ff64:	9900      	ldr	r1, [sp, #0]
 800ff66:	4605      	mov	r5, r0
 800ff68:	4630      	mov	r0, r6
 800ff6a:	f7ff f96f 	bl	800f24c <_malloc_r>
 800ff6e:	b948      	cbnz	r0, 800ff84 <__smakebuf_r+0x44>
 800ff70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff74:	059a      	lsls	r2, r3, #22
 800ff76:	d4ef      	bmi.n	800ff58 <__smakebuf_r+0x18>
 800ff78:	f023 0303 	bic.w	r3, r3, #3
 800ff7c:	f043 0302 	orr.w	r3, r3, #2
 800ff80:	81a3      	strh	r3, [r4, #12]
 800ff82:	e7e3      	b.n	800ff4c <__smakebuf_r+0xc>
 800ff84:	89a3      	ldrh	r3, [r4, #12]
 800ff86:	6020      	str	r0, [r4, #0]
 800ff88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff8c:	81a3      	strh	r3, [r4, #12]
 800ff8e:	9b00      	ldr	r3, [sp, #0]
 800ff90:	6163      	str	r3, [r4, #20]
 800ff92:	9b01      	ldr	r3, [sp, #4]
 800ff94:	6120      	str	r0, [r4, #16]
 800ff96:	b15b      	cbz	r3, 800ffb0 <__smakebuf_r+0x70>
 800ff98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ff9c:	4630      	mov	r0, r6
 800ff9e:	f000 f84d 	bl	801003c <_isatty_r>
 800ffa2:	b128      	cbz	r0, 800ffb0 <__smakebuf_r+0x70>
 800ffa4:	89a3      	ldrh	r3, [r4, #12]
 800ffa6:	f023 0303 	bic.w	r3, r3, #3
 800ffaa:	f043 0301 	orr.w	r3, r3, #1
 800ffae:	81a3      	strh	r3, [r4, #12]
 800ffb0:	89a3      	ldrh	r3, [r4, #12]
 800ffb2:	431d      	orrs	r5, r3
 800ffb4:	81a5      	strh	r5, [r4, #12]
 800ffb6:	e7cf      	b.n	800ff58 <__smakebuf_r+0x18>

0800ffb8 <_raise_r>:
 800ffb8:	291f      	cmp	r1, #31
 800ffba:	b538      	push	{r3, r4, r5, lr}
 800ffbc:	4604      	mov	r4, r0
 800ffbe:	460d      	mov	r5, r1
 800ffc0:	d904      	bls.n	800ffcc <_raise_r+0x14>
 800ffc2:	2316      	movs	r3, #22
 800ffc4:	6003      	str	r3, [r0, #0]
 800ffc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ffca:	bd38      	pop	{r3, r4, r5, pc}
 800ffcc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ffce:	b112      	cbz	r2, 800ffd6 <_raise_r+0x1e>
 800ffd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ffd4:	b94b      	cbnz	r3, 800ffea <_raise_r+0x32>
 800ffd6:	4620      	mov	r0, r4
 800ffd8:	f000 f852 	bl	8010080 <_getpid_r>
 800ffdc:	462a      	mov	r2, r5
 800ffde:	4601      	mov	r1, r0
 800ffe0:	4620      	mov	r0, r4
 800ffe2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ffe6:	f000 b839 	b.w	801005c <_kill_r>
 800ffea:	2b01      	cmp	r3, #1
 800ffec:	d00a      	beq.n	8010004 <_raise_r+0x4c>
 800ffee:	1c59      	adds	r1, r3, #1
 800fff0:	d103      	bne.n	800fffa <_raise_r+0x42>
 800fff2:	2316      	movs	r3, #22
 800fff4:	6003      	str	r3, [r0, #0]
 800fff6:	2001      	movs	r0, #1
 800fff8:	e7e7      	b.n	800ffca <_raise_r+0x12>
 800fffa:	2400      	movs	r4, #0
 800fffc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010000:	4628      	mov	r0, r5
 8010002:	4798      	blx	r3
 8010004:	2000      	movs	r0, #0
 8010006:	e7e0      	b.n	800ffca <_raise_r+0x12>

08010008 <raise>:
 8010008:	4b02      	ldr	r3, [pc, #8]	; (8010014 <raise+0xc>)
 801000a:	4601      	mov	r1, r0
 801000c:	6818      	ldr	r0, [r3, #0]
 801000e:	f7ff bfd3 	b.w	800ffb8 <_raise_r>
 8010012:	bf00      	nop
 8010014:	20000084 	.word	0x20000084

08010018 <_fstat_r>:
 8010018:	b538      	push	{r3, r4, r5, lr}
 801001a:	4d07      	ldr	r5, [pc, #28]	; (8010038 <_fstat_r+0x20>)
 801001c:	2300      	movs	r3, #0
 801001e:	4604      	mov	r4, r0
 8010020:	4608      	mov	r0, r1
 8010022:	4611      	mov	r1, r2
 8010024:	602b      	str	r3, [r5, #0]
 8010026:	f7f0 fed6 	bl	8000dd6 <_fstat>
 801002a:	1c43      	adds	r3, r0, #1
 801002c:	d102      	bne.n	8010034 <_fstat_r+0x1c>
 801002e:	682b      	ldr	r3, [r5, #0]
 8010030:	b103      	cbz	r3, 8010034 <_fstat_r+0x1c>
 8010032:	6023      	str	r3, [r4, #0]
 8010034:	bd38      	pop	{r3, r4, r5, pc}
 8010036:	bf00      	nop
 8010038:	2000a74c 	.word	0x2000a74c

0801003c <_isatty_r>:
 801003c:	b538      	push	{r3, r4, r5, lr}
 801003e:	4d06      	ldr	r5, [pc, #24]	; (8010058 <_isatty_r+0x1c>)
 8010040:	2300      	movs	r3, #0
 8010042:	4604      	mov	r4, r0
 8010044:	4608      	mov	r0, r1
 8010046:	602b      	str	r3, [r5, #0]
 8010048:	f7f0 fed5 	bl	8000df6 <_isatty>
 801004c:	1c43      	adds	r3, r0, #1
 801004e:	d102      	bne.n	8010056 <_isatty_r+0x1a>
 8010050:	682b      	ldr	r3, [r5, #0]
 8010052:	b103      	cbz	r3, 8010056 <_isatty_r+0x1a>
 8010054:	6023      	str	r3, [r4, #0]
 8010056:	bd38      	pop	{r3, r4, r5, pc}
 8010058:	2000a74c 	.word	0x2000a74c

0801005c <_kill_r>:
 801005c:	b538      	push	{r3, r4, r5, lr}
 801005e:	4d07      	ldr	r5, [pc, #28]	; (801007c <_kill_r+0x20>)
 8010060:	2300      	movs	r3, #0
 8010062:	4604      	mov	r4, r0
 8010064:	4608      	mov	r0, r1
 8010066:	4611      	mov	r1, r2
 8010068:	602b      	str	r3, [r5, #0]
 801006a:	f7f0 fe53 	bl	8000d14 <_kill>
 801006e:	1c43      	adds	r3, r0, #1
 8010070:	d102      	bne.n	8010078 <_kill_r+0x1c>
 8010072:	682b      	ldr	r3, [r5, #0]
 8010074:	b103      	cbz	r3, 8010078 <_kill_r+0x1c>
 8010076:	6023      	str	r3, [r4, #0]
 8010078:	bd38      	pop	{r3, r4, r5, pc}
 801007a:	bf00      	nop
 801007c:	2000a74c 	.word	0x2000a74c

08010080 <_getpid_r>:
 8010080:	f7f0 be40 	b.w	8000d04 <_getpid>

08010084 <_malloc_usable_size_r>:
 8010084:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010088:	1f18      	subs	r0, r3, #4
 801008a:	2b00      	cmp	r3, #0
 801008c:	bfbc      	itt	lt
 801008e:	580b      	ldrlt	r3, [r1, r0]
 8010090:	18c0      	addlt	r0, r0, r3
 8010092:	4770      	bx	lr

08010094 <_init>:
 8010094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010096:	bf00      	nop
 8010098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801009a:	bc08      	pop	{r3}
 801009c:	469e      	mov	lr, r3
 801009e:	4770      	bx	lr

080100a0 <_fini>:
 80100a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100a2:	bf00      	nop
 80100a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80100a6:	bc08      	pop	{r3}
 80100a8:	469e      	mov	lr, r3
 80100aa:	4770      	bx	lr
